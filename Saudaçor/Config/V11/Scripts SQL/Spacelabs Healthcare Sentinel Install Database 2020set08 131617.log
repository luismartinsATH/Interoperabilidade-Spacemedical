SQL Server Location = 'SRSASERVV0132'
Username = ''
Password = {PASSWORDWITHHELD}
Upgrade = 'False'
SingleWorkstation = False
SkipDatabase = False
HideInterface = 'true'
08/09/2020 13:16:17: Database installer started...
Upgrading Sentinel databse - creating upgrade support methods.
08/09/2020 13:16:18: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.SqlToCreateSupportMethods.sql

08/09/2020 13:16:18: 
--- Creates methods to support the upgrading of the database.
--- Functions are then removed by the SqlToRemoveSupportMethods.sql 
USE [LomondClinicalData];

08/09/2020 13:16:18: 
CREATE PROCEDURE  DeleteDefaultConstraintForColumn(@TableName varchar(MAX), @ColumnName varchar(MAX)) AS
BEGIN
	DECLARE @Constraints NVARCHAR(MAX) = (SELECT df.[Name] FROM sys.default_constraints df
	JOIN sys.columns c ON c.default_object_id = df.object_id
	WHERE df.parent_object_id = OBJECT_ID(@TableName) AND c.[Name] = @ColumnName)
	IF @Constraints IS NOT NULL
	BEGIN
		EXEC ('ALTER TABLE ' + @TableName + ' DROP CONSTRAINT ' + @Constraints )
		RETURN;
	END
END;
Upgrading the set of Sentinel databases from Sentinel 9 to latest version.
08/09/2020 13:16:18: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToDatabaseMigrationUpgrade(PerformedFirst).sql

08/09/2020 13:16:18: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondAuditData]

08/09/2020 13:16:18: 
ALTER DATABASE [LomondAuditData] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;

08/09/2020 13:16:18: 
ALTER DATABASE [LomondAuditData] COLLATE Latin1_General_CI_AI

08/09/2020 13:16:18: 
ALTER DATABASE [LomondAuditData] SET MULTI_USER;

08/09/2020 13:16:18: 
USE [LomondClinicalData]

08/09/2020 13:16:18: 
------------Patient
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
UPDATE [Patient]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime OR [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:18: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [Patient]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:18: 
--•	Update Sentinel 9  rows where the status field is not 10 or 20 to 10
--•	Update all Sentinel 9 rows where the status field is 20 and Patient Id is null or empty string or the Organisation key is null to 10
UPDATE [Patient]
SET [Status] = 10
WHERE [Status] NOT IN(10,20)

08/09/2020 13:16:18: 
------------------- FIX FOR QMS 131068
UPDATE [Patient]
SET [PatientNumberNamespace] = 'Default'
WHERE [PatientNumberNamespace] = ''
UPDATE [Patient]
SET [Status] = 10
Where PatientNumber ='' OR PatientNumber = NULL OR PatientNumberNamespace = '' OR PatientNumberNamespace = NULL

08/09/2020 13:16:18: 
--Update the Gender to Unknown value (0) if the value is NULL or any value other than (0, 1, 2) – Null update to “0” 
UPDATE [Person] 
SET Gender = 0
WHERE Gender IS NULL OR Gender NOT IN(0,1,2)

08/09/2020 13:16:19: 
--If the height is outside 0 or 3 then we will set this to null
UPDATE [Person]
SET Height = NULL
WHERE Height >= 3 OR Height < 0

08/09/2020 13:16:19: 
--If the weight is outside 0 or 80000 then we will set this to null
UPDATE [Person] 
SET [Weight] = NULL
WHERE [Weight] >= 800000 OR [Weight] < 0

08/09/2020 13:16:19: 
-------------------StaffMember
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [StaffMember]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime OR [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:19: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [StaffMember]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:20: 
---------------------------Test
--If the height is outside 0 or 3 then we will set this to null
UPDATE [Test]
SET Height = NULL
WHERE Height >= 3 OR Height < 0

08/09/2020 13:16:20: 
--If the weight is outside 0 or 80000 then we will set this to null
UPDATE [Test] 
SET [Weight] = NULL
WHERE [Weight] >= 800000 OR [Weight] < 0

08/09/2020 13:16:20: 
--to a default value 0
UPDATE [Test]
SET [Status] = 0
WHERE [Status] NOT IN (160,140,120,100,80,70,60,40,20,0)

08/09/2020 13:16:20: 
--•	If CreatedDateTime is null and UpdatedDateTime is null and Recording Start Time is not null then set both to Recording Start Time
--•	If CreatedDateTime is null and UpdatedDateTime is null and recording start time is null then set all  to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [Test]
SET [CreatedDateTime] = CASE
WHEN ([UpdatedDateTime] IS  NULL AND [RecordingStartDateTime] IS  NOT NULL) THEN [RecordingStartDateTime]
WHEN  ([CreatedDateTime] > [UpdatedDateTime] OR [UpdatedDateTime] IS NOT NULL) THEN [UpdatedDateTime]
ELSE  GETUTCDATE()
END
WHERE [CreatedDateTime] IS NULL OR [CreatedDateTime] > [UpdatedDateTime]

08/09/2020 13:16:20: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [Test]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:20: 
 --set all values for Priority that are not either 0 or 1 to 0
UPDATE [Test]
SET [Priority] = 0
WHERE [Priority] NOT IN (0,1)

08/09/2020 13:16:20: 
--set all values for Status that are not either 0 or 1 to 0
UPDATE [Order]
SET [Status] = 0
WHERE [Status] NOT IN (0,1,2,3)

08/09/2020 13:16:20: 
----------------------Analysis
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [ClinicalData]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime OR [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:21: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [ClinicalData]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:21: 
--------------------------------Case
--default value would be 0
UPDATE [Case]
SET [CaseType] = '00000000-0000-0000-0000-000000000000'
WHERE [CaseType] NOT IN ('00000000-0000-0000-0000-000000000000','C14FA7C4-9FD8-462B-8DFE-BEF9EBCC6ED7','BA7FB7A9-9030-4D96-9411-883FDE285CA6')

08/09/2020 13:16:21: 
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [Case]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime OR [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:21: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [Case]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:21: 
-------------------------------FileStore
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [File]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime OR [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:23: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [File]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:23: 
-----------------------------------------Recording
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [ClinicalData]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime OR [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:23: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [ClinicalData]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:23: 
----------------------------------------------Report
--•	If CreatedDateTime is null and UpdatedDateTime is null and CreationDate is not null then set all to Creation Date
--•	If CreatedDateTime is null and UpdatedDateTime is null and Creation Date is null then set all to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [Report]
SET [CreatedDateTime] = CASE
WHEN ([UpdatedDateTime] IS  NULL AND [CreationDate] IS  NOT NULL) THEN [CreationDate]
WHEN  ([CreatedDateTime] > [UpdatedDateTime] OR [UpdatedDateTime] IS NOT NULL) THEN [UpdatedDateTime]
ELSE  GETUTCDATE()
END
Where [CreatedDateTime] IS NULL OR [CreatedDateTime] > [UpdatedDateTime]

08/09/2020 13:16:24: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [Report]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:24: 
--Set to unconfirmed (2) if not 2,3,4,5
UPDATE [Report]
SET [Status] = 2
WHERE [Status] NOT IN (2,3,4,5)

08/09/2020 13:16:24: 
---------------------------------------------ReportSignature
--•	If CreatedDateTime is null and UpdatedDateTime is null and Date Signed is not null then set all to Date Signed
--•	If CreatedDateTime is null and UpdatedDateTime is null and Date Signed  is null then set all to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [Signature]
SET [CreatedDateTime] = CASE
WHEN ([UpdatedDateTime] IS  NULL AND [DateSigned] IS  NOT NULL) THEN [DateSigned]
WHEN  ([CreatedDateTime] > [UpdatedDateTime] OR [UpdatedDateTime] IS NOT NULL) THEN [UpdatedDateTime]
ELSE  GETUTCDATE()
END
WHERE [CreatedDateTime] IS NULL OR [CreatedDateTime] > [UpdatedDateTime]

08/09/2020 13:16:24: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [Signature]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:24: 
---------------------------------AnalyserUserSetups
--•	If CreatedDateTime is null and UpdatedDateTime is null then set both to getutcdate()
--•	If CreatedDateTime is null and UpdatedDateTime is not null then CreatedDateTime = UpdatedDateTime
--•	If UpdatedDateTime is null and CreatedDateTime is not null then UpdatedDateTime = CreatedDateTime
--•	If CreatedDateTime > UpdatedDateTime then CreatedDateTime = UpdatedDateTime
UPDATE [AnalyserUserSetups]
SET CreatedDateTime = 
CASE
WHEN CreatedDateTime > UpdatedDateTime or [UpdatedDateTime] IS NOT NULL
THEN [UpdatedDateTime]
ELSE GETUTCDATE()
END
WHERE CreatedDateTime IS NULL OR CreatedDateTime > UpdatedDateTime

08/09/2020 13:16:24: 
--We have made sure that CretedDateTime is not NULL in previous step. 
--So no need to check for CretedDateTime NULL constraint while updating the UpdatedDateTime
UPDATE [AnalyserUserSetups]
SET UpdatedDateTime = CreatedDateTime
WHERE UpdatedDateTime IS NULL

08/09/2020 13:16:24: 
--truncate data in session and RecordInUse tables
TRUNCATE TABLE [session]

08/09/2020 13:16:24: 
TRUNCATE TABLE [RecordInUse]

08/09/2020 13:16:24: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.Triggers.sql

08/09/2020 13:16:24: 
USE [LomondClinicalData]

08/09/2020 13:16:24: 
SET ANSI_NULLS ON

08/09/2020 13:16:24: 
SET QUOTED_IDENTIFIER ON

08/09/2020 13:16:24: 
-- Patient update trigger 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Patient_InsertUpdate')
BEGIN
	DROP TRIGGER [TR_Patient_InsertUpdate]
END
08/09/2020 13:16:24: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddFunctionToProcessFamilyAndGivenNames.sql

08/09/2020 13:16:24: 
/****** User Defined function to process names and specifically to handle nulls in family name or given name ******/
USE [LomondClinicalData]

08/09/2020 13:16:24: 
SET ANSI_NULLS ON

08/09/2020 13:16:24: 
SET QUOTED_IDENTIFIER ON

08/09/2020 13:16:24: 
-- If Functions already exist then drop them first
IF object_id(N'[GenerateNameByGivenNameFirst]', N'FN') IS NOT NULL
    DROP FUNCTION [GenerateNameByGivenNameFirst]

08/09/2020 13:16:24: 
IF object_id(N'[GenerateNameByFamilyNameFirst]', N'FN') IS NOT NULL
    DROP FUNCTION [GenerateNameByFamilyNameFirst]

08/09/2020 13:16:24: 
-- Create [GenerateNameByGivenNameFirst] Function
CREATE Function [dbo].[GenerateNameByGivenNameFirst](@FamilyName NVARCHAR(64), @GivenName NVARCHAR(64))
RETURNS NVARCHAR(129)
AS
BEGIN
	DECLARE @JoinedName NVARCHAR(129)
	SELECT @JoinedName = CASE
		WHEN 
			@FamilyName IS NULL AND 
			@GivenName IS NOT NULL 
		THEN 
			LTRIM(RTRIM(@GivenName))
		WHEN 
			@FamilyName IS NOT NULL AND 
			@GivenName IS NULL 
		THEN 
			LTRIM(RTRIM(@FamilyName))
		ELSE 
			RTRIM(LTRIM(@GivenName)) + ' ' + LTRIM(RTRIM(@FamilyName)) 
	END	
	RETURN @JoinedName
END

08/09/2020 13:16:24: 
-- Generate [GenerateNameByFamilyNameFirst] Function
CREATE Function [dbo].[GenerateNameByFamilyNameFirst](@FamilyName NVARCHAR(64),@GivenName NVARCHAR(64))
RETURNS NVARCHAR(128)
AS
BEGIN
	DECLARE @JoinedName NVARCHAR(128)
	SELECT @JoinedName = CASE
		WHEN 
			@FamilyName IS NULL AND 
			@GivenName IS NOT NULL 
		THEN 
			LTRIM(RTRIM(@GivenName))
		WHEN 
			@FamilyName IS NOT NULL AND 
			@GivenName IS NULL 
		THEN 
			LTRIM(RTRIM(@FamilyName))
		ELSE 
			RTRIM(LTRIM(@FamilyName)) + ', ' + LTRIM(RTRIM(@GivenName))
	END
	RETURN @JoinedName
END
08/09/2020 13:16:24: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMoveAddressColumnsIntoFacilityTable.sql

08/09/2020 13:16:24: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:24: 
------------------- MOVING ADDRESS COLUMNS INTO FACILITY TABLE
ALTER TABLE [Facility] DROP CONSTRAINT FK_Facility_Address;

08/09/2020 13:16:24: 
ALTER TABLE [Facility] ADD [AddressLine1] NVARCHAR(128) NULL;
ALTER TABLE [Facility] ADD [AddressLine2] NVARCHAR(128) NULL;
ALTER TABLE [Facility] ADD [City] NVARCHAR(64) NULL;
ALTER TABLE [Facility] ADD [PostZipCode] NVARCHAR(16) NULL;
ALTER TABLE [Facility] ADD [CountyRegion] NVARCHAR(64) NULL;
ALTER TABLE [Facility] ADD [Country] NVARCHAR(64) NULL;
ALTER TABLE [Facility] ADD [HomePhone] NVARCHAR(32) NULL;
ALTER TABLE [Facility] ADD [WorkPhone] NVARCHAR(32) NULL;
ALTER TABLE [Facility] ADD [MobilePhone] NVARCHAR(32) NULL;
ALTER TABLE [Facility] ADD [FaxNumber] NVARCHAR(32) NULL;
ALTER TABLE [Facility] ADD [EmailAddress] NVARCHAR(128) NULL;

08/09/2020 13:16:24: 
UPDATE [Facility] SET
	[Facility].[AddressLine1]=[Address].[AddressLine1],
	[Facility].[AddressLine2]=[Address].[AddressLine2],
	[Facility].[City]=[Address].[City],
	[Facility].[PostZipCode]=[Address].[PostZipCode],
	[Facility].[CountyRegion]=[Address].[CountyRegion],
	[Facility].[Country]=[Address].[Country],
	[Facility].[HomePhone]=[Address].[HomePhone],
	[Facility].[WorkPhone]=[Address].[WorkPhone],
	[Facility].[MobilePhone]=[Address].[MobilePhone],
	[Facility].[FaxNumber]=[Address].[FaxNumber],
	[Facility].[EmailAddress]=[Address].[EmailAddress]
FROM [Address] INNER JOIN [Facility] ON [Facility].[AddressKey]=[Address].[Key];

08/09/2020 13:16:25: 
DELETE [Address] FROM [Address] INNER JOIN [Facility] ON [Address].[Key]=[Facility].[AddressKey] WHERE NOT([Address].[AddressLine1] IS NULL);

08/09/2020 13:16:25: 
ALTER TABLE [Facility] DROP COLUMN [AddressKey];

08/09/2020 13:16:25: 
-- remove the not-specified row from the facility table
UPDATE [Test] SET [DownloadFacilityKey]=NULL WHERE [DownloadFacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';
UPDATE [Test] SET [AnalysisFacilityKey]=NULL WHERE [AnalysisFacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';
UPDATE [Test] SET [FacilityKey]=NULL WHERE [FacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';

08/09/2020 13:16:26: 
UPDATE [Patient] SET [InPatientFacilityKey]=NULL WHERE [InPatientFacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';
UPDATE [Patient] SET [OutPatientFacilityKey]=NULL WHERE [OutPatientFacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';

08/09/2020 13:16:26: 
UPDATE [StaffMember] SET [FacilityKey]=NULL WHERE [FacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';

08/09/2020 13:16:26: 
DELETE FROM [ExternalDataTransfer] WHERE [FacilityKey]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';

08/09/2020 13:16:26: 
DELETE FROM [Facility] WHERE [Key]='{51b7a831-4731-4e2e-acec-06636adc7ad3}';
08/09/2020 13:16:26: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMoveAddressAndPersonColumnsIntoStaffTable.sql

08/09/2020 13:16:26: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:26: 
------------------- MOVING ADDRESS AND PERSON COLUMNS INTO STAFF MEMBER TABLE
ALTER TABLE [StaffMember] DROP CONSTRAINT FK_StaffMember_Person;
ALTER TABLE [Person] DROP CONSTRAINT FK_Person_Address;

08/09/2020 13:16:26: 
ALTER TABLE [StaffMember] ADD [AddressLine1] NVARCHAR(128) NULL;
ALTER TABLE [StaffMember] ADD [AddressLine2] NVARCHAR(128) NULL;
ALTER TABLE [StaffMember] ADD [City] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ADD [PostZipCode] NVARCHAR(16) NULL;
ALTER TABLE [StaffMember] ADD [CountyRegion] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ADD [Country] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ADD [HomePhone] NVARCHAR(32) NULL;
ALTER TABLE [StaffMember] ADD [WorkPhone] NVARCHAR(32) NULL;
ALTER TABLE [StaffMember] ADD [MobilePhone] NVARCHAR(32) NULL;
ALTER TABLE [StaffMember] ADD [FaxNumber] NVARCHAR(32) NULL;
ALTER TABLE [StaffMember] ADD [EmailAddress] NVARCHAR(128) NULL;
ALTER TABLE [StaffMember] ADD [PagerCode] NVARCHAR(32) NULL;
ALTER TABLE [StaffMember] ADD [Title] NVARCHAR(16) NULL;
ALTER TABLE [StaffMember] ADD [GivenName] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ADD [FamilyName] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ADD [MiddleInitials] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ADD [Notes] NTEXT NULL;

08/09/2020 13:16:26: 
UPDATE [StaffMember]
SET [StaffMember].[AddressLine1] = [Address].[AddressLine1],
    [StaffMember].[AddressLine2] = [Address].[AddressLine2],
	[StaffMember].[City] = [Address].[City],
	[StaffMember].[PostZipCode] = [Address].[PostZipCode],
	[StaffMember].[CountyRegion] = [Address].[CountyRegion],
	[StaffMember].[Country] = [Address].[Country],
	[StaffMember].[HomePhone] = [Address].[HomePhone],
	[StaffMember].[WorkPhone] = [Address].[WorkPhone],
	[StaffMember].[MobilePhone] = [Address].[MobilePhone],
	[StaffMember].[FaxNumber] = [Address].[FaxNumber],
	[StaffMember].[EmailAddress] = [Address].[EmailAddress],
	[StaffMember].[PagerCode] = [Address].[PagerCode],
	[StaffMember].[Title] = [Person].[Title],
	[StaffMember].[GivenName] = [Person].[GivenName],
	[StaffMember].[FamilyName] = [Person].[FamilyName],
	[StaffMember].[MiddleInitials] = [Person].[MiddleInitials],
	[StaffMember].[Notes] = [Person].[Notes]
FROM [Address] INNER JOIN [Person] ON [Person].[AddressKey]=[Address].[Key] 
INNER JOIN [StaffMember] ON [StaffMember].[PersonKey]=[Person].[Key];

08/09/2020 13:16:28: 
DELETE FROM [Address] FROM [Address] INNER JOIN [Person] ON [Address].[Key]=[Person].[AddressKey] INNER JOIN [StaffMember] ON [Person].[Key]=[StaffMember].[PersonKey];
DELETE FROM [Person] FROM [Person] INNER JOIN [StaffMember] ON [Person].[Key]=[StaffMember].[PersonKey] AND [Person].[Key]<>'{CF3D0307-EEE0-48FC-98B8-1DBC01E1F013}';

08/09/2020 13:16:30: 
ALTER TABLE [StaffMember] DROP COLUMN [PersonKey];
08/09/2020 13:16:30: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMoveAddressAndPersonColumnsIntoPatientTable.sql

08/09/2020 13:16:30: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:30: 
------------------- MOVING ADDRESS AND PERSON COLUMNS INTO PATIENT TABLE
DROP INDEX IX_PatientPersonKey ON [Patient];
DROP INDEX IX_PatientContactKey ON [Patient];
DROP INDEX IX_PersonAddressKey ON [Person];
DROP INDEX IX_PersonGivenName ON [Person];

08/09/2020 13:16:30: 
ALTER TABLE [Patient] DROP CONSTRAINT FK_Patient_Person;
ALTER TABLE [Patient] DROP CONSTRAINT FK_Patient_Contact;

08/09/2020 13:16:30: 
ALTER TABLE [Patient] ADD [AddressLine1] NVARCHAR(128) NULL;
ALTER TABLE [Patient] ADD [AddressLine2] NVARCHAR(128) NULL;
ALTER TABLE [Patient] ADD [City] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [PostZipCode] NVARCHAR(16) NULL;
ALTER TABLE [Patient] ADD [CountyRegion] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [Country] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [HomePhone] NVARCHAR(32) NULL;
ALTER TABLE [Patient] ADD [WorkPhone] NVARCHAR(32) NULL;
ALTER TABLE [Patient] ADD [MobilePhone] NVARCHAR(32) NULL;
ALTER TABLE [Patient] ADD [EmailAddress] NVARCHAR(128) NULL;
ALTER TABLE [Patient] ADD [Title] NVARCHAR(16) NULL;
ALTER TABLE [Patient] ADD [GivenName] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [FamilyName] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [MiddleInitials] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [Gender] TINYINT NULL;
ALTER TABLE [Patient] ADD [Height] REAL NULL;
ALTER TABLE [Patient] ADD [Weight] REAL NULL;
ALTER TABLE [Patient] ADD [Ethnicity] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [Notes] NTEXT NULL;
ALTER TABLE [Patient] ADD [ContactGivenName] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [ContactFamilyName] NVARCHAR(64) NULL;
ALTER TABLE [Patient] ADD [ContactHomePhone] NVARCHAR(32) NULL;
ALTER TABLE [Patient] ADD [ContactMobilePhone] NVARCHAR(32) NULL;

08/09/2020 13:16:30: 
UPDATE [Patient]
SET [Patient].[AddressLine1] = [Address].[AddressLine1],
    [Patient].[AddressLine2] = [Address].[AddressLine2],
	[Patient].[City] = [Address].[City],
	[Patient].[PostZipCode] = [Address].[PostZipCode],
	[Patient].[CountyRegion] = [Address].[CountyRegion],
	[Patient].[Country] = [Address].[Country],
	[Patient].[HomePhone] = [Address].[HomePhone],
	[Patient].[WorkPhone] = [Address].[WorkPhone],
	[Patient].[MobilePhone] = [Address].[MobilePhone],
	[Patient].[EmailAddress] = [Address].[EmailAddress],
	[Patient].[Title] = [Person].[Title],
	[Patient].[GivenName] = [Person].[GivenName],
	[Patient].[FamilyName] = [Person].[FamilyName],
	[Patient].[MiddleInitials] = [Person].[MiddleInitials],
	[Patient].[Notes] = [Person].[Notes],
	[Patient].[Gender] = [Person].[Gender],
	[Patient].[Height] = [Person].[Height],
	[Patient].[Weight] = [Person].[Weight],
	[Patient].[Ethnicity] = [Person].[Ethnicity]
FROM [Address] INNER JOIN [Person] ON [Person].[AddressKey]=[Address].[Key] 
INNER JOIN [Patient] ON [Patient].[PersonKey]=[Person].[Key];

08/09/2020 13:16:32: 
UPDATE [Patient]
SET [Patient].[ContactGivenName] = [Person].[GivenName],
	[Patient].[ContactFamilyName] = [Person].[FamilyName],
	[Patient].[ContactHomePhone] = [Address].[HomePhone],
	[Patient].[ContactMobilePhone] = [Address].[MobilePhone]
FROM [Person] INNER JOIN [Patient] ON [Patient].[ContactKey]=[Person].[Key]
INNER JOIN [Address] ON [Person].[AddressKey]=[Address].[Key];

08/09/2020 13:16:32: 
ALTER TABLE [Patient] DROP COLUMN [PersonKey];
ALTER TABLE [Patient] DROP COLUMN [ContactKey];

08/09/2020 13:16:32: 
DROP TABLE [Person];
DROP TABLE [Address];

08/09/2020 13:16:32: 
-- remove the not-specified row from the patient table
DELETE FROM [Patient] WHERE [Key]='{cfc1a86f-cec6-428e-9b1d-b5701806d693}';
08/09/2020 13:16:32: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMoveUserColumnsIntoStaffTable.sql

08/09/2020 13:16:32: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:32: 
------------------- MERGING THE USER TABLE COLUMNS INTO THE STAFFMEMBER TABLE
-- drop the roles table
ALTER TABLE [UsersInRoles] DROP CONSTRAINT FK_UsersInRoles_Roles;
DROP TABLE [Roles];

08/09/2020 13:16:32: 
-- add the columns from the user table into the staffmember table
ALTER TABLE [StaffMember] ADD [Username] NVARCHAR(255)
ALTER TABLE [StaffMember] ADD [Password] NVARCHAR(255)
ALTER TABLE [StaffMember] ADD [IsLockedOut] BIT CONSTRAINT  [DF_Staff_IsLockedOut] DEFAULT(0)
ALTER TABLE [StaffMember] ADD [UserGroupBits] BIGINT CONSTRAINT [DF_Staff_UserGroupBits] DEFAULT(0)
ALTER TABLE [StaffMember] ADD [IsWindowsUser] BIT CONSTRAINT [DF_Staff_IsWindowsUser] DEFAULT(0)
ALTER TABLE [StaffMember] ADD [IsApproved] BIT CONSTRAINT [DF_Staff_IsApproved] DEFAULT(1)
ALTER TABLE [StaffMember] ADD [IsInternal] BIT CONSTRAINT [DF_Staff_IsInternal] DEFAULT(0)

08/09/2020 13:16:32: 
-- transfer the customer defined user columns from the user table to the staffmember table
UPDATE [StaffMember]
SET [StaffMember].[Password] = [Users].[Password],
    [StaffMember].[Username] = [Users].[Username],
	[StaffMember].[IsLockedOut] = [Users].[IsLockedOut],
	[StaffMember].[UserGroupBits] = [Users].[UserGroupBits],
	[StaffMember].[IsWindowsUser] = [Users].[IsWindowsUser],
	[StaffMember].[IsApproved] = [Users].[IsApproved]
FROM [Users] INNER JOIN [StaffMember] ON [StaffMember].[UserKey]=[Users].[PKID]
WHERE [Users].[Username]<>'admin'

08/09/2020 13:16:33: 
-- update the special accounts passwords from the user table into the staffmember table
UPDATE [StaffMember] 
SET [StaffMember].[Password] = [Users].[Password]
FROM [Users] INNER JOIN [StaffMember] ON [StaffMember].[Username]=[Users].[Username];

08/09/2020 13:16:33: 
-- remove the not-specified row from the staff table
DELETE FROM [StaffMember] WHERE [Key]='{61467912-ECB5-4462-B841-0DA2760B9746}';

08/09/2020 13:16:33: 
-- remove the key relating the staff member table to the user table
ALTER TABLE [StaffMember] DROP COLUMN [UserKey]

08/09/2020 13:16:33: 
------------------- REMOVING THE USER TABLE
-- drop the users table
ALTER TABLE [Users] DROP CONSTRAINT [DF_Users_PKID]
DROP TABLE [Users] 
08/09/2020 13:16:33: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToRemoveAutogeneratedCases.sql

08/09/2020 13:16:33: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:33: 
------------------- REFER TEST RECORD DIRECTLY TO PATIENT RECORD
ALTER TABLE [Case] DROP CONSTRAINT DF_Case_Autogenerated;

08/09/2020 13:16:33: 
-- add a new column to the test table pointing directly at the patient record
ALTER TABLE [Test] ADD [PatientKey] UNIQUEIDENTIFIER NULL;

08/09/2020 13:16:33: 
ALTER TABLE [Test] ALTER COLUMN [CaseKey] UNIQUEIDENTIFIER NULL;

08/09/2020 13:16:33: 
-- populate this new column with the appropriate patient keys from the real and autogenerated case records
UPDATE [Test]
SET [Test].[PatientKey] = [Case].[PatientKey]
FROM [Case] INNER JOIN [Test] ON [Test].[CaseKey]=[Case].[Key];

08/09/2020 13:16:34: 
UPDATE [Test] SET [Test].[CaseKey]=NULL FROM [Test] INNER JOIN [Case] ON [Case].[Key]=[Test].[CaseKey] WHERE [Case].[Autogenerated]=1;

08/09/2020 13:16:36: 
DELETE FROM [Case] WHERE [Autogenerated]=1;

08/09/2020 13:16:39: 
ALTER TABLE [Test] ALTER COLUMN [PatientKey] UNIQUEIDENTIFIER NOT NULL;

08/09/2020 13:16:39: 
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_PatientKey 
	FOREIGN KEY ([PatientKey]) REFERENCES Patient([Key]);

08/09/2020 13:16:39: 
ALTER TABLE [Case] DROP COLUMN [Autogenerated];
08/09/2020 13:16:39: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToRemoveTestStaffMemberTable.sql

08/09/2020 13:16:39: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:39: 
------------------- MOVING TEST STAFFMEMBER REFERENCES TO THE TEST TABLE
-- create columns in the test table
ALTER TABLE [Test] ADD [HookupTechnicianKey] UNIQUEIDENTIFIER NULL;
ALTER TABLE [Test] ADD [DownloadTechnicianKey] UNIQUEIDENTIFIER NULL;
ALTER TABLE [Test] ADD [AnalysisTechnicianKey] UNIQUEIDENTIFIER NULL;
ALTER TABLE [Test] ADD [ResponsiblePhysicianKey] UNIQUEIDENTIFIER NULL;
ALTER TABLE [Test] ADD [ReferringPhysicianKey] UNIQUEIDENTIFIER NULL;
ALTER TABLE [Test] ADD [AttendingPhysicianKey] UNIQUEIDENTIFIER NULL;

08/09/2020 13:16:39: 
-- migrate the existing technician/physician data into the new columns
UPDATE [Test] 
	SET [Test].[HookupTechnicianKey] = [TestStaffMember].[StaffMemberKey] 
FROM [TestStaffMember] INNER JOIN [Test] ON [Test].[Key]=[TestStaffMember].[TestKey] WHERE [TestStaffMember].[TestRole]='{c3a23c1a-0fad-4cd0-a584-34b7c50f2340}';

08/09/2020 13:16:40: 
UPDATE [Test] 
	SET [Test].[DownloadTechnicianKey] = [TestStaffMember].[StaffMemberKey] 
FROM [TestStaffMember] INNER JOIN [Test] ON [Test].[Key]=[TestStaffMember].[TestKey] WHERE [TestStaffMember].[TestRole]='{0b1735bb-d9ce-485d-a5d8-42eccffda537}';

08/09/2020 13:16:41: 
UPDATE [Test] 
	SET [Test].[AnalysisTechnicianKey] = [TestStaffMember].[StaffMemberKey] 
FROM [TestStaffMember] INNER JOIN [Test] ON [Test].[Key]=[TestStaffMember].[TestKey] WHERE [TestStaffMember].[TestRole]='{8b512db3-ce0a-403d-a394-125126b709af}';

08/09/2020 13:16:41: 
UPDATE [Test] 
	SET [Test].[ResponsiblePhysicianKey] = [TestStaffMember].[StaffMemberKey] 
FROM [TestStaffMember] INNER JOIN [Test] ON [Test].[Key]=[TestStaffMember].[TestKey] WHERE [TestStaffMember].[TestRole]='{5abb52f1-178b-4269-8ecf-9fd2a55c39cb}';

08/09/2020 13:16:41: 
UPDATE [Test] 
	SET [Test].[ReferringPhysicianKey] = [TestStaffMember].[StaffMemberKey] 
FROM [TestStaffMember] INNER JOIN [Test] ON [Test].[Key]=[TestStaffMember].[TestKey] WHERE [TestStaffMember].[TestRole]='{18bf5084-801c-4e85-afa3-54e43571acbd}';

08/09/2020 13:16:41: 
UPDATE [Test] 
	SET [Test].[AttendingPhysicianKey] = [TestStaffMember].[StaffMemberKey] 
FROM [TestStaffMember] INNER JOIN [Test] ON [Test].[Key]=[TestStaffMember].[TestKey] WHERE [TestStaffMember].[TestRole]='{5af8916f-3042-4518-aa58-afc813e2cdfe}';

08/09/2020 13:16:41: 
DROP TABLE [TestStaffMember];
08/09/2020 13:16:41: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceTestTypeGuidWithTinyInt.sql

08/09/2020 13:16:41: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:41: 
------------------- CHANGING THE TEST TYPE GUID INTO TEST KIND
ALTER TABLE [Test] ADD [TestKind] TINYINT NOT NULL CONSTRAINT DF_Test_TestKind DEFAULT 0;

08/09/2020 13:16:41: 
CREATE INDEX [IX_TestKind] ON [Test]([TestKind]) ON [PRIMARY]

08/09/2020 13:16:41: 
-- holter
UPDATE [Test] SET [Test].[TestKind]=1 WHERE [Test].[TestType]='{48dd5dd6-e3a1-44f7-a817-f234dd51469c}';
-- resting ECG
UPDATE [Test] SET [Test].[TestKind]=2 WHERE [Test].[TestType]='{e83f0b25-c829-45be-8b7a-76bee9e474d1}';
-- stress
UPDATE [Test] SET [Test].[TestKind]=3 WHERE [Test].[TestType]='{b3517b37-b27c-4eba-96a6-e4a824e5102f}';
-- blood pressure
UPDATE [Test] SET [Test].[TestKind]=4 WHERE [Test].[TestType]='{769c35e0-d937-41e1-93a6-3a20609df6ed}';
-- rhythm
UPDATE [Test] SET [Test].[TestKind]=5 WHERE [Test].[TestType]='{8d91ed45-c188-40da-8b57-adb22f69f86a}';
-- custom
UPDATE [Test] SET [Test].[TestKind]=6 WHERE [Test].[TestType]='{d069769a-59ca-47a7-9e8d-6d46a0903d95}';

08/09/2020 13:16:43: 
DROP INDEX IX_TestType ON [Test];
ALTER TABLE [Test] DROP COLUMN [TestType];

08/09/2020 13:16:43: 
------------------- CHANGING THE ORDER TEST TYPE GUID INTO TEST KIND
ALTER TABLE [Order] ADD [TestKind] TINYINT NOT NULL CONSTRAINT DF_Order_TestKind DEFAULT 0;

08/09/2020 13:16:43: 
-- holter
UPDATE [Order] SET [TestKind]=1 WHERE [TestType]='{48dd5dd6-e3a1-44f7-a817-f234dd51469c}';
-- resting ECG
UPDATE [Order] SET [TestKind]=2 WHERE [TestType]='{e83f0b25-c829-45be-8b7a-76bee9e474d1}';
-- stress
UPDATE [Order] SET [TestKind]=3 WHERE [TestType]='{b3517b37-b27c-4eba-96a6-e4a824e5102f}';
-- blood pressure
UPDATE [Order] SET [TestKind]=4 WHERE [TestType]='{769c35e0-d937-41e1-93a6-3a20609df6ed}';
-- rhythm
UPDATE [Order] SET [TestKind]=5 WHERE [TestType]='{8d91ed45-c188-40da-8b57-adb22f69f86a}';
-- custom
UPDATE [Order] SET [TestKind]=6 WHERE [TestType]='{d069769a-59ca-47a7-9e8d-6d46a0903d95}';

08/09/2020 13:16:43: 
ALTER TABLE [Order] DROP COLUMN [TestType];
08/09/2020 13:16:43: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceRecorderTypeGuidWithModel.sql

08/09/2020 13:16:43: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:43: 
------------------- CHANGING THE RECORDER TYPE GUID INTO RECORDER MODEL
ALTER TABLE [Test] ADD [RecorderModel] NVARCHAR(30) NULL;

08/09/2020 13:16:43: 
UPDATE [Test] SET [RecorderModel]='' WHERE [RecorderType]=           '{00000000-0000-0000-0000-000000000000}';
UPDATE [Test] SET [RecorderModel]='Lifecard CF' WHERE [RecorderType]='{3b841fc9-d4c2-4ef8-b511-598eeffbdc16}';
UPDATE [Test] SET [RecorderModel]='Aria' WHERE [RecorderType]=                '{34817b83-81da-42bc-8bec-5f3c99a01fc5}';
UPDATE [Test] SET [RecorderModel]='Pathfinder Tape Deck' WHERE [RecorderType]='{c7068b3b-7f21-46ac-82fb-a2427e52808b}';
UPDATE [Test] SET [RecorderModel]='Impresario Tape Deck' WHERE [RecorderType]='{cef45e74-6661-454b-a287-07516f7b32d1}';
UPDATE [Test] SET [RecorderModel]='Lifecard' WHERE [RecorderType]=            '{99bbe57f-f856-47c8-807b-d21c82e5bf7c}';
UPDATE [Test] SET [RecorderModel]='CD12 Serial' WHERE [RecorderType]=         '{08814791-d355-4fb9-ab83-ad9327143ece}';
UPDATE [Test] SET [RecorderModel]='CD12 USB' WHERE [RecorderType]=            '{48de7978-13c2-4fad-8687-756cffa7e7df}';
UPDATE [Test] SET [RecorderModel]='CH2000' WHERE [RecorderType]=              '{adbd8006-5300-4191-a40b-7af740b66b17}';
UPDATE [Test] SET [RecorderModel]='Voyager' WHERE [RecorderType]=             '{db84c50e-f463-42d1-9647-3de4391c99e4}';
UPDATE [Test] SET [RecorderModel]='Flashcorder' WHERE [RecorderType]=         '{d069769a-59ca-47a7-9e8d-6d46a0903d95}';
UPDATE [Test] SET [RecorderModel]='P6' WHERE [RecorderType]=                  '{7ee046c9-0d65-4c4c-af97-95330bcdde64}';
UPDATE [Test] SET [RecorderModel]='TrackerNIBP' WHERE [RecorderType]=         '{6ba10b68-7f22-4980-b1f1-1d9a2b3f75d4}';
UPDATE [Test] SET [RecorderModel]='TrackerNIBP2' WHERE [RecorderType]=        '{10f4ca50-cd36-441e-b0e2-7cda707bb7e3}';
UPDATE [Test] SET [RecorderModel]='Spacelabs ABP' WHERE [RecorderType]=       '{3e01e63e-83d1-4ffb-a584-e7aa5bcfc14a}';
UPDATE [Test] SET [RecorderModel]='CardioCollect' WHERE [RecorderType]=       '{ab70c20c-ddc4-4482-8c73-83693283453e}';
UPDATE [Test] SET [RecorderModel]='EVO' WHERE [RecorderType]=                 '{f541c532-fd6b-41e8-b931-a27e78d970ac}';
UPDATE [Test] SET [RecorderModel]='Engineering Solutions' WHERE [RecorderType]='{af9c3181-2c45-43d3-8366-b9285373b4f5}';

08/09/2020 13:16:45: 
ALTER TABLE [Test] DROP COLUMN [RecorderType];
ALTER TABLE [RecorderDetails] DROP COLUMN [RecorderType];
08/09/2020 13:16:45: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceCaseTypeGuidWithTinyInt.sql

08/09/2020 13:16:45: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:45: 
------------------- CHANGE THE CASE TYPE GUID INTO CASE KIND TINYINT
ALTER TABLE [Case] ADD [CaseKind] TINYINT NULL;

08/09/2020 13:16:45: 
UPDATE [Case] SET [CaseKind]=0 WHERE [CaseType]='{00000000-0000-0000-0000-000000000000}';
UPDATE [Case] SET [CaseKind]=1 WHERE [CaseType]='{ba7fb7a9-9030-4d96-9411-883fde285ca6}';
UPDATE [Case] SET [CaseKind]=2 WHERE [CaseType]='{c14fa7c4-9fd8-462b-8dfe-bef9ebcc6ed7}';

08/09/2020 13:16:45: 
ALTER TABLE [Case] ALTER COLUMN [CaseKind] TINYINT NOT NULL;

08/09/2020 13:16:45: 
ALTER TABLE [Case] DROP COLUMN [CaseType];
08/09/2020 13:16:45: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceReportTypeGuidWithTinyInt.sql

08/09/2020 13:16:45: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:45: 
------------------- CHANGE THE REPORT TYPE GUID INTO REPORT KIND TINYINT
ALTER TABLE [Report] ADD [ReportKind] TINYINT NOT NULL CONSTRAINT DF_Report_ReportKind DEFAULT 0;
ALTER TABLE [Report] ADD [IsOnDemand] BIT NOT NULL CONSTRAINT DF_Report_IsOnDemand DEFAULT 0;

08/09/2020 13:16:45: 
-- none
UPDATE [Report] SET ReportKind=0 WHERE [ReportType]='{00000000-0000-0000-0000-000000000000}';
-- lifescreen pdf report
UPDATE [Report] SET ReportKind=1 WHERE [ReportType]='{50eedc1d-7963-4fe8-b9bf-8e02cd412e97}';
-- pathfinder pdf report
UPDATE [Report] SET ReportKind=2 WHERE [ReportType]='{56b7ab80-aac0-44ca-950d-8121250729b3}';
-- ness resting pdf report
UPDATE [Report] SET ReportKind=3 WHERE [ReportType]='{11bff20d-8990-4383-a9fd-a1293cdcbfcb}';
-- ch2000 stress pdf report
UPDATE [Report] SET ReportKind=4 WHERE [ReportType]='{7fa2722a-7d20-4ef6-b278-c4b63d97d584}';
-- unspecified pdf report
UPDATE [Report] SET ReportKind=5 WHERE [ReportType]='{476a2798-8d35-4e8a-8887-fcd2bb805ca2}';
-- impresario pdf report
UPDATE [Report] SET ReportKind=6 WHERE [ReportType]='{98dfd19e-ae1f-4b0b-b290-9bd98e71d199}';
-- impresario short report
UPDATE [Report] SET ReportKind=7 WHERE [ReportType]='{4655c5df-fd65-41d7-95ca-5ea39534495b}';
-- resting ecg pdf report
UPDATE [Report] SET ReportKind=8 WHERE [ReportType]='{edeb5770-255e-4d52-9b8a-9c94c1b6b458}';
-- on-demand (virtual) resting ecg report
UPDATE [Report] SET ReportKind=9 WHERE [ReportType]='{7b8e88dc-c7f8-427b-9761-f251824cb148}';
-- on-demand (virtual) rhythm ecg report
UPDATE [Report] SET ReportKind=10 WHERE [ReportType]='{11f85a63-fd4e-4616-9db0-34687893d134}';
-- stress pdf report
UPDATE [Report] SET ReportKind=11 WHERE [ReportType]='{b1a1b668-2d21-4b3c-ad1c-c57dac543fd5}';
-- ABP pdf report
UPDATE [Report] SET ReportKind=12 WHERE [ReportType]='{69784d10-7bf3-4a53-8e0d-70e5222d80d0}';
-- rhythm pdf report
UPDATE [Report] SET ReportKind=13 WHERE [ReportType]='{64b3b226-c001-4b7c-8263-321a4ea68712}';
-- torridon pdf report
UPDATE [Report] SET ReportKind=14 WHERE [ReportType]='{5f6f8987-5c95-47e2-832c-af43aea75672}';
-- on-demand (virtual) ABP report
UPDATE [Report] SET ReportKind=15 WHERE [ReportType]='{8ec174de-118b-4d22-b6b7-66f564721af3}';

08/09/2020 13:16:47: 
-- indicate which reports are generated on-demand and which are just static pdfs
UPDATE [Report] SET IsOnDemand=1 WHERE [ReportKind] IN (9,10,15);

08/09/2020 13:16:47: 
ALTER TABLE [Report] DROP COLUMN [ReportType];
08/09/2020 13:16:47: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceReportFormatGuidWithTinyInt.sql

08/09/2020 13:16:47: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:47: 
------------------- CHANGE THE REPORT FORMAT GUID INTO REPORT FORMAT KIND TINYINT
ALTER TABLE [Report] ADD [ReportFormatKind] TINYINT NOT NULL CONSTRAINT DF_Report_ReportFormatKind DEFAULT 0;

08/09/2020 13:16:47: 
-- none
UPDATE [Report] SET ReportFormatKind=0 WHERE [ReportFormat]='{00000000-0000-0000-0000-000000000000}';
-- pathfinder format HRV
UPDATE [Report] SET ReportFormatKind=1 WHERE [ReportFormat]='{80544ce1-10c2-4571-afb1-9c5ed31abcef}';
-- pathfinder format ST
UPDATE [Report] SET ReportFormatKind=2 WHERE [ReportFormat]='{dd18f58e-db18-4f9f-9c3a-4381f5bbfe2a}';
-- pathfinder format1
UPDATE [Report] SET ReportFormatKind=3 WHERE [ReportFormat]='{7fd6c4cb-a6f7-4803-945e-f4b2d692075a}';
-- pathfinder format2
UPDATE [Report] SET ReportFormatKind=4 WHERE [ReportFormat]='{5cf6aabb-b2b6-444e-9590-cb4db988f953}';
-- pathfinder format3
UPDATE [Report] SET ReportFormatKind=5 WHERE [ReportFormat]='{ec1d5fcf-1d5e-449f-8862-6850075a6729}';
-- pathfinder format4
UPDATE [Report] SET ReportFormatKind=6 WHERE [ReportFormat]='{63971bf4-a8e5-41e0-b6e1-68cb9ce0eca7}';
-- pathfinder format5
UPDATE [Report] SET ReportFormatKind=7 WHERE [ReportFormat]='{d78692b8-f4f4-42be-b547-8d226d25c3ff}';
-- pathfinder format6
UPDATE [Report] SET ReportFormatKind=8 WHERE [ReportFormat]='{f4330437-c89a-4fec-ae01-7b17d2681a28}';
-- pathfinder format7
UPDATE [Report] SET ReportFormatKind=9 WHERE [ReportFormat]='{7fe1c6e6-56fd-4e6b-9f3d-7acf6782afef}';
-- pathfinder format8
UPDATE [Report] SET ReportFormatKind=10 WHERE [ReportFormat]='{047dfad7-b08a-40b4-babd-95349607b53e}';
-- pathfinder format9
UPDATE [Report] SET ReportFormatKind=11 WHERE [ReportFormat]='{e86ff2fa-40bc-4162-a47b-ffd4b34424a8}';
-- pathfinder format10
UPDATE [Report] SET ReportFormatKind=12 WHERE [ReportFormat]='{77de4a97-a89a-4136-9d97-c42e515b63cb}';
-- pathfinder format11
UPDATE [Report] SET ReportFormatKind=13 WHERE [ReportFormat]='{72b93cee-c322-46c0-a781-a4db70fb21d7}';
-- pathfinder format12
UPDATE [Report] SET ReportFormatKind=14 WHERE [ReportFormat]='{66569e1e-404e-4d4a-96dc-3709e37ca23a}';
-- pathfinder format13
UPDATE [Report] SET ReportFormatKind=15 WHERE [ReportFormat]='{8dfc1c20-ff3e-4ce2-b0aa-36f287a48cec}';

08/09/2020 13:16:48: 
-- pathfinder format14
UPDATE [Report] SET ReportFormatKind=16 WHERE [ReportFormat]='{84228d81-fd8e-4513-8a8f-fa33150e76ef}';
-- pathfinder format15
UPDATE [Report] SET ReportFormatKind=17 WHERE [ReportFormat]='{f8654cee-88eb-4435-ab57-f1162a429a63}';
-- lifescreen format
UPDATE [Report] SET ReportFormatKind=18 WHERE [ReportFormat]='{3c78b87d-e54a-4446-8d6f-292686c86b38}';
-- impresario non-paced format
UPDATE [Report] SET ReportFormatKind=19 WHERE [ReportFormat]='{6dacf585-c4a6-47ed-8edf-0ec4764761ec}';
-- impresario non-paced 2 page format
UPDATE [Report] SET ReportFormatKind=20 WHERE [ReportFormat]='{c034d710-192a-4de8-9c0c-2c5dc7e88daf}';
-- impresario non-paced with ST format
UPDATE [Report] SET ReportFormatKind=21 WHERE [ReportFormat]='{75caf50c-2535-4d35-9714-1c5068004c6e}';
-- impresario non-paced with ST 2 page format
UPDATE [Report] SET ReportFormatKind=22 WHERE [ReportFormat]='{b54267aa-82bf-4c74-9cc5-a06e1ee1a325}';
-- impresario paced format
UPDATE [Report] SET ReportFormatKind=23 WHERE [ReportFormat]='{5f8bd0cd-8215-4f62-ac26-cd82b096a467}';
-- impresario paced format with extra page format
UPDATE [Report] SET ReportFormatKind=24 WHERE [ReportFormat]='{31042ee0-cbfd-4871-bad9-fa9d9fd57e66}';
-- impresario report with no summary page format
UPDATE [Report] SET ReportFormatKind=25 WHERE [ReportFormat]='{6E414162-A4E2-47DB-A7A3-94D2B9EB79A4}';
-- CD12 stress ecg format
UPDATE [Report] SET ReportFormatKind=26 WHERE [ReportFormat]='{83b85649-1a08-4004-8a51-1c7d5b9ba9ce}';
-- ABPM format (legacy ness)
UPDATE [Report] SET ReportFormatKind=27 WHERE [ReportFormat]='{ade736ed-cf4b-4634-a74e-3b328e64e843}';
-- unknown format (set to same as 'none')
UPDATE [Report] SET ReportFormatKind=28 WHERE [ReportFormat]='{beede235-f4c8-4439-b6b4-d463d5f3f2fe}';
-- pathfinder sl format
UPDATE [Report] SET ReportFormatKind=29 WHERE [ReportFormat]='{b7ed3a4d-1fe3-444e-82c5-ff7d3b5cfd90}';

08/09/2020 13:16:49: 
ALTER TABLE [Report] DROP COLUMN [ReportFormat];
08/09/2020 13:16:49: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMoveOrderColumnsIntoTestTable.sql

08/09/2020 13:16:50: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:50: 
------------------- MERGE THE ORDER TABLE COLUMNS INTO THE TEST TABLE
DROP INDEX [IX_TestOrderKey] ON [Test];
ALTER TABLE [Test] DROP CONSTRAINT FK_Test_Order;

08/09/2020 13:16:50: 
ALTER TABLE [Test] ADD [OrderID] [nvarchar] (50) NULL;
ALTER TABLE [Test] ADD [OrderResponseID] [uniqueidentifier] NULL;
ALTER TABLE [Test] ADD [ProcedureID] [nvarchar] (100) NULL;
ALTER TABLE [Test] ADD [RequestedDateTime] [datetime] NULL;
ALTER TABLE [Test] ADD [Source] [nvarchar] (100) NULL;
ALTER TABLE [Test] ADD [OrderingPhysician] [nvarchar] (128) NULL;
ALTER TABLE [Test] ADD [OrderStatus] [int] NOT NULL DEFAULT (0);
ALTER TABLE [Test] ADD [OrderComments] [ntext] NULL;

08/09/2020 13:16:50: 
UPDATE [Test]
SET [Test].[OrderID] = [Order].[OrderID],
    [Test].[OrderResponseID] = [Order].[OrderResponseID],
	[Test].[RequestedDateTime] = [Order].[RequestedDateTime],
	[Test].[Source] = [Order].[Source],
	[Test].[OrderingPhysician] = [Order].[OrderingPhysician],
	[Test].[OrderStatus] = [Order].[Status],
	[Test].[ProcedureID] = [Order].[ProcedureID],
    [Test].[OrderComments] = [Order].[Comments]
FROM [Order] INNER JOIN [Test] ON [Test].[OrderKey]=[Order].[Key];

08/09/2020 13:16:50: 
ALTER TABLE [Test] DROP COLUMN [OrderKey];
DROP TABLE [Order];
08/09/2020 13:16:50: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceStaffMemberTypeGuidWithTinyInt.sql

08/09/2020 13:16:50: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:50: 
------------------- MOVING TO THE NEW SECURITY MODEL
DROP TABLE [UsersInRoles];
ALTER TABLE [StaffMember] ADD [StaffRoleKinds] INT NOT NULL CONSTRAINT DF_StaffMember_StaffRoleKinds DEFAULT(0);

08/09/2020 13:16:50: 
-- no staff roles
UPDATE [StaffMember] SET [StaffRoleKinds]=0 WHERE [StaffMemberType]='{00000000-0000-0000-0000-000000000000}';
-- admin
UPDATE [StaffMember] SET [StaffRoleKinds]=2 WHERE [StaffMemberType]='{99924551-bd73-43b9-818d-0dff62946ef7}';
-- nurse
UPDATE [StaffMember] SET [StaffRoleKinds]=4 WHERE [StaffMemberType]='{1bb9e4b5-d5ea-458f-b08f-7a2e25a9ef9e}';
-- physician
UPDATE [StaffMember] SET [StaffRoleKinds]=8 WHERE [StaffMemberType]='{067c7f24-d6e4-4c1d-bd01-f59d7c62bdfd}';
-- technician
UPDATE [StaffMember] SET [StaffRoleKinds]=16 WHERE [StaffMemberType]='{e78777d7-a41f-4b89-bcfa-71710008d497}';

08/09/2020 13:16:50: 
ALTER TABLE [StaffMember] DROP COLUMN [StaffMemberType];
08/09/2020 13:16:50: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToSplitClinicalDataTableIntoRecordingAndAnalysisTables.sql

08/09/2020 13:16:50: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:50: 
DROP INDEX [IX_ClinicalDataTestKey] ON [ClinicalData];
DROP INDEX [IX_ClinicalDataDataPointer] ON [ClinicalData];

08/09/2020 13:16:50: 
------------------ MOVE RECORDING CLINICAL DATA RECORDS TO THE NEW RECORDING TABLE
-- create the new recording table
CREATE TABLE [Recording](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_Recording_Key]  DEFAULT (newid()),
	[FileStoreGroupKey] [uniqueidentifier] NOT NULL,
	[RecordingKind] [tinyint] NOT NULL,
	[CreationDate] [datetime] NOT NULL,
	[Comments] [ntext] NULL,
	[AdditionalData] [ntext] NULL,
 	[CreatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Recording_CreatedDateTime] DEFAULT getutcdate(),
	[UpdatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Recording_UpdatedDateTime] DEFAULT getutcdate(),
CONSTRAINT [PK_Recording] PRIMARY KEY CLUSTERED
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:16:50: 
CREATE INDEX [IX_RecordingFileStoreGroupKey] ON [Recording]([FileStoreGroupKey]) ON [PRIMARY]

08/09/2020 13:16:50: 
-- add a foreign key in the test table to point to the recording record (there are zero or one recordings in a test)
ALTER TABLE [Test] ADD [RecordingKey] [uniqueidentifier] NULL;

08/09/2020 13:16:50: 
-- set the recording key to point to the "future" recording record
UPDATE [Test] SET [RecordingKey]=[ClinicalData].[Key] FROM [Test] INNER JOIN [ClinicalData] ON [Test].[Key]=[ClinicalData].[TestKey]
Where [ClinicalData].[Category] != '{a1056bd3-91da-4824-be68-1d83d0229fa5}';

08/09/2020 13:16:52: 
-- migrate the recordings over onto the new recording table
INSERT INTO [Recording]
	([Key],[FileStoreGroupKey],[CreationDate],[Comments],[AdditionalData],[CreatedDateTime],[UpdatedDateTime],[RecordingKind])
SELECT
	[ClinicalData].[Key],[ClinicalData].[DataPointer],[ClinicalData].[CreationDate],
	[ClinicalData].[Comments],[ClinicalData].[AdditionalData],[ClinicalData].[CreatedDateTime],[ClinicalData].[UpdatedDateTime],
	CASE [ClinicalData].[ClinicalDataType]
		WHEN '{0b8d6a43-af93-47b1-97b0-db608f4438fb}' THEN 1 -- lifecard cf
		WHEN '{8f86916a-961d-4b97-8608-7e73c537e848}' THEN 2 -- lifecard 12
		WHEN '{5a84bcdf-adb4-4d5f-8ca9-cc963416e70f}' THEN 3 -- aria
		WHEN '{fd325313-0a50-4ba2-92ce-fe5ab524f2c3}' THEN 4 -- pathfinder tape deck
		WHEN '{0c81a0f6-02b5-43d7-8ba2-1ba491e19cb4}' THEN 5 -- impresario tape deck
		WHEN '{4f492d15-0581-4e9f-ad1b-1fd1cd58be70}' THEN 6 -- lifecard
		WHEN '{7c966ab2-d370-4335-ac6c-be00b5e66e1c}' THEN 6 -- lifecard
		WHEN '{8fdecc06-27cc-4088-93e7-a79bc1ccbea6}' THEN 7 -- cd12 resting
		WHEN '{e88263f3-c042-439a-b1d2-8a31a02f494d}' THEN 8 -- cd12 rhythm
		WHEN '{4cf6d83f-6917-43ad-9b7f-348074e792cf}' THEN 9 -- cd12 stress
		WHEN '{e1ac6e61-856a-4f5a-b59c-80c1763155a0}' THEN 10 -- voyager
		WHEN '{df218d97-2338-4591-ba4d-743f0b6e9f9c}' THEN 11 -- evo
		WHEN '{30aff068-5f97-4910-8d05-9e5507bb7808}' THEN 12 -- abp recording
		WHEN '{1205505f-d21b-40ec-82b1-43fc42a94856}' THEN 13 -- cardiocollect
		WHEN '{90844e3c-c75d-40c6-9fec-578f82000871}' THEN 14 -- 3rd party ecg
		ELSE 0   -- oh dear!!
	END
FROM [ClinicalData]
WHERE
--                                 HolterEcg,RestingEcg,RhythmEcg,StressEcg,BloodPressure
	[ClinicalData].[Category] IN ('{cea17541-0027-4dc8-bc87-20d09fb01bc0}','{e228936e-9a24-48dc-ac7a-7e957d441a81}','{7b545af4-cc39-40c7-806a-9332cf2e5998}',
	                              '{e415029e-f992-4c37-be8b-aeaafc9989de}','{cb74d149-710c-40b0-b671-bb771bb1c977}');

08/09/2020 13:16:55: 
-- ??????????? TODO: GS 20th Nov 2012 - decide whether to delete recordings with RecordingKind of none and associated filedata and files in filestore
UPDATE Recording
SET Comments = 'Unable to resolve Recording Kind during migration and consequently report has been set to None'
WHERE RecordingKind = 0
-- now add the foreign key constraint to the test table
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_RecordingKey 
	FOREIGN KEY ([RecordingKey]) REFERENCES Recording([Key]);

08/09/2020 13:16:56: 
------------------ MOVE ANALYSIS CLINICAL DATA RECORDS TO THE NEW ANALYSIS TABLE
-- create the new recording table
CREATE TABLE [Analysis](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_Analysis_Key]  DEFAULT (newid()),
	[TestKey] [uniqueidentifier] NOT NULL,
	[FileStoreGroupKey] [uniqueidentifier] NOT NULL,
	[AnalysisKind] [tinyint] NOT NULL,
	[CreationDate] [datetime] NOT NULL,
	[AdditionalData] [ntext] NULL,
 	[CreatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Analysis_CreatedDateTime] DEFAULT getutcdate(),
	[UpdatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Analysis_UpdatedDateTime] DEFAULT getutcdate(),
CONSTRAINT [PK_Analysis] PRIMARY KEY CLUSTERED
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:16:56: 
CREATE INDEX [IX_AnalysisTestKey] ON [Analysis]([TestKey]) ON [PRIMARY]

08/09/2020 13:16:56: 
CREATE INDEX [IX_AnalysisFileStoreGroupKey] ON [Analysis]([FileStoreGroupKey]) ON [PRIMARY]

08/09/2020 13:16:56: 
-- migrate the recordings over onto the new recording table
INSERT INTO [Analysis]
	([Key],[TestKey],[FileStoreGroupKey],[CreationDate],[AdditionalData],[CreatedDateTime],[UpdatedDateTime],[AnalysisKind])
SELECT
	[ClinicalData].[Key],[ClinicalData].[TestKey],[ClinicalData].[DataPointer],[ClinicalData].[CreationDate],
	[ClinicalData].[AdditionalData],[ClinicalData].[CreatedDateTime],[ClinicalData].[UpdatedDateTime],
	CASE [ClinicalData].[ClinicalDataType]
		WHEN '{41885aa0-af6a-4bac-9d8b-09e566ced2d1}' THEN 1 -- pathfinder analysis
		WHEN '{53f3eb05-ee98-486d-a875-2d9967139140}' THEN 2 -- pathfinder formatted report 
		WHEN '{7e6d651a-adfc-4525-b12c-b5890bd3a6a8}' THEN 3 -- lifescreen analysis
		WHEN '{03ccc588-6ac9-4a60-884f-eb086d1be7fd}' THEN 4 -- lifescreen formatted report
		WHEN '{a087f4ae-60eb-48e6-8acd-639c42d128e7}' THEN 5 -- impresario analysis
		WHEN '{925db481-12ac-4f27-a9c8-084da12afe42}' THEN 6 -- pathfinder sl analysis
		ELSE 0 -- oh dear!!
	END
FROM [ClinicalData]
WHERE
--                              StoredHolterAnalysis
	[ClinicalData].[Category] = '{a1056bd3-91da-4824-be68-1d83d0229fa5}';

08/09/2020 13:16:56: 
-- ??????????? TODO: GS 20th Nov 2012 - decide whether to delete analysis with AnalysisKind of none and associated filedata and files in filestore
------------------ REMOVE THE OLD CLINICAL DATA TABLE
DROP TABLE [ClinicalData];
08/09/2020 13:16:56: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToDropUnusedColumnFromFileTable.sql

08/09/2020 13:16:56: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:56: 
------------------ REMOVE UNUSED COLUMN IN FILE TABLE
ALTER TABLE [File] DROP COLUMN [CompressedSize];
08/09/2020 13:16:56: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToRestructureAuditTrailPart1.sql

08/09/2020 13:16:56: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
------------------ REMOVE UNUSED COLUMNS FROM THE AUDIT TRAIL TABLE AND FIRST HALF OF MAKING AUDIT TRAIL SEARCHABLE
USE [LomondAuditData];

08/09/2020 13:16:56: 
DROP INDEX [IX_AuditTrailObjectId] ON [AuditTrail];

08/09/2020 13:16:56: 
ALTER TABLE [AuditTrail] DROP COLUMN [ObjectId];
ALTER TABLE [AuditTrail] DROP COLUMN [SecondObjectId];
ALTER TABLE [AuditTrail] DROP COLUMN [ThirdObjectId];

08/09/2020 13:16:56: 
-- create a column to hold the event description (see C# class UpdateDatabaseVersion15to16.cs replaceAuditEventIdsWithText for 2nd half)
ALTER TABLE [AuditTrail] ADD [Event] NVARCHAR(256) NOT NULL CONSTRAINT [DF_AuditTrail_Event] DEFAULT('');
-- ip address used to be combined into the description column (now it has a column of its own)
ALTER TABLE [AuditTrail] ADD [IpAddress] NVARCHAR(40) NULL;
08/09/2020 13:16:56: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToCreateAuditTrailPart2AndCreateAuditInternal.sql

08/09/2020 13:16:56: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
------------------ Increase AuditTrail.Description field to Max and create new table to store additional audit internal actions
USE [LomondAuditData];

08/09/2020 13:16:56: 
-- increase size of AuditTrail Table Description Field to NVARCHAR(MAX)
ALTER TABLE [AuditTrail] ALTER COLUMN [Description] NVARCHAR(MAX);
ALTER TABLE [AuditTrail] ADD [SessionKey] uniqueidentifier NULL;

08/09/2020 13:16:59: 
-- Create new Audit Internal table for logging internal auditing actins
CREATE TABLE [dbo].[AuditInternal](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[InsertDate] [datetime] NOT NULL,
	[SessionKey] uniqueidentifier NULL,
	[Description] [nvarchar](max) NULL,
	[Event] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_AuditInternal] PRIMARY KEY CLUSTERED 
(
	[Key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

08/09/2020 13:16:59: 
ALTER TABLE [dbo].[AuditInternal] ADD  CONSTRAINT [DF_AuditInternal_Key]  DEFAULT (newsequentialid()) FOR [Key]

08/09/2020 13:16:59: 
ALTER TABLE [dbo].[AuditInternal] ADD  CONSTRAINT [DF_AuditInternal_InsertDate]  DEFAULT (getutcdate()) FOR [InsertDate]

08/09/2020 13:16:59: 
ALTER TABLE [dbo].[AuditInternal] ADD  CONSTRAINT [DF_AuditInternal_Event]  DEFAULT ('') FOR [Event]

08/09/2020 13:16:59: 
CREATE NONCLUSTERED INDEX [IX_AuditInternalInsertDate] ON [dbo].[AuditInternal]
(
	[InsertDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 13:16:59: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridAuditAndInternalView')
	DROP VIEW [WebGridAuditAndInternalView]

08/09/2020 13:16:59: 
-- Create new Audit Internal View
CREATE VIEW [dbo].[WebGridAuditAndInternalView]
AS
SELECT		[Key]														AS [RefreshKey],
			[Key]														AS [Audit_Key],
			InsertDate													AS [Audit_Date],
			Username													AS [Audit_Username],
			SessionKey													As [Audit_SessionKey],
			[Event]														AS [Audit_Event],
			CASE 
				WHEN LEN([Description]) <= 255 THEN [Description] 
				ELSE LEFT([Description], 252) + '...'
			END															AS [Audit_Description],
			0															AS [Audit_IsInternal]
FROM		[dbo].[AuditTrail] 
UNION ALL 
SELECT		[Key]														AS [RefreshKey],
			[Key]														AS [Audit_Key],
			InsertDate													AS [Audit_Date],
			NULL														AS [Audit_Username],
			SessionKey													As [Audit_SessionKey],
			[Event]														AS [Audit_Event],
			CASE 
				WHEN LEN([Description]) <= 255 THEN [Description] 
				ELSE LEFT([Description], 252) + '...'
			END															AS [Audit_Description],
			1															AS [Audit_IsInternal]
FROM		[dbo].[AuditInternal]

08/09/2020 13:16:59: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AuditAndInternalView')
	DROP VIEW [AuditAndInternalView]

08/09/2020 13:16:59: 
-- Create new Audit Internal View
CREATE VIEW [dbo].[AuditAndInternalView]
AS
SELECT		[Key]														AS [Audit_Key],
			InsertDate													AS [Audit_Date],
			Username													AS [Audit_Username],
			SessionKey													As [Audit_SessionKey],
			[Event]														AS [Audit_Event],
			[Description]												AS [Audit_Description]
FROM		[dbo].[AuditTrail] 
UNION ALL 
SELECT		[Key]														AS [Audit_Key],
			InsertDate													AS [Audit_Date],
			NULL														AS [Audit_Username],
			SessionKey													As [Audit_SessionKey],
			[Event]														AS [Audit_Event],
			[Description]												AS [Audit_Description]
FROM		[dbo].[AuditInternal]
08/09/2020 13:16:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddFilterTables.sql

08/09/2020 13:16:59: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:59: 
------------------ ALTER THE USERGROUP TABLE TO NO LONGER USE BITFIELDS AND RENAME TO ROLE TABLE
DELETE FROM [UserGroup];

08/09/2020 13:16:59: 
ALTER TABLE [UserGroup] DROP CONSTRAINT DF_UserGroup_Editable;
ALTER TABLE [UserGroup] DROP COLUMN [Editable];

08/09/2020 13:16:59: 
ALTER TABLE [UserGroup] DROP CONSTRAINT PK_UserGroup;
ALTER TABLE [UserGroup] DROP COLUMN [BitField];

08/09/2020 13:16:59: 
sp_RENAME 'UserGroup', 'Role' 

08/09/2020 13:16:59: 
ALTER TABLE [Role] ADD [Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_Role_Key]  DEFAULT (newid());
ALTER TABLE [Role] ADD [SignPermission] bit NOT NULL CONSTRAINT [DF_Role_SignPermission] DEFAULT (1);
ALTER TABLE [Role] ADD [DeletePermission] bit NOT NULL CONSTRAINT [DF_Role_DeletePermission] DEFAULT (1);
ALTER TABLE [Role] ADD [DeleteIfEmptyPermission] bit NOT NULL CONSTRAINT [DF_Role_DeleteIfEmptyPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [ReviewAndPrintPermission] bit NOT NULL CONSTRAINT [DF_Role_ReviewAndPrintPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [EditReportCommentsPermission] bit NOT NULL CONSTRAINT [DF_Role_EditReportCommentsPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [DownloadRecordingPermission] bit NOT NULL CONSTRAINT [DF_Role_DownloadRecordingPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [ConfigureRecorderPermission] bit NOT NULL CONSTRAINT [DF_Role_ConfigureRecorderPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [AddPatientPermission] bit NOT NULL CONSTRAINT [DF_Role_AddPatientPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [EditPatientPermission] bit NOT NULL CONSTRAINT [DF_Role_EditPatientPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [AddCasePermission] bit NOT NULL CONSTRAINT [DF_Role_AddCasePermission] DEFAULT(1);
ALTER TABLE [Role] ADD [EditCasePermission] bit NOT NULL CONSTRAINT [DF_Role_EditCasePermission] DEFAULT(1);
ALTER TABLE [Role] ADD [SendToFacilityPermission] bit NOT NULL CONSTRAINT [DF_Role_SendToFacilityPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [ReturnReportToOriginatorPermission] bit NOT NULL CONSTRAINT [DF_Role_ReturnReportToOriginatorPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [AnalyseHolterPermission] bit NOT NULL CONSTRAINT [DF_Role_AnalyseHolterPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [EditTestDetailsPermission] bit NOT NULL CONSTRAINT [DF_Role_EditTestDetailsPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [MoveTestToPatientPermission] bit NOT NULL CONSTRAINT [DF_Role_MoveTestToPatientPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [ExportTestPermission] bit NOT NULL CONSTRAINT [DF_Role_ExportTestPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [ImportTestAndReportPermission] bit NOT NULL CONSTRAINT [DF_Role_ImportTestAndReportPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [CompleteTestPermission] bit NOT NULL CONSTRAINT [DF_Role_CompleteTestPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [ChangeOwnPasswordPermission] bit NOT NULL CONSTRAINT [DF_Role_ChangeOwnPasswordPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [AddEditStaffPermission] bit NOT NULL CONSTRAINT [DF_Role_AddEditStaffPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [AddEditFacilityPermission] bit NOT NULL CONSTRAINT [DF_Role_AddEditFacilityPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [CreateOrderPermission] bit NOT NULL CONSTRAINT [DF_Role_CreateOrderPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [PathfinderSlPermission] bit NOT NULL CONSTRAINT [DF_Role_PathfinderSlPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [PathfinderDigitalPermission] bit NOT NULL CONSTRAINT [DF_Role_PathfinderDigitalPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [LifescreenPermission] bit NOT NULL CONSTRAINT [DF_Role_LifescreenPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [CreateUnorderedTestPermission] bit NOT NULL CONSTRAINT [DF_Role_CreateUnorderedTestPermission] DEFAULT(1);
ALTER TABLE [Role] ADD [AdminPermission] bit NOT NULL CONSTRAINT [DF_Role_AdminPermission] DEFAULT (1);
ALTER TABLE [Role] ADD [PhysicianList] bit NOT NULL CONSTRAINT [DF_Role_PhysicianList] DEFAULT(0);
ALTER TABLE [Role] ADD [TechnicianList] bit NOT NULL CONSTRAINT [DF_Role_TechnicianList] DEFAULT(0);
ALTER TABLE [Role] ADD [CreatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Role_CreatedDateTime] DEFAULT getutcdate();
ALTER TABLE [Role] ADD [UpdatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Role_UpdatedDateTime] DEFAULT getutcdate();

08/09/2020 13:16:59: 
ALTER TABLE [Role] ADD CONSTRAINT PK_Role PRIMARY KEY ([Key]);

08/09/2020 13:16:59: 
------------------ REMOVE BITFIELD COLUMNS
ALTER TABLE [Patient] DROP COLUMN [UserGroupBits];

08/09/2020 13:16:59: 
ALTER TABLE [Test] DROP COLUMN [UserGroupBits];

08/09/2020 13:16:59: 
ALTER TABLE [StaffMember] DROP CONSTRAINT [DF_Staff_UserGroupBits];
ALTER TABLE [StaffMember] DROP COLUMN [UserGroupBits];

08/09/2020 13:16:59: 
-------------------- ADD NEW COLUMNS TO ROLE TABLE
ALTER TABLE [Role] ADD [IsPreInstalled] bit NOT NULL CONSTRAINT [DF_Role_IsPreInstalled] DEFAULT(0);
ALTER TABLE [Role] ADD [Description] nvarchar(512) NULL;
ALTER TABLE [Role] ADD [FilterByMyWard] bit NOT NULL DEFAULT(0);
ALTER TABLE [Role] ADD [FilterByMyOrganisation] bit NOT NULL DEFAULT(0);
ALTER TABLE [Role] ADD [FilterByMyFacility] bit NOT NULL DEFAULT(0);

08/09/2020 13:16:59: 
------------------- ADD KEY OF USER GROUP TO THE STAFF TABLE
ALTER TABLE [StaffMember] ADD [RoleKey] [uniqueidentifier] NULL
	CONSTRAINT [FK_Staff_RoleKey] FOREIGN KEY REFERENCES [Role]([Key]);

08/09/2020 13:16:59: 
------------------- ADD ADDITIONAL COLUMNS TO THE STAFF TABLE TO HELP REDUCE NUMBER OF FILTERS NEEDED
-- filters will be able to match on the current logged in user's values of these and other columns
ALTER TABLE [StaffMember] ADD [Department] nvarchar(64) NULL;
ALTER TABLE [StaffMember] ADD [Ward] nvarchar(64) NULL;

08/09/2020 13:16:59: 
------------------- ADD ADDITIONAL COLUMNS TO THE FACILITY TABLE TO HELP REDUCE NUMBER OF FILTERS NEEDED
-- staff records can optionally refer to a facility and hence to these columns
ALTER TABLE [Facility] ADD [Organisation] nvarchar(128) NULL;
08/09/2020 13:16:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddFacilityRdtVersionColumn.sql

08/09/2020 13:16:59: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:59: 
------------------- ADD COLUMN TO THE FACILITY TABLE
ALTER TABLE [Facility] ADD [RemoteDataTransferVersion] [int] NOT NULL DEFAULT (0);
08/09/2020 13:16:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAlterFacilityAbbreviationFieldSize.sql

08/09/2020 13:16:59: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:59: 
------------------- ADD Field size of Abbreviation field TO THE FACILITY TABLE
ALTER TABLE [Facility] ALTER Column [Abbreviation] NVARCHAR(12) NULL
08/09/2020 13:16:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToRenameAndAddConstraintsToColumns.sql

08/09/2020 13:16:59: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:16:59: 
------------------ RENAME COLUMNS IN RECORD IN USE TABLE
sp_RENAME 'RecordInUse.RecordKey', 'PatientKey', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'RecordInUse.Since', 'ExpiryTime', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'RecordInUse.ReferenceCount', 'SmartClientCount', 'COLUMN'

08/09/2020 13:16:59: 
ALTER TABLE [RecordInUse] ADD [WebSiteCount] BIT NOT NULL;

08/09/2020 13:16:59: 
-- ALTER TABLE [RecordInUse] ADD CONSTRAINT FK_RecordInUse_PatientKey
--	FOREIGN KEY ([PatientKey]) REFERENCES Patient([Key]);
--GO
------------------ RENAME COLUMNS IN PATIENT TABLE
sp_RENAME 'Patient.DefaultResponsiblePhysicianKey', 'ConsultantKey', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'Patient.DefaultReferringPhysicianKey' , 'ReferringPhysicianKey', 'COLUMN'

08/09/2020 13:16:59: 
-- DROP Patient Default Referring Physician foreign key
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FK_Patient_DefaultReferringPhysician]') AND parent_object_id = OBJECT_ID(N'[Patient]'))
BEGIN
	ALTER TABLE [Patient] DROP CONSTRAINT FK_Patient_DefaultReferringPhysician
END

08/09/2020 13:16:59: 
-- DROP Patient Default Responsible Physician foreign key
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FK_Patient_DefaultResponsiblePhysician]') AND parent_object_id = OBJECT_ID(N'[Patient]'))
BEGIN
	ALTER TABLE [Patient] DROP CONSTRAINT FK_Patient_DefaultResponsiblePhysician
END

08/09/2020 13:16:59: 
------------------ DROP THE "HIDDEN" COLUMNS FROM TABLES
ALTER TABLE [Patient] DROP CONSTRAINT DF_Patient_Deleted;
ALTER TABLE [Patient] DROP COLUMN [Deleted];

08/09/2020 13:16:59: 
ALTER TABLE [StaffMember] DROP CONSTRAINT DF_StaffMember_Deleted;
ALTER TABLE [StaffMember] DROP COLUMN [Deleted];

08/09/2020 13:16:59: 
------------------ CHANGE THE IP ADDRESS IN SESSION TABLE TO ALLOW NULLS
ALTER TABLE [Session] ALTER COLUMN [IPAddress] NVARCHAR(45) NULL;
ALTER TABLE [Session] ADD [LoginKind] INT NOT NULL;
ALTER TABLE [Session] DROP COLUMN [HasUserLicense]
ALTER TABLE [Session] ADD CONSTRAINT PK_Session_Key PRIMARY KEY ([Key]);

08/09/2020 13:16:59: 
------------------ CHANGE THE DEFAULT VALUE ON PRIMARY KEY FROM NEWID() TO NEWSEQUENTIALID()
ALTER TABLE [Session] DROP CONSTRAINT [DF_Session_Key];
ALTER TABLE [Session] ADD CONSTRAINT [DF_Session_Key] DEFAULT NEWSEQUENTIALID() FOR [Key];

08/09/2020 13:16:59: 
------------------ CHANGE THE RDT NVARCHAR COLUMNS IN FACILITY TABLE TO ALLOW NULLS
ALTER TABLE [Facility] ALTER COLUMN [Url] NVARCHAR(1024) NULL;
ALTER TABLE [Facility] ALTER COLUMN [Username] NVARCHAR(128) NULL;
ALTER TABLE [Facility] ALTER COLUMN [Password] NVARCHAR(128) NULL;

08/09/2020 13:16:59: 
------------------ DROP UNUSED COMMENTS COLUMN FROM SIGNATURE TABLE
ALTER TABLE [Signature] DROP COLUMN [Comments];

08/09/2020 13:16:59: 
------------------ ADD MISSING FOREIGN KEYS TO PATIENT TABLE
ALTER TABLE [Patient] ADD CONSTRAINT FK_Patient_ConsultantKey 
	FOREIGN KEY ([ConsultantKey]) REFERENCES StaffMember([Key]);

08/09/2020 13:16:59: 
ALTER TABLE [Patient] ADD CONSTRAINT FK_Patient_ReferringPhysicianKey 
	FOREIGN KEY ([ReferringPhysicianKey]) REFERENCES StaffMember([Key]);

08/09/2020 13:16:59: 
------------------- RENAME THE RECORDER DETAILS TABLE TO HOLTER TEST
sp_RENAME 'RecorderDetails', 'HolterTest'

08/09/2020 13:16:59: 
------------------- RENAME COLUMNS IN TEST TABLE
sp_RENAME 'Test.ResponsiblePhysicianKey', 'ConsultantKey', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'Test.AttendingPhysicianKey', 'StressSupervisorKey', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'Test.ProcedureID', 'OrderProcedureID', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'Test.Source', 'OrderSource', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'Test.RequestedDateTime', 'OrderRequestedDateTime', 'COLUMN'

08/09/2020 13:16:59: 
sp_RENAME 'Test.AdditionalData', 'RestingInfo', 'COLUMN'

08/09/2020 13:17:00: 
------------------- RENAME COLUMNS IN HOLTER TEST TABLE
sp_RENAME 'HolterTest.PatientID', 'PatientIdOnRecorder', 'COLUMN'

08/09/2020 13:17:00: 
sp_RENAME 'HolterTest.PatientName', 'PatientNameOnRecorder', 'COLUMN'

08/09/2020 13:17:00: 
sp_RENAME 'HolterTest.PacingEnabled', 'IsPacingEnabledOnRecorder', 'COLUMN'

08/09/2020 13:17:00: 
sp_RENAME 'HolterTest.ConfiguredDuration', 'ConfiguredDurationOnRecorderInHours', 'COLUMN'

08/09/2020 13:17:00: 
------------------- RENAME COLUMNS AND TABLE IN FILE TABLE
sp_RENAME 'File', 'FileStore'

08/09/2020 13:17:00: 
sp_RENAME 'FileStore.Group', 'GroupKey', 'COLUMN'

08/09/2020 13:17:00: 
------------------- RENAME COLUMNS IN REPORT TABLE
sp_RENAME 'Report.DataPointer', 'FileStoreGroupKey', 'COLUMN'

08/09/2020 13:17:00: 
------------------- RENAME COLUMNS IN FACILITY TABLE
sp_RENAME 'Facility.Verified', 'IsOnlyNameValid', 'COLUMN'

08/09/2020 13:17:00: 
-- change the sense of the true/false in the column to match the new meaning
UPDATE [Facility] SET [IsOnlyNameValid]=1-[IsOnlyNameValid]

08/09/2020 13:17:00: 
------------------- RENAME COLUMNS IN STAFF MEMBER TABLE
sp_RENAME 'StaffMember.Verified', 'IsOnlyFullNameValid', 'COLUMN'

08/09/2020 13:17:00: 
-- change the sense of the true/false in the column to match the new meaning
UPDATE [StaffMember] SET [IsOnlyFullNameValid]=1-[IsOnlyFullNameValid]

08/09/2020 13:17:00: 
------------------- ADD MISSING FOREIGN KEYS TO TEST TABLE
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_HookupTechnicianKey
	FOREIGN KEY ([HookupTechnicianKey]) REFERENCES StaffMember([Key]);
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_DownloadTechnicianKey 
	FOREIGN KEY ([DownloadTechnicianKey]) REFERENCES StaffMember([Key]);
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_AnalysisTechnicianKey 
	FOREIGN KEY ([AnalysisTechnicianKey]) REFERENCES StaffMember([Key]);

08/09/2020 13:17:01: 
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_ReferringPhysicianKey 
	FOREIGN KEY ([ReferringPhysicianKey]) REFERENCES StaffMember([Key]);

08/09/2020 13:17:01: 
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_ConsultantKey 
	FOREIGN KEY ([ConsultantKey]) REFERENCES StaffMember([Key]);

08/09/2020 13:17:01: 
ALTER TABLE [Test] ADD CONSTRAINT FK_Test_StressSupervisorKey 
	FOREIGN KEY ([StressSupervisorKey]) REFERENCES StaffMember([Key]);

08/09/2020 13:17:01: 
ALTER TABLE [Analysis] ADD CONSTRAINT FK_Analysis_TestKey
	FOREIGN KEY ([TestKey]) REFERENCES Test([Key]);

08/09/2020 13:17:01: 
--------------------- RENAME TABLES AND COLUMNS
sp_RENAME 'Signature', 'ReportSignature' 

08/09/2020 13:17:01: 
sp_RENAME 'AnalyserUserSetups', 'TorridonAnalyserUserSetup'

08/09/2020 13:17:01: 
sp_RENAME 'Test.Height', 'HeightInMetres', 'COLUMN'

08/09/2020 13:17:01: 
sp_RENAME 'Patient.Height', 'HeightInMetres', 'COLUMN'

08/09/2020 13:17:01: 
sp_RENAME 'Test.Weight', 'WeightInGrammes', 'COLUMN'

08/09/2020 13:17:01: 
sp_RENAME 'Patient.Weight', 'WeightInGrammes', 'COLUMN'

08/09/2020 13:17:01: 
sp_RENAME 'Patient.PatientNumberNamespace', 'Organisation', 'COLUMN'

08/09/2020 13:17:01: 
sp_RENAME 'Patient.PatientNumber', 'PatientId', 'COLUMN'

08/09/2020 13:17:01: 
---------------------- ADD CHECK CONSTRAINTS
ALTER TABLE [Patient] ADD CONSTRAINT CK_Patient_HeightInMetres
CHECK (HeightInMetres IS NULL OR (HeightInMetres>=0 AND HeightInMetres<=3));

08/09/2020 13:17:01: 
ALTER TABLE [Test] ADD CONSTRAINT CK_Test_HeightInMetres
CHECK (HeightInMetres IS NULL OR (HeightInMetres>=0 AND HeightInMetres<=3));

08/09/2020 13:17:01: 
ALTER TABLE [Test] ADD CONSTRAINT CK_Test_WeightInGrammes
CHECK (WeightInGrammes IS NULL OR (WeightInGrammes>=0 AND WeightInGrammes<=800000));

08/09/2020 13:17:02: 
ALTER TABLE [Patient] ADD CONSTRAINT CK_Patient_WeightInGrammes
CHECK (WeightInGrammes IS NULL OR (WeightInGrammes>=0 AND WeightInGrammes<=800000));

08/09/2020 13:17:02: 
------------------------------------------------------MODIFY FACILITY DEFAULT CONSTRAINT NAMES
declare @RemoteDataTransferVersion nvarchar(1000)
set @RemoteDataTransferVersion = ''
select @RemoteDataTransferVersion = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'RemoteDataTransferVersion'
if OBJECT_ID(@RemoteDataTransferVersion, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @RemoteDataTransferVersion)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_RemoteDataTransferVersion DEFAULT ((0)) FOR [RemoteDataTransferVersion]
end
------------------------------------------------------------------------------------------------------------
declare @CreatedForRemoteSite nvarchar(1000)
set @CreatedForRemoteSite = ''
select @CreatedForRemoteSite = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'CreatedForRemoteSite'
if OBJECT_ID(@CreatedForRemoteSite, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @CreatedForRemoteSite)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_CreatedForRemoteSite DEFAULT ((0)) FOR [CreatedForRemoteSite]
end
-----------------------------------------------------------------------------
declare @Password nvarchar(1000)
set @Password = ''
select @Password = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'Password'
if OBJECT_ID(@Password, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @Password)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_Password DEFAULT ('') FOR [Password]
end
-------------------------------------------------------------------------------
declare @RemoteDataTransferEnabled nvarchar(1000)
set @RemoteDataTransferEnabled = ''
select @RemoteDataTransferEnabled = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'RemoteDataTransferEnabled'
if OBJECT_ID(@RemoteDataTransferEnabled, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @RemoteDataTransferEnabled)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_RemoteDataTransferEnabled DEFAULT ((0)) FOR [RemoteDataTransferEnabled]
end
------------------------------------------------------------------
declare @Url nvarchar(1000)
set @Url = ''
select @Url = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'Url'
if OBJECT_ID(@Url, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @Url)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_Url DEFAULT ('') FOR [Url]
end
--------------------------------------------------------
declare @Username nvarchar(1000)
set @Username = ''
select @Username = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'Username'
if OBJECT_ID(@Username, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @Username)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_Username DEFAULT ('') FOR [Username]
end
-----------------------------------------------------------------------------
declare @IsOnlyNameValid nvarchar(1000)
set @IsOnlyNameValid = ''
select @IsOnlyNameValid = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Facility'
and vSysColumns.name = 'IsOnlyNameValid'
if OBJECT_ID(@IsOnlyNameValid, 'D') is not null
begin
Exec('Alter table [dbo].[Facility] 
drop constraint ' + @IsOnlyNameValid)
ALTER TABLE [dbo].[Facility] 
ADD constraint DF_Facility_IsOnlyNameValid DEFAULT ((1)) FOR [IsOnlyNameValid]
end
-------------------------- MODIFY PATIENT DEFAULT CONSTRAINT NAMES
declare @PacemakerTypeStandard nvarchar(1000)
set @PacemakerTypeStandard = ''
select @PacemakerTypeStandard = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Patient'
and vSysColumns.name = 'PacemakerTypeStandard'
if OBJECT_ID(@PacemakerTypeStandard, 'D') is not null
begin
Exec('Alter table [dbo].[Patient] 
drop constraint ' + @PacemakerTypeStandard)
ALTER TABLE [dbo].[Patient] 
ADD constraint DF_Patient_PacemakerTypeStandard DEFAULT ((0)) FOR [PacemakerTypeStandard]
end
-------------------------------------------------------------------------
declare @Status nvarchar(1000)
set @Status = ''
select @Status = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Patient'
and vSysColumns.name = 'Status'
if OBJECT_ID(@Status, 'D') is not null
begin
Exec('Alter table [dbo].[Patient] 
drop constraint ' + @Status)
ALTER TABLE [dbo].[Patient] 
ADD constraint DF_Patient_Status DEFAULT ((10)) FOR [Status]
end
-------------------------- MODIFY RECORDINUSE DEFAULT CONSTRAINT NAMES
declare @Description nvarchar(1000)
set @Description = ''
select @Description = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='RecordInUse'
and vSysColumns.name = 'Description'
if OBJECT_ID(@Description, 'D') is not null
begin
Exec('Alter table [dbo].[RecordInUse] 
drop constraint ' + @Description)
ALTER TABLE [dbo].[RecordInUse] 
ADD constraint DF_Report_Description DEFAULT (NULL) FOR [Description]
end
-------------------------- MODIFY REPORT DEFAULT CONSTRAINT NAMES
declare @FormatFilename nvarchar(1000)
set @FormatFilename = ''
select @FormatFilename = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Report'
and vSysColumns.name = 'FormatFilename'
if OBJECT_ID(@FormatFilename, 'D') is not null
begin
Exec('Alter table [dbo].[Report] 
drop constraint ' + @FormatFilename)
ALTER TABLE [dbo].[Report] 
ADD constraint DF_Report_FormatFilename DEFAULT (NULL) FOR [FormatFilename]
end
-------------------------------------------------------------------------------------
declare @ReportStatus nvarchar(1000)
set @ReportStatus = ''
select @ReportStatus = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Report'
and vSysColumns.name = 'Status'
if OBJECT_ID(@ReportStatus, 'D') is not null
begin
Exec('Alter table [dbo].[Report] 
drop constraint ' + @ReportStatus)
ALTER TABLE [dbo].[Report] 
ADD constraint DF_Report_Status DEFAULT ((0)) FOR [Status]
end
-------------------------- MODIFY REPORTSIGNATURE DEFAULT CONSTRAINT NAMES
declare @ReportSignatureType nvarchar(1000)
set @ReportSignatureType = ''
select @ReportSignatureType = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='ReportSignature'
and vSysColumns.name = 'Type'
if OBJECT_ID(@ReportSignatureType, 'D') is not null
begin
Exec('Alter table [dbo].[ReportSignature] 
drop constraint ' + @ReportSignatureType)
ALTER TABLE [dbo].[ReportSignature] 
ADD constraint DF_ReportSignature_Type DEFAULT ((0)) FOR [Type]
end
-------------------------- MODIFY STAFFMEMBER DEFAULT CONSTRAINT NAMES
declare @Autogenerated nvarchar(1000)
set @Autogenerated = ''
select @Autogenerated = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='StaffMember'
and vSysColumns.name = 'Autogenerated'
if OBJECT_ID(@Autogenerated, 'D') is not null
begin
Exec('Alter table [dbo].[StaffMember] 
drop constraint ' + @Autogenerated)
ALTER TABLE [dbo].[StaffMember] 
ADD constraint DF_StaffMember_Autogenerated DEFAULT ((0)) FOR [Autogenerated]
end
----------------------------------------------------------------------------
declare @IsOnlyFullNameValid nvarchar(1000)
set @IsOnlyFullNameValid = ''
select @IsOnlyFullNameValid = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='StaffMember'
and vSysColumns.name = 'IsOnlyFullNameValid'
if OBJECT_ID(@IsOnlyFullNameValid, 'D') is not null
begin
Exec('Alter table [dbo].[StaffMember] 
drop constraint ' + @IsOnlyFullNameValid)
ALTER TABLE [dbo].[StaffMember] 
ADD constraint DF_StaffMember_IsOnlyFullNameValid DEFAULT ((1)) FOR [IsOnlyFullNameValid]
end
------------------------------MODIFY TEST DEFAULT CONSTRAINT NAMES
declare @OrderStatus nvarchar(1000)
set @OrderStatus = ''
select @OrderStatus = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Test'
and vSysColumns.name = 'OrderStatus'
if OBJECT_ID(@OrderStatus, 'D') is not null
begin
Exec('Alter table [dbo].[Test] 
drop constraint ' + @OrderStatus)
ALTER TABLE [dbo].[Test] 
ADD constraint DF_Test_OrderStatus DEFAULT ((0)) FOR [OrderStatus]
end
--------------------------------------------------------------------------------
declare @TestPacemakerTypeStandard nvarchar(1000)
set @TestPacemakerTypeStandard = ''
select @TestPacemakerTypeStandard = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Test'
and vSysColumns.name = 'PacemakerTypeStandard'
if OBJECT_ID(@TestPacemakerTypeStandard, 'D') is not null
begin
Exec('Alter table [dbo].[Test] 
drop constraint ' + @TestPacemakerTypeStandard)
ALTER TABLE [dbo].[Test] 
ADD constraint DF_Test_PacemakerTypeStandard DEFAULT ((0)) FOR [PacemakerTypeStandard]
end
------------------------------------------------------------------------------------------------
declare @Priority nvarchar(1000)
set @Priority = ''
select @Priority = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Test'
and vSysColumns.name = 'Priority'
if OBJECT_ID(@Priority, 'D') is not null
begin
Exec('Alter table [dbo].[Test] 
drop constraint ' + @Priority)
ALTER TABLE [dbo].[Test] 
ADD constraint DF_Test_Priority DEFAULT ((0)) FOR [Priority]
end
-----------------------------------------------------------------------------------------------------
declare @TestStatus nvarchar(1000)
set @TestStatus = ''
select @TestStatus = vSysConstraints.name from 
sys.all_columns vSysColumns 
inner join
sys.tables vSysTables 
on 
vSysColumns.object_id = vSysTables.object_id
inner join
sys.default_constraints vSysConstraints
on vSysColumns.default_object_id = vSysConstraints.object_id
where vSysTables.name='Test'
and vSysColumns.name = 'Status'
if OBJECT_ID(@TestStatus, 'D') is not null
begin
Exec('Alter table [dbo].[Test] 
drop constraint ' + @TestStatus)
ALTER TABLE [dbo].[Test] 
ADD constraint DF_Test_Status DEFAULT ((0)) FOR [Status]
end

08/09/2020 13:17:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToDropUnusedImpresarioTables.sql

08/09/2020 13:17:03: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:17:03: 
------------------ DROP IMPRESARIO TABLES
IF EXISTS (select * from sysobjects where name='TemplateSection' and xtype='U')
	ALTER TABLE [TemplateSection] DROP CONSTRAINT FK_TemplateSection_Section;
IF EXISTS (select * from sysobjects where name='Section' and xtype='U')
	DROP TABLE [Section];
IF EXISTS (select * from sysobjects where name='TemplateSection' and xtype='U')
	DROP TABLE [TemplateSection];
IF EXISTS (select * from sysobjects where name='Template' and xtype='U')
	DROP TABLE [Template];
IF EXISTS (select * from sysobjects where name='UserDefinedEvent' and xtype='U')
	DROP TABLE [UserDefinedEvent];

08/09/2020 13:17:03: 
------------------- DROP UNUSED USER SETTINGS TABLE (checked not used even in Sentinel 8.5)
IF EXISTS (select * from sysobjects where name='UserSettings' and xtype='U')
	DROP TABLE [UserSettings];
08/09/2020 13:17:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToChangeEmptyStringsToNull.sql

08/09/2020 13:17:03: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:17:03: 
------------------ CHANGE WHITESPACE STRINGS TO NULL IN THE PATIENT RECORDS
ALTER TABLE [Patient] ALTER COLUMN [PatientId] nvarchar(64) NULL;

08/09/2020 13:17:03: 
ALTER TABLE [Patient] ADD CONSTRAINT CK_Patient_PatientId_Organisation
CHECK ([Status]=10 OR ([PatientId] IS NOT NULL AND [Organisation] IS NOT NULL AND LEN([PatientId])>0 AND LEN([Organisation])>0));

08/09/2020 13:17:03: 
UPDATE [Patient] SET [SecondIdentifier]=NULL WHERE LTRIM([SecondIdentifier])='';
UPDATE [Patient] SET [ThirdIdentifier]=NULL WHERE LTRIM([ThirdIdentifier])='';
UPDATE [Patient] SET [ContactRelationship]=NULL WHERE LTRIM([ContactRelationship])='';

08/09/2020 13:17:03: 
UPDATE [Patient] SET [InPatientWard]=NULL WHERE LTRIM([InPatientWard])='';
UPDATE [Patient] SET [InPatientBed]=NULL WHERE LTRIM([InPatientBed])='';
UPDATE [Patient] SET [InPatientPointOfCare]=NULL WHERE LTRIM([InPatientPointOfCare])='';

08/09/2020 13:17:04: 
UPDATE [Patient] SET [OutPatientWard]=NULL WHERE LTRIM([OutPatientWard])='';
UPDATE [Patient] SET [OutPatientBed]=NULL WHERE LTRIM([OutPatientBed])='';
UPDATE [Patient] SET [OutPatientPointOfCare]=NULL WHERE LTRIM([OutPatientPointOfCare])='';

08/09/2020 13:17:04: 
UPDATE [Patient] SET [MaidenName]=NULL WHERE LTRIM([MaidenName])='';
UPDATE [Patient] SET [InsuranceNumber]=NULL WHERE LTRIM([InsuranceNumber])='';
UPDATE [Patient] SET [NationalId]=NULL WHERE LTRIM([NationalId])='';

08/09/2020 13:17:04: 
UPDATE [Patient] SET [UserDefined1Name]=NULL WHERE LTRIM([UserDefined1Name])='';
UPDATE [Patient] SET [UserDefined1Value]=NULL WHERE LTRIM([UserDefined1Value])='';

08/09/2020 13:17:04: 
UPDATE [Patient] SET [UserDefined2Name]=NULL WHERE LTRIM([UserDefined2Name])='';
UPDATE [Patient] SET [UserDefined2Value]=NULL WHERE LTRIM([UserDefined2Value])='';
UPDATE [Patient] SET [UserDefined3Name]=NULL WHERE LTRIM([UserDefined3Name])='';

08/09/2020 13:17:05: 
UPDATE [Patient] SET [UserDefined3Value]=NULL WHERE LTRIM([UserDefined3Value])='';
UPDATE [Patient] SET [UserDefined4Name]=NULL WHERE LTRIM([UserDefined4Name])='';
UPDATE [Patient] SET [UserDefined4Value]=NULL WHERE LTRIM([UserDefined4Value])='';

08/09/2020 13:17:05: 
UPDATE [Patient] SET [AddressLine1]=NULL WHERE LTRIM([AddressLine1])='';
UPDATE [Patient] SET [AddressLine2]=NULL WHERE LTRIM([AddressLine2])='';
UPDATE [Patient] SET [City]=NULL WHERE LTRIM([City])='';

08/09/2020 13:17:05: 
UPDATE [Patient] SET [PostZipCode]=NULL WHERE LTRIM([PostZipCode])='';
UPDATE [Patient] SET [CountyRegion]=NULL WHERE LTRIM([CountyRegion])='';
UPDATE [Patient] SET [Country]=NULL WHERE LTRIM([Country])='';

08/09/2020 13:17:05: 
UPDATE [Patient] SET [HomePhone]=NULL WHERE LTRIM([HomePhone])='';
UPDATE [Patient] SET [WorkPhone]=NULL WHERE LTRIM([WorkPhone])='';
UPDATE [Patient] SET [MobilePhone]=NULL WHERE LTRIM([MobilePhone])='';

08/09/2020 13:17:06: 
UPDATE [Patient] SET [EmailAddress]=NULL WHERE LTRIM([EmailAddress])='';
UPDATE [Patient] SET [Title]=NULL WHERE LTRIM([Title])='';
UPDATE [Patient] SET [GivenName]=NULL WHERE LTRIM([GivenName])='';

08/09/2020 13:17:06: 
UPDATE [Patient] SET [FamilyName]=NULL WHERE LTRIM([FamilyName])='';
UPDATE [Patient] SET [MiddleInitials]=NULL WHERE LTRIM([MiddleInitials])='';
UPDATE [Patient] SET [Ethnicity]=NULL WHERE LTRIM([Ethnicity])='';

08/09/2020 13:17:06: 
-- UPDATE [Patient] SET [Notes]=NULL WHERE LTRIM([Notes])=''; -- LTRIM doesn't work with NTEXT columns
UPDATE [Patient] SET [ContactGivenName]=NULL WHERE LTRIM([ContactGivenName])='';
UPDATE [Patient] SET [ContactFamilyName]=NULL WHERE LTRIM([ContactFamilyName])='';

08/09/2020 13:17:07: 
UPDATE [Patient] SET [ContactHomePhone]=NULL WHERE LTRIM([ContactHomePhone])='';
UPDATE [Patient] SET [ContactMobilePhone]=NULL WHERE LTRIM([ContactMobilePhone])='';

08/09/2020 13:17:07: 
--------------------- CHANGE WHITESPACE STRINGS TO NULL IN THE TEST RECORDS
UPDATE [Test] SET [PacemakerType]=NULL WHERE LTRIM([PacemakerType])='';
UPDATE [Test] SET [RecorderSerial]=NULL WHERE LTRIM([RecorderSerial])='';
UPDATE [Test] SET [Ward]=NULL WHERE LTRIM([Ward])='';

08/09/2020 13:17:08: 
UPDATE [Test] SET [PointOfCare]=NULL WHERE LTRIM([PointOfCare])='';
UPDATE [Test] SET [Bed]=NULL WHERE LTRIM([Bed])='';
UPDATE [Test] SET [UserDefined1Name]=NULL WHERE LTRIM([UserDefined1Name])='';
UPDATE [Test] SET [UserDefined1Value]=NULL WHERE LTRIM([UserDefined1Value])='';

08/09/2020 13:17:08: 
UPDATE [Test] SET [UserDefined2Name]=NULL WHERE LTRIM([UserDefined2Name])='';
UPDATE [Test] SET [UserDefined2Value]=NULL WHERE LTRIM([UserDefined2Value])='';
UPDATE [Test] SET [UserDefined3Name]=NULL WHERE LTRIM([UserDefined3Name])='';

08/09/2020 13:17:09: 
UPDATE [Test] SET [UserDefined3Value]=NULL WHERE LTRIM([UserDefined3Value])='';
UPDATE [Test] SET [UserDefined4Name]=NULL WHERE LTRIM([UserDefined4Name])='';
UPDATE [Test] SET [UserDefined4Value]=NULL WHERE LTRIM([UserDefined4Value])='';

08/09/2020 13:17:09: 
UPDATE [Test] SET [RecorderModel]=NULL WHERE LTRIM([RecorderModel])='';
UPDATE [Test] SET [OrderID]=NULL WHERE LTRIM([OrderID])='';
UPDATE [Test] SET [OrderProcedureID]=NULL WHERE LTRIM([OrderProcedureID])='';

08/09/2020 13:17:10: 
UPDATE [Test] SET [OrderingPhysician]=NULL WHERE LTRIM([OrderingPhysician])='';

08/09/2020 13:17:10: 
-------------------- CHANGE WHITESPACE STRINGS TO NULL IN THE FACILITY RECORDS
UPDATE [Facility] SET [Url]=NULL WHERE LTRIM([Url])='';
UPDATE [Facility] SET [Username]=NULL WHERE LTRIM([Username])='';
UPDATE [Facility] SET [Password]=NULL WHERE LTRIM([Password])='';

08/09/2020 13:17:11: 
UPDATE [Facility] SET [AddressLine1]=NULL WHERE LTRIM([AddressLine1])='';
UPDATE [Facility] SET [AddressLine2]=NULL WHERE LTRIM([AddressLine2])='';
UPDATE [Facility] SET [City]=NULL WHERE LTRIM([City])='';

08/09/2020 13:17:11: 
UPDATE [Facility] SET [PostZipCode]=NULL WHERE LTRIM([PostZipCode])='';
UPDATE [Facility] SET [CountyRegion]=NULL WHERE LTRIM([CountyRegion])='';
UPDATE [Facility] SET [Country]=NULL WHERE LTRIM([Country])='';

08/09/2020 13:17:12: 
UPDATE [Facility] SET [HomePhone]=NULL WHERE LTRIM([HomePhone])='';
UPDATE [Facility] SET [WorkPhone]=NULL WHERE LTRIM([WorkPhone])='';
UPDATE [Facility] SET [MobilePhone]=NULL WHERE LTRIM([MobilePhone])='';

08/09/2020 13:17:12: 
UPDATE [Facility] SET [FaxNumber]=NULL WHERE LTRIM([FaxNumber])='';
UPDATE [Facility] SET [EmailAddress]=NULL WHERE LTRIM([EmailAddress])='';
-- no need to adjust organisation as it has been added in the update to database version 16

08/09/2020 13:17:12: 
-------------------- CHANGE WHITESPACE STRINGS TO NULL IN THE STAFF RECORDS
UPDATE [StaffMember] SET [FreeTextName]=NULL WHERE LTRIM([FreeTextName])='';
UPDATE [StaffMember] SET [AddressLine1]=NULL WHERE LTRIM([AddressLine1])='';
UPDATE [StaffMember] SET [AddressLine2]=NULL WHERE LTRIM([AddressLine2])='';
UPDATE [StaffMember] SET [City]=NULL WHERE LTRIM([City])='';

08/09/2020 13:17:12: 
UPDATE [StaffMember] SET [PostZipCode]=NULL WHERE LTRIM([PostZipCode])='';
UPDATE [StaffMember] SET [CountyRegion]=NULL WHERE LTRIM([CountyRegion])='';
UPDATE [StaffMember] SET [Country]=NULL WHERE LTRIM([Country])='';

08/09/2020 13:17:13: 
UPDATE [StaffMember] SET [HomePhone]=NULL WHERE LTRIM([HomePhone])='';
UPDATE [StaffMember] SET [WorkPhone]=NULL WHERE LTRIM([WorkPhone])='';
UPDATE [StaffMember] SET [MobilePhone]=NULL WHERE LTRIM([MobilePhone])='';

08/09/2020 13:17:13: 
UPDATE [StaffMember] SET [FaxNumber]=NULL WHERE LTRIM([FaxNumber])='';
UPDATE [StaffMember] SET [EmailAddress]=NULL WHERE LTRIM([EmailAddress])='';
UPDATE [StaffMember] SET [PagerCode]=NULL WHERE LTRIM([PagerCode])='';

08/09/2020 13:17:13: 
UPDATE [StaffMember] SET [Title]=NULL WHERE LTRIM([Title])='';
UPDATE [StaffMember] SET [GivenName]=NULL WHERE LTRIM([GivenName])='';
UPDATE [StaffMember] SET [FamilyName]=NULL WHERE LTRIM([FamilyName])='';

08/09/2020 13:17:14: 
UPDATE [StaffMember] SET [MiddleInitials]=NULL WHERE LTRIM([MiddleInitials])='';
UPDATE [StaffMember] SET [Username]=NULL WHERE LTRIM([Username])='';
UPDATE [StaffMember] SET [Password]=NULL WHERE LTRIM([Password])='';

08/09/2020 13:17:14: 
-- no need to adjust department or ward as it has been added in the update to database version 16
-------------------- CHANGE WHITESPACE STRINGS TO NULL IN THE CASE RECORDS
UPDATE [Case] SET [HL7PatientClass]=NULL WHERE LTRIM([HL7PatientClass])='';
08/09/2020 13:17:14: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToReplaceXmlColumn.sql

08/09/2020 13:17:14: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:17:14: 
/* Process existing medication indication and diary columns in Test Table to ensure that the data will parse as XML
   Potential issues are as follows:
   Data could contain characters that are illegal in an xml fiels
   Data could could produce ill formed xml
   
   The process is two fold. Firstly we pass each field into a function that strips all potential illegal characters. Secondly, we then attempt to parse this as xml. If	this fails then we replace the data with a null value
*/
-- Drop (if exists) a function that will clean the data
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RemoveInvalidXMLCharacters]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[RemoveInvalidXMLCharacters]

08/09/2020 13:17:14: 
CREATE FUNCTION [dbo].[RemoveInvalidXMLCharacters] (@InputString nvarchar(MAX))
RETURNS nvarchar(MAX)
AS
BEGIN
	IF @InputString IS NOT NULL
	BEGIN
		RETURN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
		(@InputString,'&#x1;',''), '&#x2;',''), '&#x3;',''), '&#x4;',''), '&#x5;',''), '&#x6;',''), '&#x7;',''), '&#x8;','')
		, '&#xB;',''), '&#xC;','')
		, '&#xE;',''), '&#xF;',''), '&#x10;',''), '&#x11;',''), '&#x12;',''), '&#x13;',''), '&#x14;',''), '&#x15;',''), '&#x16;',''), '&#x17;','')
		, '&#x18;',''), '&#x19;',''), '&#x1A;',''), '&#x1B;',''), '&#x1C;',''), '&#x1D;',''), '&#x1E;',''), '&#x1F;','')
	END
	RETURN @InputString
END

08/09/2020 13:17:14: 
UPDATE [Test] SET [Medication] = REPLACE(CAST([Medication] as NVARCHAR(max)), 'utf-8', 'utf-16') WHERE [Medication] LIKE '%encoding="utf-8"%'
UPDATE [Test] SET [Medication] = REPLACE(CAST([Medication] as NVARCHAR(max)), '&#x0;', '') WHERE [Medication] LIKE '%&#x0;%'
UPDATE [Test] SET [Medication] = dbo.RemoveInvalidXMLCharacters(CAST([Medication] as NVARCHAR(max))) WHERE [Medication] LIKE '%&#x%'

08/09/2020 13:18:30: 
UPDATE [Test] SET [Indication] = REPLACE(CAST([Indication] as NVARCHAR(max)), 'utf-8', 'utf-16') WHERE [Indication] LIKE '%encoding="utf-8"%'
UPDATE [Test] SET [Indication] = REPLACE(CAST([Indication] as NVARCHAR(max)), '&#x0;', '') WHERE [Indication] LIKE '%&#x0;%'
UPDATE [Test] SET [Indication] = dbo.RemoveInvalidXMLCharacters(CAST([Indication] as NVARCHAR(max))) WHERE [Indication] LIKE '%&#x%'

08/09/2020 13:18:45: 
UPDATE [Test] SET [Diary] = REPLACE(CAST([Diary] as NVARCHAR(max)), 'utf-8', 'utf-16') WHERE [Diary] LIKE '%encoding="utf-8"%'
UPDATE [Test] SET [Diary] = REPLACE(CAST([Diary] as NVARCHAR(max)), '&#x0;', '') WHERE [Diary] LIKE '%&#x0;%'
UPDATE [Test] SET [Diary] = dbo.RemoveInvalidXMLCharacters(CAST([Diary] as NVARCHAR(max))) WHERE [Diary] LIKE '%&#x%'

08/09/2020 13:18:47: 
UPDATE [Test] SET [RestingInfo] = REPLACE(CAST([RestingInfo] as NVARCHAR(max)), 'utf-8', 'utf-16') WHERE [RestingInfo] LIKE '%encoding="utf-8"%'
UPDATE [Test] SET [RestingInfo] = REPLACE(CAST([RestingInfo] as NVARCHAR(max)), '&#x0;', '') WHERE [RestingInfo] LIKE '%&#x0;%'
UPDATE [Test] SET [RestingInfo] = dbo.RemoveInvalidXMLCharacters(CAST([RestingInfo] as NVARCHAR(max))) WHERE [RestingInfo] LIKE '%&#x%'

08/09/2020 13:25:15: 
-- Iterate through the Test Table and clean the data
DECLARE @maxRows INT
DECLARE @rowNum INT = 0
DECLARE @Key UNIQUEIDENTIFIER
DECLARE @Medication NVARCHAR(MAX), @Indication NVARCHAR(MAX), @Diary NVARCHAR(MAX), @RestingInfo NVARCHAR(MAX), @xmlResultant XML, @xmlDateTimeResultant DATETIME
SELECT @maxRows = COUNT(*) FROM [Test]
SELECT TOP 1 @Key = [Key] FROM [Test]
ORDER BY [Key] ASC
WHILE @rowNum < @maxRows
BEGIN
	SET @rowNum = @rowNum + 1
	SELECT @Medication = Medication, @Indication = Indication, @Diary = Diary, @RestingInfo = RestingInfo
	FROM [Test] 
	WHERE [Key] = @Key
	BEGIN TRY
		SELECT @xmlResultant = CAST(@Medication AS XML)
	END TRY
	BEGIN CATCH
		SELECT @Medication = NULL
	END CATCH
	BEGIN TRY
		SELECT @xmlResultant = CAST(@Indication AS XML)
	END TRY
	BEGIN CATCH
		SELECT @Indication = NULL
	END CATCH
	BEGIN TRY
		SELECT @xmlResultant = CAST(@Diary AS XML)
		--This will ensure that there is no invalid datetime in the diary datetime attribute
		SELECT @xmlDateTimeResultant = t.c.value('@dateTime', 'DateTime')
		FROM @xmlResultant.nodes('//Diary/Events/Event') as t(c)
	END TRY
	BEGIN CATCH
		SELECT @Diary = NULL
	END CATCH
	BEGIN TRY
		SELECT @xmlResultant = CAST(@RestingInfo AS XML)
	END TRY
	BEGIN CATCH
		SELECT @RestingInfo = NULL
	END CATCH
	UPDATE [Test]
	SET Medication = @Medication, Indication = @Indication, Diary = @Diary, RestingInfo = @RestingInfo
	WHERE [Key] = @Key
	SELECT TOP 1 @Key = [Key] FROM [Test]
	WHERE [Key] > @Key
	ORDER BY [Key] ASC
END
------------------ CREATE A TABLE TO HOLD THE MEDICATIONS
CREATE TABLE [Medication](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_Medication_Key]  DEFAULT (newid()),
	[TestKey] uniqueidentifier NOT NULL,
	[Name] nvarchar(100) NOT NULL,
	[Dosage] nvarchar(10) NULL,
	[Units] nvarchar(10) NULL,
	[Regime] nvarchar(20) NULL,
	[Route] nvarchar(20) NULL,
	[CreatedDateTime] datetime NOT NULL,
	[UpdatedDateTime] datetime NOT NULL
)
ON [PRIMARY]

08/09/2020 13:29:40: 
ALTER TABLE [Medication] ADD CONSTRAINT [DF_Medication_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [Medication] ADD CONSTRAINT [DF_Medication_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:29:40: 
-- drop any existing medication update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Medication_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Medication_UpdatedDateTime]
END

08/09/2020 13:29:40: 
-- create a trigger to automatically update the UpdateDateTime on the Medication table whenever anyone updates a medication record
CREATE TRIGGER [TR_Medication_UpdatedDateTime] ON [Medication] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Medication] SET [UpdatedDateTime]=getutcdate() FROM [Medication] JOIN [deleted] ON [Medication].[Key] = [deleted].[Key];
END

08/09/2020 13:29:40: 
-- set up the foreign key to the test table
ALTER TABLE [Medication] ADD CONSTRAINT FK_Medication_TestKey
	FOREIGN KEY ([TestKey]) REFERENCES Test([Key]);

08/09/2020 13:29:40: 
ALTER TABLE [Medication] ADD CONSTRAINT [CK_Medication_Name] CHECK (DATALENGTH([Name]) > 0)

08/09/2020 13:29:40: 
---- change the column to an XML column so that we can use XPATH expressions on it
ALTER TABLE [Test] ALTER COLUMN [Medication] XML

08/09/2020 13:29:43: 
-- extract the medications from the xml column and insert them into the new table
INSERT INTO [Medication]
	(TestKey,Name,Dosage,Units,Regime,Route)
SELECT
	[Key] AS TestKey,
	n.value('text()[1]','nvarchar(100)') AS MedicationName,
	n.value('./@Dosage','nvarchar(10)') AS MedicationDosage,
	n.value('./Units[1]','nvarchar(10)') AS MedicationUnits,
	n.value('./Regime[1]','nvarchar(20)') AS MedicationRegime,
	n.value('./Route[1]','nvarchar(20)') AS MedicationRoute
FROM [Test]
 CROSS APPLY Medication.nodes('//root/Medications/Medication') h(n)
 WHERE n.value('text()[1]','nvarchar(100)') IS NOT NULL AND n.value('text()[1]','nvarchar(100)') != '' 

08/09/2020 13:29:46: 
-- delete the xml column
ALTER TABLE [Test] DROP COLUMN [Medication];

08/09/2020 13:29:46: 
------------------ CREATE A TABLE TO HOLD THE INDICATIONS
CREATE TABLE [Indication](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_Indication_Key]  DEFAULT (newid()),
	[TestKey] uniqueidentifier NOT NULL,
	[Name] nvarchar(100) NOT NULL,
	[CreatedDateTime] datetime NOT NULL,
	[UpdatedDateTime] datetime NOT NULL
)
ON [PRIMARY]

08/09/2020 13:29:46: 
ALTER TABLE [Indication] ADD CONSTRAINT [DF_Indication_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [Indication] ADD CONSTRAINT [DF_Indication_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:29:46: 
-- drop any existing indication update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Indication_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Indication_UpdatedDateTime]
END

08/09/2020 13:29:46: 
-- create a trigger to automatically update the UpdateDateTime on the Indication table whenever anyone updates an indication record
CREATE TRIGGER [TR_Indication_UpdatedDateTime] ON [Indication] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Indication] SET [UpdatedDateTime]=getutcdate() FROM [Indication] JOIN [deleted] ON [Indication].[Key] = [deleted].[Key];
END

08/09/2020 13:29:46: 
-- set up the foreign key to the test table
ALTER TABLE [Indication] ADD CONSTRAINT FK_Indication_TestKey
	FOREIGN KEY ([TestKey]) REFERENCES Test([Key]);

08/09/2020 13:29:46: 
--Constraint to check the length of Indication name
ALTER TABLE [Indication] ADD CONSTRAINT [CK_Indication_Name] CHECK (DATALENGTH([Name]) > 0)

08/09/2020 13:29:46: 
---- change the column to an XML column so that we can use XPATH expressions on it
ALTER TABLE [Test] ALTER COLUMN [Indication] XML;

08/09/2020 13:29:48: 
-- extract the indications from the xml column and insert them into the new table
INSERT INTO [Indication]
	(TestKey,Name)
SELECT
	[Key] AS TestKey,
	n.value('text()[1]','nvarchar(100)') AS IndicationName
FROM [Test]
 CROSS APPLY Indication.nodes('//root/Indications/Indication') h(n)
 WHERE n.value('text()[1]','nvarchar(100)') IS NOT NULL AND n.value('text()[1]','nvarchar(100)') != ''

08/09/2020 13:29:48: 
-- delete the xml column
ALTER TABLE [Test] DROP COLUMN [Indication];

08/09/2020 13:29:48: 
------------------ CREATE A TABLE TO HOLD THE HOLTER DIARY EVENTS
CREATE TABLE [HolterDiaryEvent](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_HolterDiaryEvent_Key]  DEFAULT (newid()),
	[TestKey] uniqueidentifier NOT NULL,
	[EventDateTime] datetime NOT NULL,
	[Activity] nvarchar(70) NULL,
	[Symptom] nvarchar(70) NOT NULL,
	[CreatedDateTime] datetime NOT NULL,
	[UpdatedDateTime] datetime NOT NULL
)
ON [PRIMARY]

08/09/2020 13:29:48: 
ALTER TABLE [HolterDiaryEvent] ADD CONSTRAINT [DF_HolterDiaryEvent_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [HolterDiaryEvent] ADD CONSTRAINT [DF_HolterDiaryEvent_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:29:48: 
-- drop any existing holter diary event update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_HolterDiaryEvent_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_HolterDiaryEvent_UpdatedDateTime]
END

08/09/2020 13:29:48: 
-- create a trigger to automatically update the UpdateDateTime on the HolterDiaryEvent table whenever anyone updates a Holter diary event record
CREATE TRIGGER [TR_HolterDiaryEvent_UpdatedDateTime] ON [HolterDiaryEvent] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [HolterDiaryEvent] SET [UpdatedDateTime]=getutcdate() FROM [HolterDiaryEvent] JOIN [deleted] ON [HolterDiaryEvent].[Key] = [deleted].[Key];
END

08/09/2020 13:29:48: 
-- set up the foreign key to the test table
ALTER TABLE [HolterDiaryEvent] ADD CONSTRAINT FK_HolterDiaryEvent_TestKey
	FOREIGN KEY ([TestKey]) REFERENCES Test([Key]);

08/09/2020 13:29:48: 
--Constraint to verify the length of the symptom not empty
ALTER TABLE [HolterDiaryEvent] ADD CONSTRAINT [CK_Holter_Symptom] CHECK (DATALENGTH([Symptom]) > 0)

08/09/2020 13:29:48: 
---- change the column to an XML column so that we can use XPATH expressions on it
ALTER TABLE [Test] ALTER COLUMN [Diary] XML;

08/09/2020 13:29:49: 
-- extract the indications from the xml column and insert them into the new table
-- nb. date time is in the format yyyy-mm-ddThh:mm:ss needs tested to insure correctly implicitly converted to SQL Server datetime 
INSERT INTO [HolterDiaryEvent]
	(TestKey,EventDateTime,Activity,Symptom)
SELECT
	[Key] AS TestKey,
	n.value('./@dateTime','datetime') AS DiaryEventDateTime,
	n.value('./@activity','nvarchar(70)') AS DiaryEventActivity,
	n.value('./@symptom','nvarchar(70)') AS DiaryEventSymptom
FROM [Test] 
CROSS APPLY Diary.nodes('//Diary/Events/Event') h(n)
WHERE n.value('./@activity','nvarchar(70)') IS NOT NULL AND n.value('./@activity','nvarchar(70)') != '' 
AND n.value('./@symptom','nvarchar(70)') IS NOT NULL AND n.value('./@symptom','nvarchar(70)') != '' 

08/09/2020 13:29:49: 
-- delete the xml column
ALTER TABLE [Test] DROP COLUMN [Diary];

08/09/2020 13:29:49: 
------------------ CREATE A TABLE TO HOLD THE MEASUREMENTS
CREATE TABLE [ReportMeasurement](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_ReportMeasurement_Key]  DEFAULT (newid()),
	[ReportKey] uniqueidentifier NOT NULL,
	[Id] nvarchar(100) NULL,
	[Name] nvarchar(100) NULL,
	[Value] nvarchar(100) NULL,
	[Type] nvarchar(50) NOT NULL,
	[Unit] nvarchar(50) NOT NULL,
	[Status] nvarchar(50) NULL,
	[CreatedDateTime] datetime NOT NULL,
	[UpdatedDateTime] datetime NOT NULL
)
ON [PRIMARY]

08/09/2020 13:29:49: 
ALTER TABLE [ReportMeasurement] ADD CONSTRAINT [DF_ReportMeasurement_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [ReportMeasurement] ADD CONSTRAINT [DF_ReportMeasurement_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:29:49: 
-- drop any existing report measurement update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_ReportMeasurement_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_ReportMeasurement_UpdatedDateTime]
END

08/09/2020 13:29:49: 
-- create a trigger to automatically update the UpdateDateTime on the ReportMeasurement table whenever anyone updates a report measurement record
CREATE TRIGGER [TR_ReportMeasurement_UpdatedDateTime] ON [ReportMeasurement] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [ReportMeasurement] SET [UpdatedDateTime]=getutcdate() FROM [ReportMeasurement] JOIN [deleted] ON [ReportMeasurement].[Key] = [deleted].[Key];
END

08/09/2020 13:29:49: 
-- set up the foreign key to the report table
ALTER TABLE [ReportMeasurement] ADD CONSTRAINT FK_ReportMeasurement_ReportKey
	FOREIGN KEY ([ReportKey]) REFERENCES Report([Key]);

08/09/2020 13:29:49: 
-- clean the xml data
UPDATE [Report] SET [Measurements] = REPLACE(CAST([Measurements] as NVARCHAR(max)), 'utf-8', 'utf-16') WHERE [Measurements] LIKE '%encoding="utf-8"%'
UPDATE [Report] SET [Measurements] = REPLACE(CAST([Measurements] as NVARCHAR(max)), '&#x0;', '') WHERE [Measurements] LIKE '%&#x0;%'
UPDATE [Report] SET [Measurements] = dbo.RemoveInvalidXMLCharacters(CAST([Measurements] as NVARCHAR(max))) WHERE [Measurements] LIKE '%&#x%'

08/09/2020 13:39:01: 
DECLARE @maxRows INT
DECLARE @rowNum INT = 0
DECLARE @Key UNIQUEIDENTIFIER
DECLARE @Measurements NVARCHAR(MAX), @xmlResultant XML
SELECT @maxRows = COUNT(*) FROM [Report]
SELECT @rowNum = 0
SELECT TOP 1 @Key = [Key] FROM [Report]
ORDER BY [Key] ASC
WHILE @rowNum < @maxRows
BEGIN
	SET @rowNum = @rowNum + 1
	SELECT @Measurements = Measurements
	FROM [Report] 
	WHERE [Key] = @Key
	BEGIN TRY
		BEGIN
			SELECT @xmlResultant = CAST(@Measurements AS XML)
		END
	END TRY
	BEGIN CATCH
		SELECT @Measurements = NULL
	END CATCH
	UPDATE [report]
	SET Measurements = @Measurements
	WHERE [Key] = @Key
	SELECT TOP 1 @Key = [Key] FROM [Report]
	WHERE [Key] > @Key
	ORDER BY [Key] ASC
END
---- change the column to an XML column so that we can use XPATH expressions on it
ALTER TABLE [Report] ALTER COLUMN [Measurements] XML;

08/09/2020 13:44:27: 
-- extract the medications from the xml column and insert them into the new table
INSERT INTO [ReportMeasurement]
	([ReportKey],[Id],[Name],[Value],[Type],[Unit])
SELECT
	[Key] AS ReportKey,
	n.value('./MeasurementID[1]','nvarchar(50)') AS MeasurementId,
	n.value('./Name[1]','nvarchar(50)') AS MeasurementName,
	n.value('./MeasurementValue[1]','nvarchar(50)') AS MeasurementValue,
	n.value('./TypeOfMeasurement[1]','nvarchar(30)') AS MeasurementType,
	n.value('./Units[1]','nvarchar(30)') AS MeasurementUnit
FROM [Report] 
CROSS APPLY Measurements.nodes('//ArrayOfMeasurement/Measurement') h(n)
WHERE n.value('./MeasurementID[1]','nvarchar(50)') IS NOT NULL AND n.value('./MeasurementID[1]','nvarchar(50)') != ''
AND  n.value('./Name[1]','nvarchar(50)') IS NOT NULL AND n.value('./Name[1]','nvarchar(50)') != ''
AND n.value('./MeasurementValue[1]','nvarchar(50)') IS NOT NULL AND n.value('./MeasurementValue[1]','nvarchar(50)') != ''
AND n.value('./TypeOfMeasurement[1]','nvarchar(30)') IS NOT NULL AND n.value('./TypeOfMeasurement[1]','nvarchar(30)') != ''
AND n.value('./Units[1]','nvarchar(30)') IS NOT NULL AND n.value('./Units[1]','nvarchar(30)') != ''

08/09/2020 13:53:48: 
-- delete the xml column
ALTER TABLE [Report] DROP COLUMN [Measurements];

08/09/2020 13:53:48: 
------------------ TRANSFER THE INTERPRETATION STATEMENTS FROM THE RESTING INFO XML AND RECORDING COMMENTS TO THE REPORT COMMENTS IF NOT ALREADY THERE
-- this migration follows the logic used by previous versions PDF report review when it attempts to find the report comments
-- (the operation methods used by the ABP and Resting review were also checked)
-- and gathers the report comments from the various places they may be stored and moves them to the comments column in the report table
-- move the interpretation statements from the resting info xml to the report comments if there are no report comments
ALTER TABLE [Test] ALTER COLUMN [RestingInfo] XML;

08/09/2020 13:56:24: 
UPDATE [Report] SET
	[Report].[Comments] = SUBSTRING(CAST((SELECT ', '+S.N.value('(./text())[1]','nvarchar(100)')
     FROM RestingInfo.nodes('//RestingInfo/Interpretations/Interpretation') AS S(N)
	FOR XML PATH(''), TYPE) AS NVARCHAR(2000)),3,2000)
FROM [Test] INNER JOIN [Report] ON [Report].[TestKey]=[Test].[Key] 
WHERE [RestingInfo] IS NOT NULL AND [TestKind]=2 AND ([Report].[Comments] IS NULL);

08/09/2020 13:57:44: 
---- move the recording comments to the report comments if there are no report comments
UPDATE [Report] SET
	[Report].[Comments] = [Recording].[Comments]
FROM [Test] INNER JOIN [Recording] ON [Test].[RecordingKey]=[Recording].[Key]
WHERE ([Report].[Comments] IS NULL);
-- Drop  Function
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RemoveInvalidXMLCharacters]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[RemoveInvalidXMLCharacters]
08/09/2020 13:57:47: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddTestIdInTestTable.sql

08/09/2020 13:57:47: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:47: 
----------------- ADDING THE TEST ID'S IN THE TEST TABLE
ALTER TABLE [Test] ADD [OrderStatusUID] NVARCHAR(64) NULL CONSTRAINT DF_Test_OrderStatusUID DEFAULT ((NULL));
ALTER TABLE [Test] ADD [TestId1] NVARCHAR(64) NULL CONSTRAINT DF_Test_TestId1 DEFAULT ((NULL));
ALTER TABLE [Test] ADD [TestId2] NVARCHAR(64) NULL CONSTRAINT DF_Test_TestId2 DEFAULT ((NULL));
ALTER TABLE [Test] ADD [TestId3] NVARCHAR(64) NULL CONSTRAINT DF_Test_TestId3 DEFAULT ((NULL));
08/09/2020 13:57:47: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddErgoSpirometryTable.sql

08/09/2020 13:57:47: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:47: 
SET ANSI_NULLS ON

08/09/2020 13:57:47: 
SET QUOTED_IDENTIFIER ON

08/09/2020 13:57:47: 
CREATE TABLE [dbo].[ErgoSpirometryTest](
	[Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid()),
	[TestKey] [uniqueidentifier] NOT NULL,
	[EcgSource] [nvarchar](80) NULL,
	[StressStartTime] [datetime] NULL,
	[ErgometryComments] [ntext] NULL,
	[SpirometrySource] [nvarchar](80) NULL,
	[SpirometryTime] [datetime] NULL,
	[SpirometrySummary] [ntext] NULL,
	[SpirometryPatientNumber] [nvarchar](50) NULL,
    [HasSpirometryPdf] [bit] NULL,
	[CreatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_ErgoSpirometryTest_CreatedDateTime]  DEFAULT getutcdate(),
	[UpdatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_ErgoSpirometryTest_UpdatedDateTime]  DEFAULT getutcdate(),
 CONSTRAINT [PK_ErgoSpirometryText] PRIMARY KEY CLUSTERED 
(
	[Key] ASC
)ON [PRIMARY]
)ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

08/09/2020 13:57:47: 
ALTER TABLE [ErgoSpirometryTest]  WITH CHECK ADD  CONSTRAINT [FK_ErgoSpirometryTest_Test] FOREIGN KEY([TestKey])
REFERENCES [Test] ([Key])

08/09/2020 13:57:47: 
CREATE TRIGGER [dbo].[TR_ErgoSpirometryTest_UpdatedDateTime] ON [dbo].[ErgoSpirometryTest] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [ErgoSpirometryTest] SET [UpdatedDateTime]=getutcdate() FROM [ErgoSpirometryTest] JOIN [deleted] ON [ErgoSpirometryTest].[Key] = [deleted].[Key];
END

08/09/2020 13:57:47: 
-- End of script
08/09/2020 13:57:47: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddEnumConstraintsToColumns.sql

08/09/2020 13:57:47: 

----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:47: 
----------------------Enum TestKind--------------------------------------------------
ALTER TABLE [dbo].[Test]  WITH CHECK ADD  CONSTRAINT [CK_Test_TestKind] CHECK  (([TestKind]>=(0) AND [TestKind]<=(7)))

08/09/2020 13:57:47: 
ALTER TABLE [dbo].[Test] CHECK CONSTRAINT [CK_Test_TestKind]

08/09/2020 13:57:47: 
----------------------Enum TestStatus--------------------------------------------------
ALTER TABLE [dbo].[Test]  WITH CHECK ADD  CONSTRAINT [CK_Test_Status] 
CHECK  (([status]=(160) OR [status]=(140) OR [status]=(120) OR [status]=(100) OR [status]=(80) OR [status]=(70) OR [status]=(60) OR [status]=(40) OR [status]=(20) OR [status]=(0)))

08/09/2020 13:57:47: 
ALTER TABLE [dbo].[Test] CHECK CONSTRAINT [CK_Test_Status]

08/09/2020 13:57:47: 
----------------------Enum TestOrderStatus---------------------k-----------------------------
ALTER TABLE [dbo].[Test]  WITH CHECK ADD  CONSTRAINT [CK_Test_OrderStatus] CHECK  (([orderstatus]=(3) OR [orderstatus]=(2) OR [orderstatus]=(1) OR [orderstatus]=(0)))

08/09/2020 13:57:47: 
ALTER TABLE [dbo].[Test] CHECK CONSTRAINT [CK_Test_OrderStatus]

08/09/2020 13:57:47: 
----------------------Enum CaseKind--------------------------------------------------
ALTER TABLE [dbo].[Case]  WITH CHECK ADD  CONSTRAINT [CK_Case_CaseKind] CHECK  (([CaseKind]>=(0) AND [CaseKind]<=(6)))

08/09/2020 13:57:47: 
ALTER TABLE [dbo].[Case] CHECK CONSTRAINT [CK_Case_CaseKind]

08/09/2020 13:57:47: 
--------------------Enum Gender-----------------------------------------------------------------------
ALTER TABLE [dbo].[Patient]  WITH CHECK ADD  CONSTRAINT [CK_Patient_Gender] CHECK  (([Gender]=(2) OR [Gender]=(1) OR [Gender]=(0)))

08/09/2020 13:57:48: 
ALTER TABLE [dbo].[Patient] CHECK CONSTRAINT [CK_Patient_Gender]

08/09/2020 13:57:48: 
----------------------Enum PatientStatus--------------------------------------------------
ALTER TABLE [dbo].[Patient]  WITH CHECK ADD  CONSTRAINT [CK_Patient_Status] CHECK  (([status]=(20) OR [status]=(10)))

08/09/2020 13:57:48: 
ALTER TABLE [dbo].[Patient] CHECK CONSTRAINT [CK_Patient_Status]

08/09/2020 13:57:48: 
-------------------------Enum ReportKind--------------------------------------------------------
ALTER TABLE [dbo].[Report]  WITH CHECK ADD  CONSTRAINT [CK_Report_ReportKind] CHECK  (([ReportKind]>=(0) AND [ReportKind]<=(16)))

08/09/2020 13:57:48: 
ALTER TABLE [dbo].[Report] CHECK CONSTRAINT [CK_Report_ReportKind]

08/09/2020 13:57:48: 
--------------------------Enum ReportStatus------------------------------------------------------
ALTER TABLE [dbo].[Report]  WITH CHECK ADD  CONSTRAINT [CK_Report_Status] CHECK  (([status]=(5) OR [status]=(4) OR [status]=(3) OR [status]=(2)))

08/09/2020 13:57:49: 
ALTER TABLE [dbo].[Report] CHECK CONSTRAINT [CK_Report_Status]

08/09/2020 13:57:49: 
--------------------------Enum ReportFormatKind------------------------------------------------------
ALTER TABLE [dbo].[Report]  WITH CHECK ADD  CONSTRAINT [CK_Report_ReportFormatKind] 
CHECK  (([ReportFormatKind]>=(0) AND [ReportFormatKind]<=(30)))

08/09/2020 13:57:49: 
ALTER TABLE [dbo].[Report] CHECK CONSTRAINT [CK_Report_ReportFormatKind]

08/09/2020 13:57:49: 
-------------------------------Enum RecordingKind-----------------------------------------------------------
ALTER TABLE [dbo].[Recording]  WITH CHECK ADD  CONSTRAINT [CK_Recording_RecordingKind] CHECK  (([RecordingKind]>=(0) AND [RecordingKind]<=(15)))

08/09/2020 13:57:49: 
ALTER TABLE [dbo].[Recording] CHECK CONSTRAINT [CK_Recording_RecordingKind]

08/09/2020 13:57:49: 
----------------------------------Enum AnalysisKind-----------------------------------------------------------
ALTER TABLE [dbo].[Analysis]  WITH CHECK ADD  CONSTRAINT [CK_Analysis_AnalysisKind] CHECK  (([AnalysisKind]>=(0) AND [AnalysisKind]<=(6)))

08/09/2020 13:57:49: 
ALTER TABLE [dbo].[Analysis] CHECK CONSTRAINT [CK_Analysis_AnalysisKind]

08/09/2020 13:57:49: 
---------------------------------Enum Priority-------------------------------------------
ALTER TABLE [dbo].[Test]  WITH CHECK ADD  CONSTRAINT [CK_Test_Priority] CHECK  (([Priority]=(1) OR [Priority]=(0)))

08/09/2020 13:57:49: 
ALTER TABLE [dbo].[Test] CHECK CONSTRAINT [CK_Test_Priority]

08/09/2020 13:57:49: 
------------------------Enum Status[External Data transfer]---------------------------------------
--ALTER TABLE [dbo].[ExternalDataTransfer]  WITH CHECK ADD  CONSTRAINT [CK_ExternalDataTransfer_Status] CHECK  (([Status]=(-2147483648) OR [Status]>=(-3) AND [Status]<=(9)))
--GO
--ALTER TABLE [dbo].[ExternalDataTransfer] CHECK CONSTRAINT [CK_ExternalDataTransfer_Status]
--GO
08/09/2020 13:57:49: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMigrateIsNameOnlyFacilities.sql

08/09/2020 13:57:49: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:49: 
-- STEP 1 - Create Function and Update all Facility Names so that they are trimmed at the beginning and end and there is only one character of whitespace between words
IF OBJECT_ID(N'[dbo].[CleanName]', N'FN') IS NOT NULL
    DROP FUNCTION [dbo].[CleanName]

08/09/2020 13:57:50: 
CREATE FUNCTION [dbo].[CleanName](@Name NVARCHAR(256))
RETURNS NVARCHAR(256)
AS
BEGIN
	RETURN LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(@Name,' ','<>'),'><',''),'<>',' ')))
END

08/09/2020 13:57:50: 
UPDATE [dbo].[Facility] SET [Name] = dbo.[CleanName]([Name]);
--STEP 2 - Create a temp table to store a list of Key which will be the facilities we will be keeping
CREATE TABLE #Facilities (
	 [Key] UniqueIdentifier NOT NULL
	,[Name] NVARCHAR(64) 
	,PRIMARY KEY ([Key]));
CREATE UNIQUE NONCLUSTERED INDEX IX_Name_Facilities
ON #Facilities([Name])
--STEP 3 - Insert a distinct list of non name only Facilities into the temp table (If there is a duplicate for some reason we will take the one with the minimum Key)
INSERT INTO #Facilities ([Name],[Key])
SELECT Name, MIN(CAST([Key] AS NVARCHAR(36))) AS [Key]
FROM Facility
WHERE IsOnlyNameValid = 0
GROUP BY Name;
--STEP 4 - Insert a distinct list of name only Facilities where the name does already exist (If there are duplicates then we will take the one with the minimum Key)
INSERT INTO #Facilities ([Name],[Key])
SELECT [Name], MIN(CAST([Key] AS NVARCHAR(36))) AS [Key]
FROM [Facility]
WHERE [IsOnlyNameValid] = 1
AND [Name] NOT IN (
	SELECT [Name] COLLATE SQL_Latin1_General_CP1_CI_AS FROM #Facilities)
GROUP BY [Name];
--STEP 5 - Update all tests that do not have a Facility Key in the #Facilities Table to point to a matched in Key #Facilities Table
UPDATE T
SET T.[FacilityKey] = FF.[Key]
FROM [Test] T
INNER JOIN [Facility] F ON T.[FacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 6 - Update all tests that do not have a Download Facility Key in the #Facilities Table to point to a matched Key in  #Facilities Table
UPDATE T
SET T.[DownloadFacilityKey] = FF.[Key]
FROM [Test] T
INNER JOIN [Facility] F ON T.[DownloadFacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 7 - Update all tests that do not have a Analysis Facility Key in the #Facilities Table to point to a matched Key in  #Facilities Table
UPDATE T
SET T.[AnalysisFacilityKey] = FF.[Key]
FROM [Test] T
INNER JOIN [Facility] F ON T.[AnalysisFacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 8 - Update all patients that do not have a Out Patient Facility Key in the #Facilities Table to point to a matched Key in #Facilities Table
UPDATE P
SET P.[OutPatientFacilityKey] = FF.[Key]
FROM [Patient] P
INNER JOIN [Facility] F ON P.[OutPatientFacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 9 - Update all patients that do not have a In Patient Facility Key in the #Facilities Table to point to a matched Key in #Facilities Table
UPDATE P
SET P.[InPatientFacilityKey] = FF.[Key]
FROM [Patient] P
INNER JOIN [Facility] F ON P.[InPatientFacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 10 - Update all staff members that do not have a Facility Key in the #Facilities Table to point to a matched Key in #Facilities Table
UPDATE S
SET S.[FacilityKey] = FF.[Key]
FROM [StaffMember] S
INNER JOIN [Facility] F ON S.[FacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 11 - Update all External Data Transfer Facilities that do not have a Facility Key in the #Facilities Table to point to a matched Key in #Facilities Table
UPDATE E
SET E.[FacilityKey] = FF.[Key]
FROM [ExternalDataTransfer] E
INNER JOIN [Facility] F ON E.[FacilityKey] = F.[Key]
INNER JOIN [#Facilities] FF ON F.[Name] = FF.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS
WHERE F.[Key] NOT IN (
	SELECT [Key] FROM #Facilities);
--STEP 11 - Delete all redundant Facilities (These are rows in the Facility Table that do not exist in the #Facilities Table
DELETE FROM [Facility]
WHERE [Key] NOT IN (
	SELECT [Key] FROM [#Facilities]);
-- STEP 12 - Create a Unique Constraint on the Facility Name
ALTER TABLE [dbo].[Facility] ADD  CONSTRAINT [IX_FacilityName] UNIQUE NONCLUSTERED 
(
	[Name] ASC
);

08/09/2020 13:57:55: 
--STEP 14 - Update any non null Duplicated Abbreviations to be unique
UPDATE [Facility]
SET [Facility].[Abbreviation] = B.[Abbreviation] + CAST(B.[Rank] AS NVARCHAR(MAX))
FROM [Facility]
INNER JOIN (
	SELECT [Key], [Name], F.[Abbreviation], DENSE_RANK() OVER (PARTITION BY F.[Abbreviation] ORDER BY [Name]) As [Rank]
	FROM Facility F
	INNER JOIN (
		SELECT [Abbreviation], COUNT(1) AS AbreviationCount
		FROM [Facility]
		WHERE Abbreviation IS NOT NULL
		GROUP BY [Abbreviation]
		HAVING COUNT(1) > 1) A ON A.Abbreviation = F.Abbreviation) B ON Facility.[Key] = B.[Key]
--STEP 15 - Drop Temporary #Facilities Table
DROP TABLE #Facilities;
--STEP 16 - Remove redundant IsOnlyNameValid Field
ALTER TABLE [Facility] DROP CONSTRAINT [DF_Facility_IsOnlyNameValid];
ALTER TABLE [Facility] DROP COLUMN [IsOnlyNameValid];
08/09/2020 13:57:55: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddOrganisationTableAndUpdate.sql

08/09/2020 13:57:55: 
----------------------------------------------------------------------------------
-- script to add Organisation then migrate data from organisation field
-- in Patient and Facility
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:55: 
SET ANSI_NULLS ON

08/09/2020 13:57:55: 
SET QUOTED_IDENTIFIER ON

08/09/2020 13:57:55: 
-- Create Organisation Table
CREATE TABLE [dbo].[Organisation](
	[Key] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](128) NOT NULL,
	[CreatedDateTime] [datetime] NOT NULL,
	[UpdatedDateTime] [datetime] NOT NULL,
 CONSTRAINT [PK_Organisation] PRIMARY KEY CLUSTERED 
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:57:55: 
--Add Default values for columns
--Created DateTime
ALTER TABLE [dbo].[Organisation] ADD CONSTRAINT [DF_Organisation_CreatedDateTime] DEFAULT (getutcdate()) FOR [CreatedDateTime]

08/09/2020 13:57:55: 
--Updated DateTime
ALTER TABLE [dbo].[Organisation] ADD CONSTRAINT [DF_Organisation_UpdatedDateTime]  DEFAULT (getutcdate()) FOR [UpdatedDateTime]

08/09/2020 13:57:55: 
--Key
ALTER TABLE [dbo].[Organisation] ADD CONSTRAINT [DF_Organisation_Key]  DEFAULT (newsequentialid()) FOR [Key]

08/09/2020 13:57:55: 
--Create unique index on the Name field
CREATE UNIQUE NONCLUSTERED INDEX [IX_Name] ON [dbo].[Organisation]
(
	[Name] ASC
)ON [PRIMARY]

08/09/2020 13:57:55: 
-- Patient Migration
----------------------------------------------------------------------------------------------------------------------------------
--Add a new column to the Patient table called OrganisationKey
ALTER TABLE [Patient] ADD OrganisationKey UniqueIdentifier NULL

08/09/2020 13:57:55: 
--Add a Foreign Key relationship between Patient.OrganisationKey and Organisation.Key
ALTER TABLE [dbo].[Patient]  ADD CONSTRAINT [FK_Patient_OrganisationKey] FOREIGN KEY([OrganisationKey])
REFERENCES [dbo].[Organisation] ([Key])

08/09/2020 13:57:55: 
--Get a distinct list of Organisation Names from Patient and insert into the Organisation Table (if they do not exist)
INSERT INTO [Organisation](Name)
SELECT Distinct dbo.[CleanName]([Patient].[Organisation])
FROM [Patient]
WHERE (dbo.[CleanName]([Patient].[Organisation]) IS NOT NULL AND dbo.[CleanName]([Patient].[Organisation]) <> '')
AND dbo.[CleanName]([Patient].[Organisation]) NOT IN (
	SELECT [Name] FROM [Organisation])

08/09/2020 13:57:56: 
--Update the OrgansiationKey in Patient by joining across from the Organisation Field in Patient to the Name field in the Organisation table
UPDATE [Patient]
SET [OrganisationKey] = [Organisation].[Key]
FROM [Patient]
INNER JOIN [Organisation] ON [Organisation].[Name] = [Patient].[Organisation]

08/09/2020 13:57:57: 
--Drop the constraint on the Organisation field in the patient table
ALTER TABLE [Patient] DROP CONSTRAINT [CK_Patient_PatientId_Organisation]

08/09/2020 13:57:57: 
-- Drop The Organisation Column from Patient
ALTER TABLE [Patient] DROP COLUMN Organisation

08/09/2020 13:57:57: 
-- Add constraint to OrganisationKey on Patient
ALTER TABLE [dbo].[Patient]  WITH CHECK ADD CONSTRAINT [CK_Patient_PatientId_OrganisationKey] CHECK (([Status]=(10) OR [PatientId] IS NOT NULL AND [OrganisationKey] IS NOT NULL AND len([PatientId])>(0)))

08/09/2020 13:57:57: 
-- End of Patient Migration
----------------------------------------------------------------------------------------------------------------------------------
-- Facility Migration
----------------------------------------------------------------------------------------------------------------------------------
--Add a new column to the Facilities tables called OrganisationKey
ALTER TABLE [Facility] ADD OrganisationKey UniqueIdentifier NULL

08/09/2020 13:57:57: 
--Add a Foreign Key relationship between Facility.OrganisationKey and Organisation.Key
ALTER TABLE [dbo].[Facility]  ADD CONSTRAINT [FK_Facility_OrganisationKey] FOREIGN KEY([OrganisationKey])
REFERENCES [dbo].[Organisation] ([Key])

08/09/2020 13:57:57: 
--Get a distinct list of Organisation Names from Facility and insert into the Organisation Table (if they do not exist)
SELECT Distinct dbo.[CleanName]([Facility].[Organisation])
FROM [Facility]
WHERE (dbo.[CleanName]([Facility].[Organisation]) IS NOT NULL AND dbo.[CleanName]([Facility].[Organisation]) <> '')
AND dbo.[CleanName]([Facility].[Organisation]) NOT IN (
	SELECT [Name] FROM [Organisation])

08/09/2020 13:57:57: 
--Update the OrgansiationKey in Facility by joining across from the Organisation Field in Facility to the Name field in the Organisation table
UPDATE [Facility]
SET [OrganisationKey] = [Organisation].[Key]
FROM [Facility]
INNER JOIN [Organisation] ON [Organisation].[Name] = [Facility].[Organisation]

08/09/2020 13:57:57: 
-- Drop The Organisation Column from Facility
ALTER TABLE [Facility] DROP COLUMN Organisation

08/09/2020 13:57:57: 
-- End of Facility Migration
----------------------------------------------------------------------------------------------------------------------------------
-- Add Updated Trigger to table
CREATE TRIGGER [dbo].[TR_Organisation_UpdatedDateTime] ON [dbo].[Organisation] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Organisation] SET [UpdatedDateTime]=getutcdate() FROM [Organisation] JOIN [deleted] ON [Organisation].[Key] = [deleted].[Key];
END
-- End of script
08/09/2020 13:57:57: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddModifyStaffMemberTable.sql

08/09/2020 13:57:57: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:57: 
------------------ CREATE COLUMNSET and COLUMNSETCOLUMN TABLES
ALTER TABLE StaffMember
ADD [Verified] BIT NULL

08/09/2020 13:57:57: 
-- End of script
08/09/2020 13:57:57: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToMigrateIsNameOnlyStaff.sql

08/09/2020 13:57:57: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:57:57: 
--STEP 1 - Clean Title, Given Name, Family Name and Regenerate FreeTextName
UPDATE StaffMember
SET FreeTextName =  CASE WHEN 
						dbo.CleanName(
							(CASE WHEN dbo.CleanName(Title) IS NULL THEN '' ELSE dbo.CleanName(Title) END) + ' ' +
							(CASE WHEN dbo.CleanName(GivenName) IS NULL THEN '' ELSE dbo.CleanName(GivenName) END) + ' ' +
							(CASE WHEN dbo.CleanName(MiddleInitials) IS NULL THEN '' ELSE dbo.CleanName(MiddleInitials) END) + ' ' +
							(CASE WHEN dbo.CleanName(FamilyName) IS NULL THEN '' ELSE dbo.CleanName(FamilyName) END)) = '' THEN StaffNumber 
						ELSE 
						dbo.CleanName(
							(CASE WHEN dbo.CleanName(Title) IS NULL THEN '' ELSE dbo.CleanName(Title) END) + ' ' +
							(CASE WHEN dbo.CleanName(GivenName) IS NULL THEN '' ELSE dbo.CleanName(GivenName) END) + ' ' +
							(CASE WHEN dbo.CleanName(MiddleInitials) IS NULL THEN '' ELSE dbo.CleanName(MiddleInitials) END) + ' ' +
							(CASE WHEN dbo.CleanName(FamilyName) IS NULL THEN '' ELSE dbo.CleanName(FamilyName) END))END,
						Title = dbo.CleanName(Title),
						GivenName = dbo.CleanName(GivenName),
						FamilyName = dbo.CleanName(FamilyName)
/*STEP 2 - Create a Temporary table that creates a mapping between IsNameOnlyVaild staff members
 on the free text name against one similar record. The goal here is to merge all IsNameOnlyValid staff members
 into one record
*/
SELECT S.FreeTextName, S.[Key] AS OriginalStaffMemeberKey, A.[NewStaffMemberKey] 
INTO #StaffMemberMatchTable
FROM StaffMember S
INNER JOIN (
	SELECT FreeTextName, MAX(CAST([Key] AS NVARCHAR(36))) AS [NewStaffMemberKey]
	FROM StaffMember
	WHERE [IsOnlyFullNameValid] = 1
	GROUP BY FreeTextName)AS A ON A.FreeTextName = S.FreeTextName 
WHERE S.[IsOnlyFullNameValid] = 1
CREATE UNIQUE CLUSTERED INDEX IX_Original_Staff_Memeber_Key
ON #StaffMemberMatchTable([OriginalStaffMemeberKey]);
CREATE NONCLUSTERED INDEX IX_New_Staff_Memeber_Key
ON #StaffMemberMatchTable([NewStaffMemberKey]);
-- STEP 3 - Update Patient Table and map redundant Staff Members
UPDATE P
SET 
	P.ReferringPhysicianKey = (CASE WHEN NewReferringPhysicianKey IS NULL THEN ReferringPhysicianKey ELSE NewReferringPhysicianKey END),
	P.ConsultantKey = (CASE WHEN NewConsultantKey IS NULL THEN ConsultantKey ELSE NewConsultantKey END)
FROM Patient P
LEFT OUTER JOIN (
	SELECT P.[Key], S.NewStaffMemberKey AS NewReferringPhysicianKey
	FROM Patient P
	INNER JOIN #StaffMemberMatchTable S ON P.ReferringPhysicianKey = S.OriginalStaffMemeberKey) PK ON P.[Key] = PK.[Key]
LEFT OUTER JOIN (
	SELECT P.[Key], S.NewStaffMemberKey AS NewConsultantKey
	FROM Patient P
	INNER JOIN #StaffMemberMatchTable S ON P.ConsultantKey = S.OriginalStaffMemeberKey) CK ON P.[Key] = CK.[Key]
-- STEP 4 - Update Test Table and map redundant staff members
UPDATE T
SET
	T.HookupTechnicianKey = (CASE WHEN NewHookupTechnicianKey IS NULL THEN HookupTechnicianKey ELSE NewHookupTechnicianKey END),
	T.DownloadTechnicianKey = (CASE WHEN NewDownloadTechnicianKey IS NULL THEN DownloadTechnicianKey ELSE NewDownloadTechnicianKey END),
	T.AnalysisTechnicianKey = (CASE WHEN NewAnalysisTechnicianKey IS NULL THEN AnalysisTechnicianKey ELSE NewAnalysisTechnicianKey END),
	T.ConsultantKey = (CASE WHEN NewConsultantKey IS NULL THEN ConsultantKey ELSE NewConsultantKey END),
	T.ReferringPhysicianKey = (CASE WHEN NewReferringPhysicianKey IS NULL THEN ReferringPhysicianKey ELSE NewReferringPhysicianKey END),
	T.StressSupervisorKey = (CASE WHEN NewStressSupervisorKey IS NULL THEN StressSupervisorKey ELSE NewStressSupervisorKey END)
FROM Test T
LEFT OUTER JOIN (
	SELECT T.[Key], S.NewStaffMemberKey AS NewHookupTechnicianKey
	FROM Test T
	INNER JOIN #StaffMemberMatchTable S ON T.HookupTechnicianKey = S.OriginalStaffMemeberKey) HK ON T.[Key] = HK.[Key]
LEFT OUTER JOIN (
	SELECT T.[Key], S.NewStaffMemberKey AS NewDownloadTechnicianKey
	FROM Test T
	INNER JOIN #StaffMemberMatchTable S ON T.DownloadTechnicianKey = S.OriginalStaffMemeberKey) DK ON T.[Key] = DK.[Key]
LEFT OUTER JOIN (
	SELECT T.[Key], S.NewStaffMemberKey AS NewAnalysisTechnicianKey
	FROM Test T
	INNER JOIN #StaffMemberMatchTable S ON T.AnalysisTechnicianKey = S.OriginalStaffMemeberKey) AK ON T.[Key] = AK.[Key]
LEFT OUTER JOIN (
	SELECT T.[Key], S.NewStaffMemberKey AS NewConsultantKey
	FROM Test T
	INNER JOIN #StaffMemberMatchTable S ON T.ConsultantKey = S.OriginalStaffMemeberKey) CK ON T.[Key] = CK.[Key]
LEFT OUTER JOIN (
	SELECT T.[Key], S.NewStaffMemberKey AS NewReferringPhysicianKey
	FROM Test T
	INNER JOIN #StaffMemberMatchTable S ON T.ReferringPhysicianKey = S.OriginalStaffMemeberKey) RK ON T.[Key] = RK.[Key]
LEFT OUTER JOIN (
	SELECT T.[Key], S.NewStaffMemberKey AS NewStressSupervisorKey
	FROM Test T
	INNER JOIN #StaffMemberMatchTable S ON T.StressSupervisorKey = S.OriginalStaffMemeberKey) SK ON T.[Key] = SK.[Key]
-- STEP 5 Update Report Signature Table and map redundant staff members
UPDATE R
SET
	R.StaffMemberKey = (CASE WHEN NewReportSignatureStaffMemberKey IS NULL THEN StaffMemberKey ELSE NewReportSignatureStaffMemberKey END)
FROM ReportSignature R
LEFT OUTER JOIN (
	SELECT R.[Key], S.NewStaffMemberKey AS NewReportSignatureStaffMemberKey
	FROM ReportSignature R
	INNER JOIN #StaffMemberMatchTable S ON R.StaffMemberKey = S.OriginalStaffMemeberKey) RSK ON R.[Key] = RSK.[Key]
-- STEP 6 - Delete all Redundant Staff Memebers
DELETE FROM StaffMember
WHERE [IsOnlyFullNameValid] = 1
AND [Key] NOT IN (
	SELECT NewStaffMemberKey FROM #StaffMemberMatchTable)

08/09/2020 13:58:17: 
-- STEP 7 - Update Verified Field (NOT of IsOnlyFullNameValid)
UPDATE StaffMember SET Verified = ~IsOnlyFullNameValid
-- STEP 8 - Drop temporary table
DROP TABLE #StaffMemberMatchTable

08/09/2020 13:58:17: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToRemoveIsOnlyFullNameValidFromStaffMemberTable.sql

08/09/2020 13:58:17: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:58:17: 
ALTER TABLE [dbo].[StaffMember] DROP CONSTRAINT [DF_StaffMember_IsOnlyFullNameValid]

08/09/2020 13:58:17: 
ALTER TABLE [dbo].[StaffMember] DROP COLUMN [IsOnlyFullNameValid]
08/09/2020 13:58:17: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddColumnSetAndColumnTables.sql

08/09/2020 13:58:17: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:58:17: 
------------------ CREATE COLUMNSET and COLUMNSETCOLUMN TABLES
CREATE TABLE [ColumnSet](
	[Key] [uniqueidentifier] ROWGUIDCOL NOT NULL CONSTRAINT [DF_ColumnSet_Key]  DEFAULT (newid()),
	[Name] [nvarchar](64) UNIQUE NOT NULL,
	[Description] [ntext] NULL,
	[DataGridId] [nvarchar](64) NOT NULL,
	[CreatedDateTime] [datetime] NOT NULL DEFAULT (GETDATE()),
	[UpdatedDateTime] [datetime] NOT NULL DEFAULT (GETDATE()),
	[IsPreInstalled] [bit] NOT NULL DEFAULT (0)
CONSTRAINT [PK_ColumnSet] PRIMARY KEY CLUSTERED
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:58:17: 
CREATE TABLE [ColumnSetColumn](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_ColumnSetColumn_Key]  DEFAULT (newid()),
	[ColumnSetKey] [uniqueidentifier] NOT NULL,
	[ColumnId] [nvarchar](64) NOT NULL,
	[Width] [real] NOT NULL,
	[Order] [int] NOT NULL,
	[CreatedDateTime] [datetime] NOT NULL DEFAULT (GETDATE()),
	[UpdatedDateTime] [datetime] NOT NULL DEFAULT (GETDATE()),
	[IsPreInstalled] [bit] NOT NULL DEFAULT (0)
 CONSTRAINT [PK_ColumnSetColumn] PRIMARY KEY CLUSTERED 
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:58:17: 
ALTER TABLE [ColumnSetColumn] ADD CONSTRAINT [FK_ColumnSetColumn_ColumnSetKey] FOREIGN KEY([ColumnSetKey])
	REFERENCES [ColumnSet] ([Key])

08/09/2020 13:58:17: 
-- End of script
08/09/2020 13:58:17: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddv10FilterTable.sql

08/09/2020 13:58:17: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:58:17: 
------------------ CREATE FILTER TABLE
CREATE TABLE [Filter](
	[Key] [uniqueidentifier] ROWGUIDCOL NOT NULL CONSTRAINT [DF_Filter_Key]  DEFAULT (newid()),
	[Name] [nvarchar](64) UNIQUE NOT NULL,
	[Description] [ntext] NULL,
	[DataGridId] [nvarchar](64) NOT NULL,
	[Criteria] [nvarchar](512) NOT NULL,
	[CreatedDateTime] [datetime] NOT NULL DEFAULT (GETDATE()),
	[UpdatedDateTime] [datetime] NULL,
	[IsPreInstalled] [bit] NOT NULL DEFAULT (0),
	[SortColumnId] [nvarchar](64) NULL,
	[SortOrder] [tinyint] NOT NULL DEFAULT (0)
CONSTRAINT [PK_Filter] PRIMARY KEY CLUSTERED
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:58:17: 
-- End of script
08/09/2020 13:58:17: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddRoleDataGridTable.sql

08/09/2020 13:58:17: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:58:17: 
------------------ CREATE COLUMNSET and COLUMNSETCOLUMN TABLES
CREATE TABLE [RoleDataGrid](
	[Key] [uniqueidentifier] ROWGUIDCOL NOT NULL CONSTRAINT [DF_RoleDataGrid_Key]  DEFAULT (newid()),
	[RoleKey] [uniqueidentifier] NOT NULL,
	[Caption] [nvarchar](64) NOT NULL,
	[DataGridId] [nvarchar](64) NOT NULL,
	[FilterKey]  [uniqueidentifier] NOT NULL,
	[ColumnSetKey] [uniqueidentifier] NOT NULL,
	[Order] [int] NOT NULL
CONSTRAINT [PK_RoleDataGrid] PRIMARY KEY CLUSTERED
(
	[Key] ASC
) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 13:58:17: 
ALTER TABLE [RoleDataGrid] ADD CONSTRAINT [FK_RoleDataGrid_RoleKey] FOREIGN KEY([RoleKey])
	REFERENCES [Role] ([Key])

08/09/2020 13:58:17: 
ALTER TABLE [RoleDataGrid] ADD CONSTRAINT [FK_RoleDataGrid_FilterKey] FOREIGN KEY([FilterKey])
	REFERENCES [Filter] ([Key])

08/09/2020 13:58:17: 
ALTER TABLE [RoleDataGrid] ADD CONSTRAINT [FK_RoleDataGrid_ColumnSetKey] FOREIGN KEY([ColumnSetKey])
	REFERENCES [ColumnSet] ([Key])

08/09/2020 13:58:17: 
-- End of script
08/09/2020 13:58:17: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToStandardiseCreatedUpdatedDateTime.sql

08/09/2020 13:58:17: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:58:17: 
---------------------- CREATED / UPDATED DATETIME COLUMNS
-- RecordInUse table
ALTER TABLE [RecordInUse] ADD [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [RecordInUse] ADD [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:17: 
ALTER TABLE [RecordInUse] ADD CONSTRAINT [DF_RecordInUse_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [RecordInUse] ADD CONSTRAINT [DF_RecordInUse_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:17: 
-- Test table
DROP INDEX [IX_TestCreatedDateTime] ON [Test];
ALTER TABLE [Test] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [Test] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:18: 
ALTER TABLE [Test] ADD CONSTRAINT [DF_Test_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [Test] ADD CONSTRAINT [DF_Test_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];
CREATE INDEX [IX_TestCreatedDateTime] ON [Test]([CreatedDateTime] DESC) ON [PRIMARY]

08/09/2020 13:58:18: 
-- StaffMember table
ALTER TABLE [StaffMember] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [StaffMember] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:18: 
ALTER TABLE [StaffMember] ADD CONSTRAINT [DF_Staff_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [StaffMember] ADD CONSTRAINT [DF_Staff_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:18: 
-- ReportSignature table
ALTER TABLE [ReportSignature] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [ReportSignature] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:18: 
ALTER TABLE [ReportSignature] ADD CONSTRAINT [DF_ReportSignature_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [ReportSignature] ADD CONSTRAINT [DF_ReportSignature_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:18: 
-- Report table
ALTER TABLE [Report] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [Report] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:24: 
ALTER TABLE [Report] ADD CONSTRAINT [DF_Report_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [Report] ADD CONSTRAINT [DF_Report_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:24: 
-- Patient table
ALTER TABLE [Patient] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [Patient] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:24: 
ALTER TABLE [Patient] ADD CONSTRAINT [DF_Patient_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [Patient] ADD CONSTRAINT [DF_Patient_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:24: 
-- FileStore table
ALTER TABLE [FileStore] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [FileStore] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:32: 
ALTER TABLE [FileStore] ADD CONSTRAINT [DF_FileStore_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [FileStore] ADD CONSTRAINT [DF_FileStore_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:32: 
-- Case table
ALTER TABLE [Case] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [Case] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:32: 
ALTER TABLE [Case] ADD CONSTRAINT [DF_Case_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [Case] ADD CONSTRAINT [DF_Case_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:32: 
-- TorridonAnalyserUserSetup table
ALTER TABLE [TorridonAnalyserUserSetup] ALTER COLUMN [CreatedDateTime] datetime NOT NULL;
ALTER TABLE [TorridonAnalyserUserSetup] ALTER COLUMN [UpdatedDateTime] datetime NOT NULL;

08/09/2020 13:58:32: 
ALTER TABLE [TorridonAnalyserUserSetup] ADD CONSTRAINT [DF_TorridonAnalyserUserSetup_CreatedDateTime] DEFAULT getutcdate() FOR [CreatedDateTime];
ALTER TABLE [TorridonAnalyserUserSetup] ADD CONSTRAINT [DF_TorridonAnalyserUserSetup_UpdatedDateTime] DEFAULT getutcdate() FOR [UpdatedDateTime];

08/09/2020 13:58:32: 
-- Facility table
ALTER TABLE [Facility] ADD [CreatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Facility_CreatedDateTime] DEFAULT getutcdate();
ALTER TABLE [Facility] ADD [UpdatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_Facility_UpdatedDateTime] DEFAULT getutcdate();

08/09/2020 13:58:32: 
-- HolterTest table
ALTER TABLE [HolterTest] ADD [CreatedDateTime] datetime NOT NULL CONSTRAINT [DF_HolterTest_CreatedDateTime] DEFAULT getutcdate();
ALTER TABLE [HolterTest] ADD [UpdatedDateTime] datetime NOT NULL CONSTRAINT [DF_HolterTest_UpdatedDateTime] DEFAULT getutcdate();

08/09/2020 13:58:32: 
--------------------------- CREATE THE TRIGGERS TO AUTOMATICALLY UPDATE THE UPDATED DATE TIME
--------- ADD UPDATEDATETIME TRIGGER TO RECORDINUSE TABLE
-- drop any existing record in use update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_RecordInUse_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_RecordInUse_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the RecordInUse table whenever anyone updates a record in use record
CREATE TRIGGER [TR_RecordInUse_UpdatedDateTime] ON [RecordInUse] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [RecordInUse] SET [UpdatedDateTime]=getutcdate() FROM [RecordInUse] JOIN [deleted] ON [RecordInUse].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO FACILITY TABLE
-- drop any existing facility update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Facility_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Facility_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Facility table whenever anyone updates a facility record
CREATE TRIGGER [TR_Facility_UpdatedDateTime] ON [Facility] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Facility] SET [UpdatedDateTime]=getutcdate() FROM [Facility] JOIN [deleted] ON [Facility].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO PATIENT TABLE
-- drop any existing patient update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Patient_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Patient_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Patient table whenever anyone updates a patient record
CREATE TRIGGER [TR_Patient_UpdatedDateTime] ON [Patient] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Patient] SET [UpdatedDateTime]=getutcdate() FROM [Patient] JOIN [deleted] ON [Patient].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO TEST TABLE
-- drop any existing test update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Test_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Test_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Test table whenever anyone updates a test record
CREATE TRIGGER [TR_Test_UpdatedDateTime] ON [Test] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Test] SET [UpdatedDateTime]=getutcdate() FROM [Test] JOIN [deleted] ON [Test].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO ROLE TABLE
-- drop any existing user group update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Role_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Role_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Role table whenever anyone updates a role record
CREATE TRIGGER [TR_Role_UpdatedDateTime] ON [Role] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Role] SET [UpdatedDateTime]=getutcdate() FROM [Role] JOIN [deleted] ON [Role].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO COLUMNSET AND COLUMNSETCOLUMN TABLE
-- drop any existing ColumnSet update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_ColumnSet_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_ColumnSet_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the ColumnSet table whenever anyone updates a ColumnSet record
CREATE TRIGGER [TR_ColumnSet_UpdatedDateTime] ON [ColumnSet] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [ColumnSet] SET [UpdatedDateTime]=getutcdate() FROM [ColumnSet] JOIN [deleted] ON [ColumnSet].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
-- drop any existing ColumnSetColumn update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_ColumnSetColumn_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_ColumnSetColumn_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the ColumnSetColumn table whenever anyone updates a ColumnSetColumn record
CREATE TRIGGER [TR_ColumnSetColumn_UpdatedDateTime] ON [ColumnSetColumn] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [ColumnSetColumn] SET [UpdatedDateTime]=getutcdate() FROM [ColumnSetColumn] JOIN [deleted] ON [ColumnSetColumn].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO FILTER TABLE
-- drop any existing Filter update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Filter_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Filter_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Filter table whenever anyone updates a Filter record
CREATE TRIGGER [TR_Filter_UpdatedDateTime] ON [Filter] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Filter] SET [UpdatedDateTime]=getutcdate() FROM [Filter] JOIN [deleted] ON [Filter].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO TORRIDONANALYSERUSERSETUP TABLE
-- drop any existing torridon user setup update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_TorridonAnalyserUserSetup_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_TorridonAnalyserUserSetup_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the TorridonAnalyserUserSetup table whenever anyone updates a torridon user setup record
CREATE TRIGGER [TR_TorridonAnalyserUserSetup_UpdatedDateTime] ON [TorridonAnalyserUserSetup] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [TorridonAnalyserUserSetup] SET [UpdatedDateTime]=getutcdate() FROM [TorridonAnalyserUserSetup] JOIN [deleted] ON [TorridonAnalyserUserSetup].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO STAFFMEMBER TABLE
-- drop any existing staff member update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_StaffMember_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_StaffMember_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the StaffMember table whenever anyone updates a staff member record
CREATE TRIGGER [TR_StaffMember_UpdatedDateTime] ON [StaffMember] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [StaffMember] SET [UpdatedDateTime]=getutcdate() FROM [StaffMember] JOIN [deleted] ON [StaffMember].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO REPORT TABLE
-- drop any existing report update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Report_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Report_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Report table whenever anyone updates a report record
CREATE TRIGGER [TR_Report_UpdatedDateTime] ON [Report] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Report] SET [UpdatedDateTime]=getutcdate() FROM [Report] JOIN [deleted] ON [Report].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO REPORTSIGNATURE TABLE
-- drop any existing report signature update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_ReportSignature_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_ReportSignature_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the ReportSignature table whenever anyone updates a report signature record
CREATE TRIGGER [TR_ReportSignature_UpdatedDateTime] ON [ReportSignature] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [ReportSignature] SET [UpdatedDateTime]=getutcdate() FROM [ReportSignature] JOIN [deleted] ON [ReportSignature].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO RECORDING TABLE
-- drop any existing recording update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Recording_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Recording_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Recording table whenever anyone updates a recording record
CREATE TRIGGER [TR_Recording_UpdatedDateTime] ON [Recording] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Recording] SET [UpdatedDateTime]=getutcdate() FROM [Recording] JOIN [deleted] ON [Recording].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO ANALYSIS TABLE
-- drop any existing analysis update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Analysis_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Analysis_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Analysis table whenever anyone updates an analysis record
CREATE TRIGGER [TR_Analysis_UpdatedDateTime] ON [Analysis] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Analysis] SET [UpdatedDateTime]=getutcdate() FROM [Analysis] JOIN [deleted] ON [Analysis].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO FILESTORE TABLE
-- drop any existing file update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_FileStore_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_FileStore_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the File table whenever anyone updates an file record
CREATE TRIGGER [TR_FileStore_UpdatedDateTime] ON [FileStore] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [FileStore] SET [UpdatedDateTime]=getutcdate() FROM [FileStore] JOIN [deleted] ON [FileStore].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO EXTERNALDATATRANSFER TABLE
-- drop any existing external data transfer update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_ExternalDataTransfer_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_ExternalDataTransfer_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the ExternalDataTransfer table whenever anyone updates an external data transfer record
CREATE TRIGGER [TR_ExternalDataTransfer_UpdatedDateTime] ON [ExternalDataTransfer] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [ExternalDataTransfer] SET [UpdatedDateTime]=getutcdate() FROM [ExternalDataTransfer] JOIN [deleted] ON [ExternalDataTransfer].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO CASE TABLE
-- drop any existing case update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_Case_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_Case_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Case table whenever anyone updates an case record
CREATE TRIGGER [TR_Case_UpdatedDateTime] ON [Case] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [Case] SET [UpdatedDateTime]=getutcdate() FROM [Case] JOIN [deleted] ON [Case].[Key] = [deleted].[Key];
END

08/09/2020 13:58:32: 
--------- ADD UPDATEDATETIME TRIGGER TO HOLTER TEST TABLE
-- drop any existing holter test update date time trigger
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'TR_HolterTest_UpdatedDateTime')
BEGIN
	DROP TRIGGER [TR_HolterTest_UpdatedDateTime]
END

08/09/2020 13:58:32: 
-- create a trigger to automatically update the UpdateDateTime on the Holter test table whenever anyone updates an case record
CREATE TRIGGER [TR_HolterTest_UpdatedDateTime] ON [HolterTest] AFTER UPDATE AS            
BEGIN
	SET NOCOUNT ON;
    UPDATE [HolterTest] SET [UpdatedDateTime]=getutcdate() FROM [HolterTest] JOIN [deleted] ON [HolterTest].[Key] = [deleted].[Key];
END
08/09/2020 13:58:32: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToUpdateRelatedObjectTable.sql

08/09/2020 13:58:32: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondAuditData]

08/09/2020 13:58:32: 
------------------- UPDATING THE RELATEDOBJECT TABLE
IF NOT EXISTS (
  SELECT * 
  FROM   sys.columns 
  WHERE  object_id = OBJECT_ID(N'[dbo].[RelatedObject]') 
         AND name = 'Key'
)
ALTER TABLE [RelatedObject] ADD [Key] UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID();

08/09/2020 13:58:53: 
IF NOT EXISTS (
  SELECT * 
  FROM   sys.columns 
  WHERE  object_id = OBJECT_ID(N'[dbo].[RelatedObject]') 
         AND name = 'CreatedDateTime'
)
ALTER TABLE [RelatedObject] ADD [CreatedDateTime] DATETIME  NOT NULL DEFAULT GETUTCDATE();

08/09/2020 13:58:53: 
IF NOT EXISTS (
  SELECT * 
  FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
  WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_NAME = 'RelatedObject'
)
ALTER TABLE [RelatedObject] ADD CONSTRAINT pk_Key PRIMARY KEY ([Key])
08/09/2020 13:59:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToAddRemoveMiscellaneousIndexes.sql

08/09/2020 13:59:04: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
-- Script will add / remove indexes
USE [LomondClinicalData]

08/09/2020 13:59:04: 
CREATE NONCLUSTERED INDEX [IX_ExpiryTime_LoginKind] ON [dbo].[Session]
(
	[ExpiryTime] ASC,
	[LoginKind] ASC
)

08/09/2020 13:59:04: 
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Test]') AND name = N'IX_PatientKey')
CREATE NONCLUSTERED INDEX [IX_PatientKey] ON [dbo].[Test]
(
	[PatientKey] ASC
)
08/09/2020 13:59:05: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToDropAspNetTablesAndRelatedObjects.sql

08/09/2020 13:59:05: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:59:05: 
-- Delete all triggers related to AspNet
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'Case_AspNet_SqlCacheNotification_Trigger')
BEGIN
	DROP TRIGGER [Case_AspNet_SqlCacheNotification_Trigger]
END

08/09/2020 13:59:05: 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'Facility_AspNet_SqlCacheNotification_Trigger')
BEGIN
	DROP TRIGGER [Facility_AspNet_SqlCacheNotification_Trigger]
END

08/09/2020 13:59:05: 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'Patient_AspNet_SqlCacheNotification_Trigger')
BEGIN
	DROP TRIGGER [Patient_AspNet_SqlCacheNotification_Trigger]
END

08/09/2020 13:59:05: 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'Signature_AspNet_SqlCacheNotification_Trigger')
BEGIN
	DROP TRIGGER [Signature_AspNet_SqlCacheNotification_Trigger]
END

08/09/2020 13:59:05: 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'StaffMember_AspNet_SqlCacheNotification_Trigger')
BEGIN
	DROP TRIGGER [StaffMember_AspNet_SqlCacheNotification_Trigger]
END

08/09/2020 13:59:05: 
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND name = 'Test_AspNet_SqlCacheNotification_Trigger')
BEGIN
	DROP TRIGGER [Test_AspNet_SqlCacheNotification_Trigger]
END

08/09/2020 13:59:05: 
-- Delete all AspNet Tables.
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_WebEvent_Events]')       
)
DROP TABLE [aspnet_WebEvent_Events];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_SchemaVersions]')       
)
DROP TABLE [aspnet_SchemaVersions];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[AspNet_SqlCacheTablesForChangeNotification]')       
)
DROP TABLE [AspNet_SqlCacheTablesForChangeNotification];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_Profile]')       
)
DROP TABLE [aspnet_Profile];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_PersonalizationPerUser]')       
)
DROP TABLE [aspnet_PersonalizationPerUser];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_UsersInRoles]')       
)
DROP TABLE [aspnet_UsersInRoles];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_PersonalizationAllUsers]')       
)
DROP TABLE [aspnet_PersonalizationAllUsers];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_Paths]')       
)
DROP TABLE [aspnet_Paths];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_Roles]')       
)
DROP TABLE [aspnet_Roles];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_Membership]')       
)
DROP TABLE [aspnet_Membership];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_Users]')       
)
DROP TABLE [aspnet_Users];

08/09/2020 13:59:05: 
IF EXISTS (
  SELECT * 
  FROM   sys.all_Objects 
  WHERE  object_id = OBJECT_ID(N'[dbo].[aspnet_Applications]')       
)
DROP TABLE [aspnet_Applications];

08/09/2020 13:59:05: 
-- Delete all views related to AspNet
DECLARE @aspnet_view_names NVARCHAR(MAX)
SELECT @aspnet_view_names = COALESCE(@aspnet_view_names + ', ' , '') + [name] FROM Sys.Objects WHERE [type] = 'V' AND [is_ms_shipped] = 0 AND [name] LIKE 'vw_aspnet%'
IF (@aspnet_view_names <> '')
EXEC ('DROP VIEW '+ @aspnet_view_names)

08/09/2020 13:59:05: 
-- Delete all Procedures related to AspNet
DECLARE @aspnet_procedure_names NVARCHAR(MAX)
SELECT @aspnet_procedure_names = COALESCE(@aspnet_procedure_names + ', ' , '') + [name] FROM Sys.Objects WHERE [type] = 'P' AND [is_ms_shipped] = 0 AND [name] LIKE 'aspnet%'
IF (@aspnet_procedure_names <> '')
EXEC ('DROP PROCEDURE '+ @aspnet_procedure_names)
08/09/2020 13:59:05: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToUpdateTestTypeNames.sql

08/09/2020 13:59:05: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 13:59:05: 
UPDATE [Test] SET [TestTypeName] = 'Holter' WHERE [TestKind] = 1;
UPDATE [Test] SET [TestTypeName] = 'Em repouso' WHERE [TestKind] = 2; 
UPDATE [Test] SET [TestTypeName] = 'Esforço' WHERE [TestKind] = 3; 
UPDATE [Test] SET [TestTypeName] = 'MAPA' WHERE [TestKind] = 4; 
UPDATE [Test] SET [TestTypeName] = 'Ritmo' WHERE [TestKind] = 5; 

08/09/2020 13:59:08: 
-- end of SQL Script

08/09/2020 13:59:08: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToUpdateAuditEvents.sql

08/09/2020 13:59:08: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondAuditData]

08/09/2020 13:59:08: 
-- update case audit events
UPDATE [AuditTrail] SET [Event] = 'Processo adicionado' WHERE [EventId] = '{98fc0f3a-1523-4917-ba13-7f6aaad281de}';
UPDATE [AuditTrail] SET [Event] = 'Processo editado' WHERE [EventId] = '{653f1a3a-9f66-4cb5-9452-2c8c80ee2928}';
UPDATE [AuditTrail] SET [Event] = 'Processo apagado' WHERE [EventId] = '{7710d9e3-47df-4fd0-9ce0-b1e004156015}';

08/09/2020 13:59:09: 
-- update patient audit events
UPDATE [AuditTrail] SET [Event] = 'Paciente Adicionado' WHERE [EventId] = '{517d13e8-5ff5-4674-be5a-cfee27deb00b}';
UPDATE [AuditTrail] SET [Event] = 'Paciente visualizado' WHERE [EventId] = '{d69bebb8-e735-4e85-b9e3-7bb1c3a9c0e1}';
UPDATE [AuditTrail] SET [Event] = 'Paciente editado' WHERE [EventId] = '{89c99dbd-9144-4995-957f-8a0ded35f44b}';
UPDATE [AuditTrail] SET [Event] = 'Paciente apagado' WHERE [EventId] = '{a98d8eac-7753-4b20-b156-4190fc5e096b}';
UPDATE [AuditTrail] SET [Event] = 'Bloqueio do paciente substituído' WHERE [EventId] = '{eab1cdb4-9764-4bca-abff-76fb208c792d}';

08/09/2020 13:59:10: 
UPDATE [AuditTrail] SET [Event] = 'Relatório adicionado ao teste' WHERE [EventId] = '{7b9ac282-8954-412f-93c1-3f49d22af1b1}';
UPDATE [AuditTrail] SET [Event] = 'Relatório apagado' WHERE [EventId] = '{af54a9c6-4588-4f32-b5c2-939c69233d6e}';
UPDATE [AuditTrail] SET [Event] = 'Relatório visto/impresso' WHERE [EventId] = '{1ee2c482-cb81-49eb-97b7-41835ef21f12}';
UPDATE [AuditTrail] SET [Event] = 'Relatório visto/impresso' WHERE [EventId] = '{4b45d18e-fd74-412c-a2a6-79b2cc44eda8}';
UPDATE [AuditTrail] SET [Event] = 'Relatório exportado' WHERE [EventId] = '{3b48d211-0c25-42c4-9a76-979b35de1036}';
UPDATE [AuditTrail] SET [Event] = 'Relatório visto/impresso' WHERE [EventId] = '{89edb0d7-88d5-4408-b9c9-bbef9b8c7435}';
UPDATE [AuditTrail] SET [Event] = 'Relatório assinado (confirmado)' WHERE [EventId] = '{903bcda1-2baa-4b20-b756-114ac35a2949}';
UPDATE [AuditTrail] SET [Event] = 'Relatório assinado (reconfirmado)' WHERE [EventId] = '{ee6ef7eb-5160-407e-8e87-c384fa33b5c8}';
UPDATE [AuditTrail] SET [Event] = 'Relatório assinado (recusado)' WHERE [EventId] = '{9aa61b08-9aea-4cad-a448-cf1d407be78e}';
UPDATE [AuditTrail] SET [Event] = 'Anotações/comentários do relatório editados' WHERE [EventId] = '{4c6f8284-d6c2-4d27-a036-1ec7fe0e6396}';

08/09/2020 13:59:12: 
UPDATE [AuditTrail] SET [Event] = 'Equipe adicionada' WHERE [EventId] = '{49305742-f2aa-41ff-a060-e2f6eba6a4ad}';
UPDATE [AuditTrail] SET [Event] = 'Equipe editada' WHERE [EventId] = '{00ad77c5-859a-4ad8-be87-4ecdb897ad80}';
UPDATE [AuditTrail] SET [Event] = 'Equipe registada' WHERE [EventId] = '{9ce84398-5b67-439b-9923-10f5437ff193}';
UPDATE [AuditTrail] SET [Event] = 'Tentativa de login da equipe falhou' WHERE [EventId] = '{92951bad-da5a-4b77-aa3a-ef8b5a859325}';
UPDATE [AuditTrail] SET [Event] = 'Equipe desconectada' WHERE [EventId] = '{d9b100d1-1240-4f46-aab8-b7da33afd3cd}';

08/09/2020 13:59:13: 
UPDATE [AuditTrail] SET [Event] = 'Teste na fila para ser enviado ao local remoto' WHERE [EventId] = '{d0472b03-0492-460c-888c-0057aec3b4c6}';
UPDATE [AuditTrail] SET [Event] = 'Teste enviado ao local remoto' WHERE [EventId] = '{a7bf8cf3-738e-4bfe-8bb9-c07bc8a76614}';
UPDATE [AuditTrail] SET [Event] = 'Teste recebido de local remoto' WHERE [EventId] = '{3d0604de-8e3d-4dca-9d19-828b1d445b65}';
UPDATE [AuditTrail] SET [Event] = 'Relatório na fila para ser devolvido pelo local remoto' WHERE [EventId] = '{51afaec6-ac75-4da3-9338-fc074b53a347}';
UPDATE [AuditTrail] SET [Event] = 'Relatório devolvido pelo local remoto' WHERE [EventId] = '{d0d3b16e-2ad5-4664-91f6-f4d913961864}';
UPDATE [AuditTrail] SET [Event] = 'Erro de transferência do teste entre este local e o local remoto' WHERE [EventId] = '{f3067e25-c3e8-4f7f-8cab-886bbf8e3465}';

08/09/2020 13:59:14: 
-- cannot find out what this event id signifies. recent versions of sentinel do not create it.
DELETE [RelatedObject] FROM [RelatedObject] INNER JOIN [AuditTrail] ON [AuditTrail].[Key]=[RelatedObject].[AuditTrailKey] WHERE [AuditTrail].[EventId]='{6fc3f8ab-8284-4d10-aaee-6787a595b8c1}';

08/09/2020 13:59:14: 
DELETE FROM [AuditTrail] WHERE [EventId] = '{6fc3f8ab-8284-4d10-aaee-6787a595b8c1}';

08/09/2020 13:59:14: 
UPDATE [AuditTrail] SET [Event] = 'Registrador do teste configurado' WHERE [EventId] = '{00d3f559-ad92-4a62-b23a-99c2a9ae5030}';
UPDATE [AuditTrail] SET [Event] = 'Download do registo do teste do dispositivo' WHERE [EventId] = '{ce5b8951-516c-4610-bea8-3530a479fc88}';
UPDATE [AuditTrail] SET [Event] = 'Teste adicionado' WHERE [EventId] = '{b16c48a0-c659-4acb-8836-dc52cf03cc86}';
UPDATE [AuditTrail] SET [Event] = 'Teste editado' WHERE [EventId] = '{2c6934a4-9aaa-4c42-8c81-026036a0f829}';
UPDATE [AuditTrail] SET [Event] = 'Teste apagado' WHERE [EventId] = '{917d8b66-f046-4864-adb6-0790334b438a}';
UPDATE [AuditTrail] SET [Event] = 'Teste concluído' WHERE [EventId] = '{853f25b0-f233-4009-baf4-76f11a55bda5}';
UPDATE [AuditTrail] SET [Event] = 'Teste visualizado' WHERE [EventId] = '{c5436e3e-0112-461d-9b5c-4f9e20914f65}';
UPDATE [AuditTrail] SET [Event] = 'Registro do teste apagado' WHERE [EventId] = '{803fe793-bb30-4964-8885-ee60f8cf5990}';
UPDATE [AuditTrail] SET [Event] = 'Registro de teste adicionado ao teste' WHERE [EventId] = '{9d43c02e-2270-46ac-9ac1-a566fb23a36a}';
UPDATE [AuditTrail] SET [Event] = 'Análise do teste apagada' WHERE [EventId] = '{4b32ad4d-97ff-49e9-b833-c0ee8a18b746}';
UPDATE [AuditTrail] SET [Event] = 'Registro do teste analisado' WHERE [EventId] = '{fe14fd43-5905-4350-9e4f-9ba461e659a7}';
UPDATE [AuditTrail] SET [Event] = 'Bloqueio do teste substituído' WHERE [EventId] = '{8c39c579-2ee2-406d-a3f7-429cdf7471b6}';
UPDATE [AuditTrail] SET [Event] = 'Falha do download do registo do teste do dispositivo ' WHERE [EventId] = '{72e0f5af-f11b-4b6e-b683-daa2fcc42dd1}';
UPDATE [AuditTrail] SET [Event] = 'Paciente do teste identificado' WHERE [EventId] = '{6dc1f0c2-c9fe-445c-81bc-02c1c6717ab1}';
UPDATE [AuditTrail] SET [Event] = 'Teste movido para outro paciente' WHERE [EventId] = '{d92c9bc4-34d0-4d9d-a236-86fc87ebbb7f}';
UPDATE [AuditTrail] SET [Event] = 'Teste importado' WHERE [EventId] = '{c7aa4953-5e96-49bb-a787-8a35ce47cbee}';
UPDATE [AuditTrail] SET [Event] = 'Teste exportado' WHERE [EventId] = '{9d2ce741-5e0f-4f0e-b831-3dce9a3fa6b3}';
UPDATE [AuditTrail] SET [Event] = 'Teste importado' WHERE [EventId] = '{0b15cb11-4e9b-4bd2-9308-754ef03fcc2c}';
UPDATE [AuditTrail] SET [Event] = 'Análise do teste editada' WHERE [EventId] = '{F6858DC0-BF43-4741-A123-4D86B449A532}';

08/09/2020 13:59:19: 
UPDATE [AuditTrail] SET [Event] = 'Relatório assinado (confirmado)' WHERE [EventId] = '{afba0965-219e-4cea-8704-2005dc46f5a1}';
UPDATE [AuditTrail] SET [Event] = 'ReportReconfirm' WHERE [EventId] = '{0c71d755-3615-48a7-87fa-cc45760baf76}';
UPDATE [AuditTrail] SET [Event] = 'Relatório assinado (recusado)' WHERE [EventId] = '{23ccf4cd-9523-420a-8fec-a8785a13e2c9}';
UPDATE [AuditTrail] SET [Event] = 'Relatório visto/impresso' WHERE [EventId] = '{803fe793-bb30-4964-8885-ee60f8cf5990}';

08/09/2020 13:59:20: 
UPDATE [AuditTrail] SET [Event] = 'Apagar vários registos e análises' WHERE [EventId] = '{3f83972c-2262-4f3c-9a24-69518b57152e}';

08/09/2020 13:59:20: 
UPDATE [AuditTrail] SET [Event] = 'Referência criada' WHERE [EventId] = '{20dc89f9-d715-457e-ae43-ebdbfd914911}';
UPDATE [AuditTrail] SET [Event] = 'OrderUpdated' WHERE [EventId] = '{63023e96-fb77-49f9-b8bc-7f0a00bef570}';
UPDATE [AuditTrail] SET [Event] = 'Referência cancelada' WHERE [EventId] = '{2a0f23fe-b4a7-4530-b4a7-34c6749b1abc}';

08/09/2020 13:59:20: 
UPDATE [AuditTrail] SET [Event] = 'Configuração do usuário do PathfinderSL adicionada' WHERE [EventId] = '{74cd66e7-1b34-4898-83f3-bfa1caf8dea1}';
UPDATE [AuditTrail] SET [Event] = 'Configuração do usuário do PathfinderSL editada' WHERE [EventId] = '{120cd618-5302-4fe8-91dd-6359810eb19e}';
UPDATE [AuditTrail] SET [Event] = 'Configuração do usuário do PathfinderSL apagada' WHERE [EventId] = '{9a22ce91-3b15-47fd-bd42-7f9911426f5e}';

08/09/2020 13:59:21: 
UPDATE [AuditTrail] SET [Event] = 'Protocolo MAPA adicionado' WHERE [EventId] = '{053ea7cc-e83b-481e-8b81-a5cef2e4a133}';
UPDATE [AuditTrail] SET [Event] = 'Protocolo MAPA editado' WHERE [EventId] = '{e3f4ec75-bb61-444d-babb-d803b6f620d4}';

08/09/2020 13:59:21: 
ALTER TABLE [AuditTrail] DROP COLUMN [EventId];

08/09/2020 13:59:21: 
-- end of SQL Script

08/09/2020 13:59:21: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToInsertInitialRoleDataIntoLomondClinicalData.sql

08/09/2020 13:59:21: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
-- SQL script to insert initial data into the Sentinel databases
-- text between $ signs represent keys which will be substituted with translations
USE [LomondClinicalData]

08/09/2020 13:59:21: 
SET ANSI_NULLS ON

08/09/2020 13:59:21: 
SET QUOTED_IDENTIFIER ON

08/09/2020 13:59:21: 
-- all tests column set
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Todos os Testes', 'Conjunto de colunas de todos os testes padrão', 'AllTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Patient_Id',									100,	1,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Patient_BirthDate',							75,		3,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_StatusPickList',						75,		5,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_Duration',								50,		6,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_DeclinedReportCount (Icons)',			1,		9,	1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_Download_Facility_Name',				100,	10, 1),
(newid(), '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 'Test_TypePickList (Icons)',					1,		11, 1)

08/09/2020 13:59:21: 
-- abp configured column set
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('6528F76C-F929-45AE-95BB-608A8D497BE0', 'Testes configurados de MAPA', 'Conjunto de colunas de testes configurados de MAPA padrão', 'AbpTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '6528F76C-F929-45AE-95BB-608A8D497BE0', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '6528F76C-F929-45AE-95BB-608A8D497BE0', 'Patient_Id',									100,	1,	1),
(newid(), '6528F76C-F929-45AE-95BB-608A8D497BE0', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '6528F76C-F929-45AE-95BB-608A8D497BE0', 'Patient_BirthDate',							50,		3,	1),
(newid(), '6528F76C-F929-45AE-95BB-608A8D497BE0', 'Test_CreatedDateTime',						50,		4,	1)

08/09/2020 13:59:21: 
-- abp pending review
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Revisão de testes MAPA pendentes', 'Conjunto de colunas com revisão de testes MAPA padrão pendentes', 'AbpTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Patient_Id',									100,	1,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Patient_BirthDate',							75,		3,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_Duration',								50,		6,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- abp complete and confirmed tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Testes concluídos ou confirmados de MAPA', 'Conjunto de colunas de testes concluídos ou confirmados de MAPA padrão', 'AbpTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Patient_Id',									100,	1,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Patient_BirthDate',							75,		3,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_Duration',								50,		6,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- abp declined tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Testes recusados de MAPA', 'Conjunto de colunas de testes recusados de MAPA padrão', 'AbpTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Patient_Id',									100,	1,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Patient_BirthDate',							75,		3,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_StatusPickList',						75,		5,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_Duration',								50,		6,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- abp all tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Todos os testes de MAPA', 'Conjunto de colunas de todos os testes de MAPA padrão', 'AbpTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Patient_Id',									100,	1,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Patient_BirthDate',							75,		3,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_StatusPickList',						75,		5,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_Duration',								50,		6,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- holter configured column set
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('A44F7278-D6AE-4FB1-94EB-3D32493A3363', 'Testes configurados de Holter', 'Conjunto de colunas testes configurados de Holter padrão', 'HolterTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'A44F7278-D6AE-4FB1-94EB-3D32493A3363', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'A44F7278-D6AE-4FB1-94EB-3D32493A3363', 'Patient_Id',									100,	1,	1),
(newid(), 'A44F7278-D6AE-4FB1-94EB-3D32493A3363', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'A44F7278-D6AE-4FB1-94EB-3D32493A3363', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'A44F7278-D6AE-4FB1-94EB-3D32493A3363', 'Test_CreatedDateTime',						50,		4,	1)

08/09/2020 13:59:21: 
-- holter pending analysis tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Testes de análises de Holter pendentes', 'Conjunto de colunas testes de análises de Holter padrão pendentes', 'HolterTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Patient_Id',									100,	1,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Patient_BirthDate',							75,		3,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Test_Duration',								50,		6,	1),
(newid(), 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:21: 
-- holter analysed tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('32BA7004-DF1D-4D27-BB81-0E909212D342', 'Testes analisados de Holter', 'Conjunto de colunas testes analisados de Holter padrão', 'HolterTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Patient_Id',									100,	1,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Patient_BirthDate',							75,		3,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_StatusPickList',						75,		5,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_Duration',								50,		6,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '32BA7004-DF1D-4D27-BB81-0E909212D342', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- holter complete and confirmed tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Testes concluídos ou confirmados de Holter', 'Conjunto de colunas de testes concluídos ou confirmados de Holter padrão', 'HolterTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Patient_Id',									100,	1,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Patient_BirthDate',							75,		3,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_Duration',								50,		6,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- holter declined tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Testes recusados de Holter', 'Conjunto de colunas testes recusados de Holter padrão', 'HolterTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Patient_Id',									100,	1,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Patient_BirthDate',							75,		3,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_StatusPickList',						75,		5,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_Duration',								50,		6,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- holter all tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Todos os testes de Holter', 'Conjunto de colunas de todos os testes de Holter padrão', 'HolterTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Patient_Id',									100,	1,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Patient_BirthDate',							75,		3,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_Duration',								50,		6,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:21: 
-- resting/rhythm unidentified tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Testes não identificados de repouso e ritmo padrão', 'Conjunto de colunas testes não identificados de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Patient_Id',									100,	1,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:21: 
-- resting/rhythm pending review tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Revisão de testes de repouso e ritmo padrão pendentes', 'Conjunto de colunas com revisão de testes de repouso e ritmo padrão pendentes', 'RestingRhythmTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Patient_Id',									100,	1,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:21: 
-- resting/rhythm completed and confirmed tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Testes confirmados e concluídos de repouso e ritmo', 'Conjunto de colunas de testes confirmados e concluídos de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Patient_Id',									100,	1,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Patient_BirthDate',							50,		3,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Test_StatusPickList',						75,		5,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- resting/rhythm declined tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Testes recusados de repouso e ritmo padrão', 'Conjunto de colunas testes recusados de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Patient_Id',									100,	1,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Test_DeclinedReportCount (Icons)',			1,		6,	1),
(newid(), 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- resting/rhythm all tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('6A8D5698-0733-460E-8D25-489D0B313602', 'Todos os testes de repouso e ritmo', 'Conjunto de colunas de todos os testes de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Patient_Id',									100,	1,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Patient_BirthDate',							50,		3,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Test_StatusPickList',						75,		5,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '6A8D5698-0733-460E-8D25-489D0B313602', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- stress unidentified tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('862F64D7-999D-4F4F-8E5F-712899517D58', 'Testes não identificados de esforço', 'Conjunto de colunas de testes não identificados de esforço padrão', 'StressTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Patient_Id',									100,	1,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Patient_BirthDate',							50,		3,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Test_StatusPickList',						75,		5,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), '862F64D7-999D-4F4F-8E5F-712899517D58', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- stress pending review tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Revisão testes de esforço padrão pendentes', 'Conjunto de colunas com revisão testes de esforço padrão pendentes', 'StressTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Patient_Id',									100,	1,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- stress confirmed and completed tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Testes concluídos ou confirmados de esforço', 'Conjunto de colunas dos testes confirmados e concluídos de esforço padrão', 'StressTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Patient_Id',									100,	1,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Patient_BirthDate',							50,		3,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Test_StatusPickList',						75,		5,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '41CBA533-9060-4387-9E36-A2E2B4FE683F', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- stress declined tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('670F835A-C758-4E9C-AE26-F341571A5766', 'Testes recusados de esforço', 'Conjunto de colunas de testes recusados de esforço padrão', 'StressTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Patient_Id',									100,	1,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Patient_BirthDate',							50,		3,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Test_StatusPickList',						75,		5,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Test_DeclinedReportCount (Icons)',			1,		6,	1),
(newid(), '670F835A-C758-4E9C-AE26-F341571A5766', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- stress all tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('427F8F46-25B2-466B-9168-8553B1830DF6', 'Todos os testes de esforço', 'Conjunto de colunas de todos os testes de esforço padrão', 'StressTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Patient_Id',									100,	1,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Patient_BirthDate',							75,		3,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_StatusPickList',						75,		5,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_Duration',								50,		6,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '427F8F46-25B2-466B-9168-8553B1830DF6', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:22: 
-- ergospirometry pending review tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Revisão de testes de ergoespirometria pendentes', 'Conjunto de colunas com revisão de testes de ergoespirometria padrão pendentes', 'ErgospirometryTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Patient_Id',									100,	1,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- ergospirometry confirmed and completed tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Testes concluídos ou confirmados de ergoespirometria', 'Conjunto de colunas de testes concluídos ou confirmados de ergoespirometria padrão', 'ErgospirometryTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Patient_Id',									100,	1,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Test_UnconfirmedReportCount (Icons)',		1,		6,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- ergospirometry declined tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('BE9C28E3-830E-4206-8555-A23367C262C6', 'Testes recusados de ergoespirometria', 'Conjunto de colunas de testes recusados de ergoespirometria padrão', 'ErgospirometryTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Patient_Id',									100,	1,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Patient_BirthDate',							50,		3,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Test_StatusPickList',						75,		5,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Test_DeclinedReportCount (Icons)',			1,		6,	1),
(newid(), 'BE9C28E3-830E-4206-8555-A23367C262C6', 'Test_Download_Facility_Name',				100,	7,	1)

08/09/2020 13:59:22: 
-- ergospirometry all tests
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('83786156-72D1-4598-AD18-DBCED5A6426B', 'Todos os testes de ergoespirometria', 'Conjunto de colunas de todos os testes de ergoespirometria padrão', 'ErgospirometryTestsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Patient_Id',									100,	1,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Patient_Name (Last name first)',				150,	2,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Patient_BirthDate',							75,		3,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_RecordingStartDateTime',				125,	4,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_StatusPickList',						75,		5,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_Duration',								50,		6,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_UnconfirmedReportCount (Icons)',		1,		7,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_ConfirmedReportCount (Icons)',			1,		8,	1),
(newid(), '83786156-72D1-4598-AD18-DBCED5A6426B', 'Test_Download_Facility_Name',				100,	9,	1)

08/09/2020 13:59:22: 
-- patients
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Pacientes', 'Conjunto de colunas de pacientes padrão', 'PatientsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_Organisation',						50,		1,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_Id',									50,		2,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_Case_Numbers',						50,		3,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_NationalId',							50,		4,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_SecondId',							50,		5,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_Name (Last name first)',				100,	6,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_BirthDate',							50,		7,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_GenderPickList',						50,		8,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_Test_Count',							30,		9,	1),
(newid(), '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 'Patient_Case_Count',							30,		10,	1)

08/09/2020 13:59:22: 
-- reports
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Relatórios', 'Conjunto de colunas de relatórios padrão', 'ReportsDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Report_StatusPickList',						50,		1,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Test_OrderId',								50,		2,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Patient_Id',									50,		3,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Patient_Name (Last name first)',				100,	4,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Test_RecordingStartDateTime',				50,		5,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Test_Facility_Name',							50,		6,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Test_Responsible_Staff_Name',				50,		7,	1),
(newid(), '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 'Test_TypePickList (Icons)',					1,		8,	1)

08/09/2020 13:59:22: 
-- cases
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('2F7AA987-677B-4071-ABA2-9814BB62E879', 'Processos', 'Conjunto de colunas de processos padrão', 'CasesDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Test_PatientInfoStatus (Icons)',				1,		0,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_Number',								50,		1,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_TypePickList',							50,		2,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_OpenedDate',							50,		3,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_ClosedDate',							50,		4,	1)

08/09/2020 13:59:22: 
-- facilities
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Instituições', 'Conjunto de colunas das instituições padrão', 'FacilityDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_Name',								100,	0,	1),
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_Abbreviation',						50,		1,	1),
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_Rdt_RemoteDataTransferEnabled',		50,		2,	1),
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_PatientCount',						50,		3,	1),
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_StaffMemberCount',					50,		4,	1),
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_Rdt_ExternalDataTransferCount',		50,		5,	1),
(newid(), 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 'Facility_TestCount',							50,		6,	1)

08/09/2020 13:59:22: 
-- staff members
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Equipe', 'Conjunto de colunas de equipe padrão', 'StaffDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Number',								50,		0,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Name',									50,		1,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Facility_Name',						50,		2,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Facility_Abbreviation',				50,		3,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Facility_Organisation',				50,		4,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Username',								50,		5,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Role',									50,		6,	1),
(newid(), 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 'Staff_Member_Is_Referenced',					50,		7,	1)

08/09/2020 13:59:22: 
-- filters
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('F40F51BD-66FB-44B4-8D83-69CC950ED69A', 'Todos os Testes', 'Filtro de todos os testes padrão', 'AllTestsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 1),
('71380D0B-1855-43DA-B37C-352A48C58014', 'Filtro - todos os testes de repouso', 'Filtro de todos os testes de repouso padrão', 'AllTestsDataGrid', '([Test_TypeName]=''Em repouso'' OR [Test_TypePickList]=2)', 1, 'Test_RecordingStartDateTime', 1),
('0ED0D859-0D6B-4E1A-977F-2DC925BE8CAA', 'Filtro - todos os testes de ritmo', 'Filtro de todos os testes de ritmo padrão', 'AllTestsDataGrid', '([Test_TypeName]=''Ritmo'' OR [Test_TypePickList]=5)', 1, 'Test_RecordingStartDateTime', 1),
('E38758BF-AB9C-4002-95B3-A18F51B86BA0', 'Filtro - todos os testes de esforço', 'Filtro de todos os testes de esforço padrão', 'AllTestsDataGrid', '([Test_TypeName]=''Esforço'' OR [Test_TypePickList]=3)', 1, 'Test_RecordingStartDateTime', 1),
('508251D6-C9F4-472F-A758-331FF17EAAE6', 'Filtro - todos os testes de ergoespirometria', 'Filtro de todos os testes de ergoespirometria padrão', 'AllTestsDataGrid', '([Test_TypeName]=''Ergoespirometria'' OR [Test_TypePickList]=7)', 1, 'Test_RecordingStartDateTime', 1),
('E480534C-2A85-4A10-946D-1050D96D6928', 'Filtro - todos os testes de Holter', 'Filtro de todos os testes de Holter padrão', 'AllTestsDataGrid', '([Test_TypeName]=''Holter'' OR [Test_TypePickList]=1)', 1, 'Test_RecordingStartDateTime', 1),
('CB5CFB3F-1FC3-4008-9078-C8BB11865EEE', 'Filtro - todos os testes MAPA', 'Filtro com revisão de testes MAPA pendentes', 'AllTestsDataGrid', '([Test_TypeName]=''MAPA'' OR [Test_TypePickList]=4)', 1, 'Test_RecordingStartDateTime', 1);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('13C5B700-7CF4-48A2-8AE1-EC11473C01FC', 'Filtro não identificado de testes de repouso e ritmo', 'Filtro não identificado de testes de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', '([Test_PatientInfoStatus]=0 OR [Test_PatientInfoStatus]=10)', 1, 'Test_RecordingStartDateTime', 1),
('2911493F-2D0A-456B-BEB3-5BCC4DB69CE9', 'Filtro com revisão de testes de repouso e ritmo pendentes', 'Filtro com revisão de testes de repouso e ritmo padrão pendentes', 'RestingRhythmTestsDataGrid', '[Test_StatusPickList]=60', 1, 'Test_RecordingStartDateTime', 1),
('94996088-667E-4F2D-90CC-4778BD597AE1', 'Filtro de testes concluídos ou confirmados de repouso e ritmo', 'Filtro de testes concluídos ou confirmados de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', '([Test_StatusPickList]=70 OR [Test_StatusPickList]=80 OR [Test_StatusPickList]=160)', 1, 'Test_RecordingStartDateTime', 1),
('5810F592-D25E-43A7-9D37-20509E47C4CE', 'Filtro de testes recusados de repouso e ritmo', 'Filtro de testes recusados de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', '[Test_StatusPickList]=100', 1, 'Test_RecordingStartDateTime', 1),
('86417B9A-9744-4077-A0E9-2C6B3A20D0A3', 'Todos os filtros de testes de repouso e ritmo', 'Todos os filtros de testes de repouso e ritmo padrão', 'RestingRhythmTestsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 1);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('7FE864A6-08A4-4DB5-80C9-8F8C91F1CC29', 'Filtro não identificado de testes de esforço', 'Filtro não identificado de testes de esforço padrão', 'StressTestsDataGrid', '([Test_PatientInfoStatus]=0 OR [Test_PatientInfoStatus]=10)', 1, 'Test_RecordingStartDateTime', 1),
('4033A941-0497-4725-B300-3FE5EDA41002', 'Filtro com revisão de testes de esforço pendentes', 'Filtro com revisão de testes de esforço padrão pendentes', 'StressTestsDataGrid', '[Test_StatusPickList]=60', 1, 'Test_RecordingStartDateTime', 1),
('B7A6D988-1A07-498C-8D64-EC863DD740F2', 'Filtro concluído ou confirmado dos testes de esforço', 'Filtro concluído ou confirmado dos testes de esforço padrão', 'StressTestsDataGrid', '([Test_StatusPickList]=70 OR [Test_StatusPickList]=80 OR [Test_StatusPickList]=160)', 1, 'Test_RecordingStartDateTime', 1),
('00A081C3-08F8-4A8E-AE54-90CA1C1E395A', 'Filtro dos testes recusados de esforço', 'Filtro dos testes recusados de esforço padrão', 'StressTestsDataGrid', '[Test_StatusPickList]=100', 1, 'Test_RecordingStartDateTime', 1),
('BD5D273A-BDD0-4BFA-9B41-8C28FB318371', 'Filtro de todos os testes de esforço', 'Filtro de todos os testes de esforço padrão', 'StressTestsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 1);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('F16ED91C-D24A-4BB1-9509-A0DC0F18CFD0', 'Filtro configurado dos testes MAPA', 'Filtro configurado dos testes MAPA padrão', 'AbpTestsDataGrid', '[Test_StatusPickList]=120', 1, 'Test_RecordingStartDateTime', 1),
('79E8E1B1-3F83-49C6-944A-FA72DCA42235', 'Filtro para rever testes pendentes de MAPA', 'Filtro com revisão de testes MAPA padrão pendentes', 'AbpTestsDataGrid', '([Test_StatusPickList]=40 OR [Test_StatusPickList]=60)', 1, 'Test_RecordingStartDateTime', 1),
('1350ECC2-684E-4660-A5D3-7677E0374F60', 'Filtro concluído ou confirmado dos testes MAPA', 'Filtro concluído ou confirmado dos testes MAPA padrão', 'AbpTestsDataGrid', '([Test_StatusPickList]=70 OR [Test_StatusPickList]=80 OR [Test_StatusPickList]=160)', 1, 'Test_RecordingStartDateTime', 1),
('9F86D391-DA30-42A5-99D7-CB76F6AFCE43', 'Filtro dos testes recusados MAPA', 'Filtro dos testes recusados MAPA padrão', 'AbpTestsDataGrid', '[Test_StatusPickList]=100', 1, 'Test_RecordingStartDateTime', 1),
('062258D5-D146-471D-8DB4-0EC63FFD29AC', 'Filtro de todos os testes MAPA', 'Filtro de todos os testes MAPA padrão', 'AbpTestsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 1);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('7B684E9B-4B92-4336-BFB2-A6A194DEC25F', 'Filtro configurado dos testes de Holter', 'Filtro configurado dos testes de Holter padrão', 'HolterTestsDataGrid', '[Test_StatusPickList]=120', 1, 'Test_RecordingStartDateTime', 1),
('EA56F7C6-7246-437E-8902-3F4233204F13', 'Filtro de análises pendentes dos testes de Holter', 'Filtro de análises pendentes dos testes de Holter padrão', 'HolterTestsDataGrid', '[Test_StatusPickList]=40', 1, 'Test_RecordingStartDateTime', 1),
('D28BEAEE-FDBE-4AFF-B8D4-5780F6718471', 'Filtro analisado dos testes de Holter', 'Filtro analisado dos testes de Holter padrão', 'HolterTestsDataGrid', '[Test_StatusPickList]=60', 1, 'Test_RecordingStartDateTime', 1),
('E3CC9A9B-762A-4C30-9FD9-A64B0E88C3C6', 'Filtro concluído ou confirmado dos testes de Holter', 'Filtro concluído ou confirmado dos testes de Holter padrão', 'HolterTestsDataGrid', '([Test_StatusPickList]=70 OR [Test_StatusPickList]=80 OR [Test_StatusPickList]=160)', 1, 'Test_RecordingStartDateTime', 1),
('8C47B222-BFEC-4E75-AA54-70A4607AF265', 'Filtro dos testes recusados de Holter', 'Filtro dos testes recusados de Holter padrão', 'HolterTestsDataGrid', '[Test_StatusPickList]=100', 1, 'Test_RecordingStartDateTime', 1),
('3E086951-0F08-43C4-BFBA-FA6A55BB7925', 'Filtro de todos os testes de Holter', 'Filtro de todos os testes de Holter padrão', 'HolterTestsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 1);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('D03216CD-319E-4EE7-9EE1-E45F47C48AD5', 'Filtro com revisão de testes de ergoespirometria pendentes', 'Filtro com revisão de testes de ergoespirometria padrão pendentes', 'ErgospirometryTestsDataGrid', '[Test_StatusPickList]=60', 1, 'Test_RecordingStartDateTime', 1),
('F1E1FE26-8D59-47C8-8360-CB330C0DDA2F', 'Filtro concluído ou confirmado dos testes ergoespirometria', 'Filtro concluído ou confirmado dos testes ergoespirometria padrão', 'ErgospirometryTestsDataGrid', '([Test_StatusPickList]=70 OR [Test_StatusPickList]=80 OR [Test_StatusPickList]=160)', 1, 'Test_RecordingStartDateTime', 1),
('E126B0CC-2178-4B66-8FF4-6E4D6EEC6DA9', 'Filtro dos testes recusados de ergoespirometria', 'Filtro dos testes recusados de ergoespirometria padrão', 'ErgospirometryTestsDataGrid', '[Test_StatusPickList]=100', 1, 'Test_RecordingStartDateTime', 1),
('33B3FD79-445F-4B57-9313-73F77AB2198E', 'Filtro de todos os testes de ergoespirometria', 'Filtro de todos os testes de ergoespirometria padrão', 'ErgospirometryTestsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 1);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('BE378B12-1EE6-4A97-8F24-ABBD33D11C22', 'Filtro de todos os pacientes', 'Filtro de todos os pacientes padrão', 'PatientsDataGrid', '@ALL', 1, 'Patient_Id', 0),
('5F40A302-E22D-4182-84BE-C01A68735915', 'Filtro não identificado dos pacientes', 'Filtro não identificado dos pacientes padrão', 'PatientsDataGrid', '[Test_PatientInfoStatus]=10', 1, 'Patient_Id', 0),
('249C8AC9-3F32-4717-89FA-B0D531FEDE7F', 'Filtro identificado dos pacientes', 'Filtro identificado dos pacientes padrão', 'PatientsDataGrid', '[Test_PatientInfoStatus]=20', 1, 'Patient_Id', 0);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('D881AC62-15EE-4949-BD27-5191E9CD663E', 'Filtro de todos os relatórios', 'Filtro de todos os relatórios padrão', 'ReportsDataGrid', '@ALL', 1, 'Test_RecordingStartDateTime', 0),
('C414BEEC-6730-4E4D-8822-3E7E1B43E7EC', 'Filtro não confirmado dos relatórios', 'Filtro não confirmado dos relatórios padrão', 'ReportsDataGrid', '[Report_StatusPickList]=2', 1, 'Test_RecordingStartDateTime', 0),
('86449F41-F746-4943-A374-57CD019C82D3', 'Filtro confirmado dos relatórios', 'Filtro confirmado dos relatórios padrão', 'ReportsDataGrid', '([Report_StatusPickList]=3 OR [Report_StatusPickList]=4)', 1, 'Test_RecordingStartDateTime', 0),
('BC1765DC-E3C6-4975-BF07-BC25236A44E6', 'Filtro dos relatórios recusados', 'Filtro dos relatórios recusados padrão', 'ReportsDataGrid', '[Report_StatusPickList]=5', 1, 'Test_RecordingStartDateTime', 0);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('F2169B13-C604-4CFD-AC0A-35AC02F7261B', 'Filtro de todos os processos', 'Filtro de todos os processos padrão', 'CasesDataGrid', '@ALL', 1, 'Case_OpenedDate', 0),
('1C8A44D5-36A7-4F47-ADBC-CAE82E24BD6D', 'Filtro não especificado dos processos', 'Filtro não especificado dos processos padrão', 'CasesDataGrid', '[Case_TypePickList]=0', 1, 'Case_OpenedDate', 0),
('83EAF0CB-0B5B-4B81-A15B-E3C3607D7711', 'Filtro dos internados dos processos', 'Filtro dos internados dos processos padrão', 'CasesDataGrid', '[Case_TypePickList]=1', 1, 'Case_OpenedDate', 0),
('4E3AD298-2714-4ABE-ACD4-2687FD4A75E5', 'Filtro dos pacientes ambulatoriais dos processos', 'Filtro dos pacientes ambulatoriais dos processos padrão', 'CasesDataGrid', '[Case_TypePickList]=2', 1, 'Case_OpenedDate', 0);

08/09/2020 13:59:22: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('2A52D48F-DEAD-44B7-AA99-9CA1BD36AFE7', 'Filtro de todas as instituições', 'Filtro de todas as instituições padrão', 'FacilityDataGrid', '@ALL', 1, 'Facility_Name', 0),
('7B85DBFB-3982-4612-9E1E-077D13753B73', 'Filtro de RDT ativado das instituições', 'Filtro de RDT ativado das instituições padrão', 'FacilityDataGrid', '[Facility_Rdt_RemoteDataTransferEnabled]=1', 1, 'Facility_Name', 0);

08/09/2020 13:59:22: 
-- nb. the empty strings in the criteria are escaped '''' is actually ''
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('5FC981F3-CDEC-4E64-9E7D-5592AE91E1B6', 'Filtro de toda a equipe', 'Filtro de toda a equipe padrão', 'StaffDataGrid', '@ALL', 1, 'Staff_Number', 0),
('8979B299-39E2-4797-9CEC-3F19E42901C8', 'Filtro ativado da equipe', 'Filtro ativado da equipe padrão', 'StaffDataGrid', '([Staff_IsLockedOut]=0 AND [Staff_Username]<>'''')', 1, 'Staff_Number', 0),
('E4260B6A-1928-4F6C-A926-6F0152F7ABCB', 'Filtro bloqueado da equipe', 'Filtro bloqueado da equipe padrão', 'StaffDataGrid', '([Staff_IsLockedOut]=1 AND [Staff_Username]<>'''')', 1, 'Staff_Number', 0);

08/09/2020 13:59:22: 
INSERT INTO [Role] ([Key],[Name],[Description],[IsPreInstalled]) VALUES 
('92CA510E-A4E8-44DE-8928-911A14AB444D','Administrador','',1);

08/09/2020 13:59:22: 
-- insert the staff member record for the system admin user
INSERT INTO [StaffMember] ([Key],[Username],[Password],[CreatedDateTime],[UpdatedDateTime],[StaffNumber],[FreeTextName],[RoleKey],[Verified],[IsInternal]) VALUES 
(newid(),'admin','w5Skd6GwD0AHZQoK1TSXaYKfy3lnxstwYVf4j5sP+xbaHmJoIKWMZQw6ybpsQz85+KHBOUVK0PR2vGLkAqUBBw==',getutcdate(),getutcdate(),'admin','admin','92CA510E-A4E8-44DE-8928-911A14AB444D',1,1);

08/09/2020 13:59:22: 
INSERT INTO [Role] ([Key],[Name],[Description],[IsPreInstalled],[AdminPermission]) VALUES 
('8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0','Modelo de função','',1,0);

08/09/2020 13:59:22: 
-- set any pre-existing users to use the role template
UPDATE [StaffMember] SET [RoleKey]='8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0' WHERE [RoleKey] IS NULL;

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the all tests search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'AllTestsDataGrid', 'F40F51BD-66FB-44B4-8D83-69CC950ED69A', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Holter', 'AllTestsDataGrid', 'E480534C-2A85-4A10-946D-1050D96D6928', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'MAPA', 'AllTestsDataGrid', 'CB5CFB3F-1FC3-4008-9078-C8BB11865EEE', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Em repouso', 'AllTestsDataGrid', '71380D0B-1855-43DA-B37C-352A48C58014', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 3),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Ritmo', 'AllTestsDataGrid', '0ED0D859-0D6B-4E1A-977F-2DC925BE8CAA', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 4),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Esforço', 'AllTestsDataGrid', 'E38758BF-AB9C-4002-95B3-A18F51B86BA0', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 5),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Ergoespirometria', 'AllTestsDataGrid', '508251D6-C9F4-472F-A758-331FF17EAAE6', '5ADCB5D9-CE9B-4C33-AF53-DE9FEB6ABFB6', 6);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the ABP tests search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Configurado', 'AbpTestsDataGrid', 'F16ED91C-D24A-4BB1-9509-A0DC0F18CFD0', '6528F76C-F929-45AE-95BB-608A8D497BE0', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Revisão pendente', 'AbpTestsDataGrid', '79E8E1B1-3F83-49C6-944A-FA72DCA42235', 'F3A624C8-3CD1-4262-8982-BD7C30933EC9', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Concluídos/confirmado', 'AbpTestsDataGrid', '1350ECC2-684E-4660-A5D3-7677E0374F60', 'B4B7C464-89AA-46E2-AA3E-29882279E6C9', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Recusado', 'AbpTestsDataGrid', '9F86D391-DA30-42A5-99D7-CB76F6AFCE43', '5FD5932E-EA76-4EFF-B59E-CDD6D38A28A6', 3),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'AbpTestsDataGrid', '062258D5-D146-471D-8DB4-0EC63FFD29AC', '91BAD5DD-3406-4CBD-A2DC-2112694E1A73', 4);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the Holter tests search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Configurado', 'HolterTestsDataGrid', '7B684E9B-4B92-4336-BFB2-A6A194DEC25F', 'A44F7278-D6AE-4FB1-94EB-3D32493A3363', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Análise pendente', 'HolterTestsDataGrid', 'EA56F7C6-7246-437E-8902-3F4233204F13', 'A9F11E1A-C275-4213-83BE-D036E209BFFD', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Analisado', 'HolterTestsDataGrid', 'D28BEAEE-FDBE-4AFF-B8D4-5780F6718471', '32BA7004-DF1D-4D27-BB81-0E909212D342', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Concluídos/confirmado', 'HolterTestsDataGrid', 'E3CC9A9B-762A-4C30-9FD9-A64B0E88C3C6', 'CDA2070A-9FA4-4682-BCD1-9661266F59ED', 3),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Recusado', 'HolterTestsDataGrid', '8C47B222-BFEC-4E75-AA54-70A4607AF265', '177D812B-88B7-4B65-ACCE-25A4E4FB32A3', 4),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'HolterTestsDataGrid', '3E086951-0F08-43C4-BFBA-FA6A55BB7925', 'C2C1E89B-E5F6-4026-BE3F-BC07848E1F25', 5);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the Resting/Rhythm tests search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Não identificado', 'RestingRhythmTestsDataGrid', '13C5B700-7CF4-48A2-8AE1-EC11473C01FC', 'E869F7A9-E40D-4C0C-BBDC-C183B7DE8C6F', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Revisão pendente', 'RestingRhythmTestsDataGrid', '2911493F-2D0A-456B-BEB3-5BCC4DB69CE9', 'DF8E0594-2C22-4CC8-8AF3-5587BA1B418D', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Concluídos/confirmado', 'RestingRhythmTestsDataGrid', '94996088-667E-4F2D-90CC-4778BD597AE1', '4E644AFC-A0D9-4052-A7C4-FE39E750DF59', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Recusado', 'RestingRhythmTestsDataGrid', '5810F592-D25E-43A7-9D37-20509E47C4CE', 'D07A7E5E-AA3A-4697-A4A4-8E1459EDAC4D', 3),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'RestingRhythmTestsDataGrid', '86417B9A-9744-4077-A0E9-2C6B3A20D0A3', '6A8D5698-0733-460E-8D25-489D0B313602', 4);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the stress tests search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Não identificado', 'StressTestsDataGrid', '7FE864A6-08A4-4DB5-80C9-8F8C91F1CC29', '862F64D7-999D-4F4F-8E5F-712899517D58', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Revisão pendente', 'StressTestsDataGrid', '4033A941-0497-4725-B300-3FE5EDA41002', 'EA15CB29-334D-4F4A-A699-B0161BEF41C6', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Concluídos/confirmado', 'StressTestsDataGrid', 'B7A6D988-1A07-498C-8D64-EC863DD740F2', '41CBA533-9060-4387-9E36-A2E2B4FE683F', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Recusado', 'StressTestsDataGrid', '5810F592-D25E-43A7-9D37-20509E47C4CE', '670F835A-C758-4E9C-AE26-F341571A5766', 3),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'StressTestsDataGrid', 'BD5D273A-BDD0-4BFA-9B41-8C28FB318371', '427F8F46-25B2-466B-9168-8553B1830DF6', 4);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the ergospirometry tests search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Revisão pendente', 'ErgospirometryTestsDataGrid', 'D03216CD-319E-4EE7-9EE1-E45F47C48AD5', 'E84C1B88-DBEC-45BA-9C4F-441F357DA88B', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Concluídos/confirmado', 'ErgospirometryTestsDataGrid', 'F1E1FE26-8D59-47C8-8360-CB330C0DDA2F', 'A68DAFCD-CE7C-4C70-B52D-22CB26BA0CBC', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Recusado', 'ErgospirometryTestsDataGrid', 'E126B0CC-2178-4B66-8FF4-6E4D6EEC6DA9', 'BE9C28E3-830E-4206-8555-A23367C262C6', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'ErgospirometryTestsDataGrid', '33B3FD79-445F-4B57-9313-73F77AB2198E', '83786156-72D1-4598-AD18-DBCED5A6426B', 3);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the patients search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'PatientsDataGrid', 'BE378B12-1EE6-4A97-8F24-ABBD33D11C22', '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Não identificado', 'PatientsDataGrid', '5F40A302-E22D-4182-84BE-C01A68735915', '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Identificado', 'PatientsDataGrid', '249C8AC9-3F32-4717-89FA-B0D531FEDE7F', '67BBB91A-B3E1-4851-A76D-9367C28AB1CE', 2);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the reports search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'ReportsDataGrid', 'D881AC62-15EE-4949-BD27-5191E9CD663E', '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Não confirmado', 'ReportsDataGrid', 'C414BEEC-6730-4E4D-8822-3E7E1B43E7EC', '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Confirmado', 'ReportsDataGrid', '86449F41-F746-4943-A374-57CD019C82D3', '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Recusado', 'ReportsDataGrid', 'BC1765DC-E3C6-4975-BF07-BC25236A44E6', '7CAF8ABA-F0E8-4472-BBC9-6B08194A9ED6', 3);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the cases search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'CasesDataGrid', 'F2169B13-C604-4CFD-AC0A-35AC02F7261B', '2F7AA987-677B-4071-ABA2-9814BB62E879', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Não especificado', 'CasesDataGrid', '1C8A44D5-36A7-4F47-ADBC-CAE82E24BD6D', '2F7AA987-677B-4071-ABA2-9814BB62E879', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'No Paciente', 'CasesDataGrid', '83EAF0CB-0B5B-4B81-A15B-E3C3607D7711', '2F7AA987-677B-4071-ABA2-9814BB62E879', 2),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Fora do Paciente', 'CasesDataGrid', '4E3AD298-2714-4ABE-ACD4-2687FD4A75E5', '2F7AA987-677B-4071-ABA2-9814BB62E879', 3);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the facilities search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'FacilityDataGrid', '2A52D48F-DEAD-44B7-AA99-9CA1BD36AFE7', 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'RDT Ativado', 'FacilityDataGrid', '7B85DBFB-3982-4612-9E1E-077D13753B73', 'B79C203C-4DEC-44BD-A1C0-37BEB44802E4', 1);

08/09/2020 13:59:22: 
--role data grids (filter tab buttons) on the staff search page
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Tudo', 'StaffDataGrid', '5FC981F3-CDEC-4E64-9E7D-5592AE91E1B6', 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 0),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Usuários habilitados', 'StaffDataGrid', '8979B299-39E2-4797-9CEC-3F19E42901C8', 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 1),
(newid(), '8F5BC4EA-28F2-4490-AEFD-81346DBA0DA0', 'Usuários bloqueados', 'StaffDataGrid', 'E4260B6A-1928-4F6C-A926-6F0152F7ABCB', 'F9AC3F60-F143-4E26-8A04-366DD0FD8B85', 2);

08/09/2020 13:59:22: 
-- end of SQL script
08/09/2020 13:59:22: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToRebuildAllIndexes.sql

08/09/2020 13:59:22: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
-- Script will add / remove indexes
USE [LomondAuditData]

08/09/2020 13:59:22: 
ALTER INDEX ALL ON [dbo].[AuditInternal] REBUILD; 
ALTER INDEX ALL ON [dbo].[AuditTrail] REBUILD; 
ALTER INDEX ALL ON [dbo].[RelatedObject] REBUILD; 
USE [LomondClinicalData]

08/09/2020 13:59:29: 
ALTER INDEX ALL ON [dbo].[AbpAnalysis] REBUILD;
ALTER INDEX ALL ON [dbo].[AbpMeasurementIntervals] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpMeasurementLimits] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpPeriods] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpProtocols] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpTest] REBUILD; 
ALTER INDEX ALL ON [dbo].[Analysis] REBUILD; 
ALTER INDEX ALL ON [dbo].[Case] REBUILD; 
ALTER INDEX ALL ON [dbo].[ColumnSet] REBUILD; 
ALTER INDEX ALL ON [dbo].[ColumnSetColumn] REBUILD; 
ALTER INDEX ALL ON [dbo].[Counters] REBUILD; 
ALTER INDEX ALL ON [dbo].[DatabaseHistory] REBUILD; 
ALTER INDEX ALL ON [dbo].[ErgoSpirometryTest] REBUILD; 
ALTER INDEX ALL ON [dbo].[ExternalDataTransfer] REBUILD; 
ALTER INDEX ALL ON [dbo].[Facility] REBUILD; 
ALTER INDEX ALL ON [dbo].[FileStore] REBUILD; 
ALTER INDEX ALL ON [dbo].[Filter] REBUILD; 
ALTER INDEX ALL ON [dbo].[HolterDiaryEvent] REBUILD; 
ALTER INDEX ALL ON [dbo].[HolterTest] REBUILD; 
ALTER INDEX ALL ON [dbo].[Indication] REBUILD; 
ALTER INDEX ALL ON [dbo].[Medication] REBUILD; 
ALTER INDEX ALL ON [dbo].[Organisation] REBUILD; 
ALTER INDEX ALL ON [dbo].[Patient] REBUILD; 
ALTER INDEX ALL ON [dbo].[Recording] REBUILD; 
ALTER INDEX ALL ON [dbo].[RecordInUse] REBUILD; 
ALTER INDEX ALL ON [dbo].[Report] REBUILD; 
ALTER INDEX ALL ON [dbo].[ReportMeasurement] REBUILD; 
ALTER INDEX ALL ON [dbo].[ReportSignature] REBUILD; 
ALTER INDEX ALL ON [dbo].[Role] REBUILD; 
ALTER INDEX ALL ON [dbo].[RoleDataGrid] REBUILD; 
ALTER INDEX ALL ON [dbo].[Session] REBUILD; 
ALTER INDEX ALL ON [dbo].[StaffMember] REBUILD; 
ALTER INDEX ALL ON [dbo].[Test] REBUILD; 
ALTER INDEX ALL ON [dbo].[TorridonAnalyserUserSetup] REBUILD; 

08/09/2020 14:02:29: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion15to16.SqlToUpdateDatabaseVersion(PerformedLast).sql

08/09/2020 14:02:29: 
----------------------------------------------------------------------------------
-- script to update database from version 15 to version 16
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:29: 
------------------- UPDATING THE VERSION OF THE DATABASE
-- update database version from 15 to 16
UPDATE [DatabaseHistory] SET [DatabaseVersion] = 16, [Updated] = getutcdate() 
08/09/2020 14:02:29: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion16to17.SqlToConvertVarcharColumnsToNvarchar.sql

08/09/2020 14:02:29: 
----------------------------------------------------------------------------------
-- script to update database from version 16 to version 17
----------------------------------------------------------------------------------
USE [LomondAuditData]

08/09/2020 14:02:30: 
ALTER TABLE [AuditTrail] ALTER COLUMN [Username] NVARCHAR(255) NULL;
USE [LomondClinicalData]

08/09/2020 14:02:32: 
DROP INDEX [IX_AbpMeasurementLimits_UniqueName] ON [AbpMeasurementLimits];
DROP INDEX [IX_AbpProtocols_UniqueName] ON [AbpProtocols];

08/09/2020 14:02:32: 
ALTER TABLE [AbpAnalysis] ALTER COLUMN [StartTime] NVARCHAR(20) NOT NULL;
ALTER TABLE [AbpAnalysis] ALTER COLUMN [Duration] NVARCHAR(20) NOT NULL;
ALTER TABLE [AbpMeasurementLimits] ALTER COLUMN [Name] NVARCHAR(100) NOT NULL;
ALTER TABLE [AbpProtocols] ALTER COLUMN [Name] NVARCHAR(100) NOT NULL;
ALTER TABLE [Role] ALTER COLUMN [Description] NVARCHAR(512) NULL;
ALTER TABLE [StaffMember] ALTER COLUMN [Department] NVARCHAR(64) NULL;
ALTER TABLE [StaffMember] ALTER COLUMN [Ward] NVARCHAR(64) NULL;
ALTER TABLE [DatabaseHistory] ALTER COLUMN [ServerName] NVARCHAR(255) NULL;

08/09/2020 14:02:32: 
CREATE UNIQUE NONCLUSTERED INDEX [IX_AbpMeasurementLimits_UniqueName] ON [dbo].[AbpMeasurementLimits] 
(
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

08/09/2020 14:02:32: 
CREATE UNIQUE NONCLUSTERED INDEX [IX_AbpProtocols_UniqueName] ON [dbo].[AbpProtocols] 
(
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

08/09/2020 14:02:32: 
IF OBJECT_ID(N'[dbo].[CleanName]', N'FN') IS NOT NULL
    DROP FUNCTION [dbo].[CleanName]

08/09/2020 14:02:32: 
CREATE FUNCTION [dbo].[CleanName](@Name NVARCHAR(1024))
RETURNS NVARCHAR(1024)
AS
BEGIN
	RETURN LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(@Name,' ','<>'),'><',''),'<>',' ')))
END
08/09/2020 14:02:32: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion16to17.SqlToInternationaliseAllTestFilterCriteria.sql

08/09/2020 14:02:32: 
----------------------------------------------------------------------------------
-- script to update database from version 16 to version 17
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:32: 
UPDATE [Filter] SET [Criteria]='([Test_TypeName]=''Em repouso'' OR [Test_TypePickList]=2)' WHERE [Name]='Filtro - todos os testes de repouso';
UPDATE [Filter] SET [Criteria]='([Test_TypeName]=''Ritmo'' OR [Test_TypePickList]=5)' WHERE [Name]='Filtro - todos os testes de ritmo';
UPDATE [Filter] SET [Criteria]='([Test_TypeName]=''Esforço'' OR [Test_TypePickList]=3)' WHERE [Name]='Filtro - todos os testes de esforço';
UPDATE [Filter] SET [Criteria]='([Test_TypeName]=''Ergoespirometria'' OR [Test_TypePickList]=7)' WHERE [Name]='Filtro - todos os testes de ergoespirometria';
UPDATE [Filter] SET [Criteria]='([Test_TypeName]=''Holter'' OR [Test_TypePickList]=1)' WHERE [Name]='Filtro - todos os testes de Holter';
UPDATE [Filter] SET [Criteria]='([Test_TypeName]=''MAPA'' OR [Test_TypePickList]=4)' WHERE [Name]='Filtro - todos os testes MAPA';

08/09/2020 14:02:32: 
-- if system was upgraded from Sentinel 9.0.0 to Sentinel 10.0.0 previously we don't know what the role template role key is
DECLARE @RoleTemplateKey uniqueidentifier;
SELECT @RoleTemplateKey FROM [Role] WHERE [Name]='Modelo de função'
-- set any pre-existing users to use the role template
UPDATE [StaffMember] SET [RoleKey]=@RoleTemplateKey WHERE [RoleKey] IS NULL;

08/09/2020 14:02:32: 
-- end of script

08/09/2020 14:02:32: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion16to17.SqlToRebuildIndexesAndUpdateVersion.sql

08/09/2020 14:02:32: 
----------------------------------------------------------------------------------
-- script to update database from version 16 to version 17
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:32: 
------------------- UPDATING THE VERSION OF THE DATABASE
-- update database version from 16 to 17
UPDATE [DatabaseHistory] SET [DatabaseVersion] = 17, [Updated] = getutcdate() 

08/09/2020 14:02:32: 
------------------------------------Shrink LomondClinicalData database Data and Log Files
ALTER DATABASE [LomondClinicalData]
SET RECOVERY SIMPLE

08/09/2020 14:02:32: 
DBCC SHRINKDATABASE (LomondClinicalData, TRUNCATEONLY)

08/09/2020 14:02:34: 
ALTER DATABASE [LomondClinicalData]
SET RECOVERY FULL

08/09/2020 14:02:34: 
------------------------------------Shrink LomondAuditData database Data and Log Files
USE [LomondAuditData]

08/09/2020 14:02:34: 
ALTER DATABASE [LomondAuditData]
SET RECOVERY SIMPLE

08/09/2020 14:02:34: 
DBCC SHRINKDATABASE (LomondAuditData, TRUNCATEONLY)

08/09/2020 14:02:35: 
ALTER DATABASE [LomondAuditData]
SET RECOVERY FULL

08/09/2020 14:02:35: 
USE [LomondAuditData]

08/09/2020 14:02:35: 
ALTER INDEX ALL ON [dbo].[AuditInternal] REBUILD; 
ALTER INDEX ALL ON [dbo].[AuditTrail] REBUILD; 
ALTER INDEX ALL ON [dbo].[RelatedObject] REBUILD; 
USE [LomondClinicalData]

08/09/2020 14:02:42: 
CREATE INDEX [IX_PatientNationalId] ON [dbo].[Patient]([NationalId] ASC) ON [PRIMARY]
CREATE INDEX [IX_TestWard] ON [dbo].[Test]([Ward] ASC) ON [PRIMARY]
ALTER INDEX ALL ON [dbo].[AbpAnalysis] REBUILD;
ALTER INDEX ALL ON [dbo].[AbpMeasurementIntervals] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpMeasurementLimits] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpPeriods] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpProtocols] REBUILD; 
ALTER INDEX ALL ON [dbo].[AbpTest] REBUILD; 
ALTER INDEX ALL ON [dbo].[Analysis] REBUILD; 
ALTER INDEX ALL ON [dbo].[Case] REBUILD; 
ALTER INDEX ALL ON [dbo].[ColumnSet] REBUILD; 
ALTER INDEX ALL ON [dbo].[ColumnSetColumn] REBUILD; 
ALTER INDEX ALL ON [dbo].[Counters] REBUILD; 
ALTER INDEX ALL ON [dbo].[DatabaseHistory] REBUILD; 
ALTER INDEX ALL ON [dbo].[ErgoSpirometryTest] REBUILD; 
ALTER INDEX ALL ON [dbo].[ExternalDataTransfer] REBUILD; 
ALTER INDEX ALL ON [dbo].[Facility] REBUILD; 
ALTER INDEX ALL ON [dbo].[FileStore] REBUILD; 
ALTER INDEX ALL ON [dbo].[Filter] REBUILD; 
ALTER INDEX ALL ON [dbo].[HolterDiaryEvent] REBUILD; 
ALTER INDEX ALL ON [dbo].[HolterTest] REBUILD; 
ALTER INDEX ALL ON [dbo].[Indication] REBUILD; 
ALTER INDEX ALL ON [dbo].[Medication] REBUILD; 
ALTER INDEX ALL ON [dbo].[Organisation] REBUILD; 
ALTER INDEX ALL ON [dbo].[Patient] REBUILD; 
ALTER INDEX ALL ON [dbo].[Recording] REBUILD; 
ALTER INDEX ALL ON [dbo].[RecordInUse] REBUILD; 
ALTER INDEX ALL ON [dbo].[Report] REBUILD; 
ALTER INDEX ALL ON [dbo].[ReportMeasurement] REBUILD; 
ALTER INDEX ALL ON [dbo].[ReportSignature] REBUILD; 
ALTER INDEX ALL ON [dbo].[Role] REBUILD; 
ALTER INDEX ALL ON [dbo].[RoleDataGrid] REBUILD; 
ALTER INDEX ALL ON [dbo].[Session] REBUILD; 
ALTER INDEX ALL ON [dbo].[StaffMember] REBUILD; 
ALTER INDEX ALL ON [dbo].[Test] REBUILD; 
ALTER INDEX ALL ON [dbo].[TorridonAnalyserUserSetup] REBUILD; 

08/09/2020 14:02:58: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion17to18.SqlToUpdateVersionAndCreateIndexes.sql

08/09/2020 14:02:58: 
----------------------------------------------------------------------------------
-- script to update database from version 17 to version 18
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:58: 
------------------- UPDATING THE VERSION OF THE DATABASE
-- update database version from 17 to 18
UPDATE [DatabaseHistory] SET [DatabaseVersion] = 18, [Updated] = getutcdate() 

08/09/2020 14:02:58: 
------------------- CREATING INDEXES
CREATE NONCLUSTERED INDEX [IX_FamilyName] ON [dbo].[Patient]([FamilyName] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 14:02:58: 
CREATE NONCLUSTERED INDEX [IX_GivenName] ON [dbo].[Patient]([GivenName] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 14:02:58: 
CREATE NONCLUSTERED INDEX [IX_OrganisationKey] ON [dbo].[Patient]([OrganisationKey] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 14:02:58: 
CREATE NONCLUSTERED INDEX [IX_Gender] ON [dbo].[Patient]([Gender] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 14:02:58: 
CREATE NONCLUSTERED INDEX [IX_OrderID] ON [dbo].[Test]([OrderID] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 14:02:59: 
CREATE NONCLUSTERED INDEX [IX_TestTypeName] ON [dbo].[Test]([TestTypeName] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

08/09/2020 14:02:59: 
CREATE NONCLUSTERED INDEX [IX_Username] ON [dbo].[StaffMember]([Username] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
08/09/2020 14:02:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion17to18.SqlToCreateSettingTable.sql

08/09/2020 14:02:59: 
USE [LomondClinicalData]

08/09/2020 14:02:59: 
-- Create Setting table
SET ANSI_NULLS ON

08/09/2020 14:02:59: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:02:59: 
CREATE TABLE [dbo].[Setting](
	[Name] [nvarchar](100) NOT NULL,
	[Value] [nvarchar](100) NULL,
 CONSTRAINT [PK_Setting] PRIMARY KEY CLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 14:02:59: 
-- Create initial settings
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'SearchCriteriaDefaultTimeRange', 'UseAllTime' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'HolterDownloadIdentifyOption', 'Patient' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'AbpDownloadIdentifyOption', 'Patient' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'ShowPrepareHolterConfigurePage', 'False' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveCriteriaOlderThanDays','90' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveStartingDateTime','1970-01-01T00:00:00.0000000' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveDuration','1' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveMode','Off' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveFrequency','RunOnceAtScheduledTime' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchivePathToArchiveFolders','' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveHolterMode','Off' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'BulkDeleteArchiveStressRecordingsMode','Off' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'HeightUnit', 'Centimetres' );
INSERT INTO [Setting] ( [Name],[Value] ) VALUES ( 'WeightUnit', 'Kilogrammes' );
08/09/2020 14:02:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion17to18.SqlToAddPermissionToRoleTable.sql

08/09/2020 14:02:59: 
USE [LomondClinicalData]

08/09/2020 14:02:59: 
ALTER TABLE [Role] ADD [MoveTestToCasePermission] [bit] NOT NULL CONSTRAINT [DF_Role_MoveTestToCasePermission] DEFAULT (1);
ALTER TABLE [Role] ADD [MoveTestToOrderPermission] [bit] NOT NULL CONSTRAINT [DF_Role_MoveTestToOrderPermission] DEFAULT (1);
08/09/2020 14:02:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion17to18.SqlToChangeDataGrids.sql

08/09/2020 14:02:59: 
USE [LomondClinicalData]

08/09/2020 14:02:59: 
-- Delete columns no longer available in views
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Patient_Case_Numbers';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Patient_Test_Count';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Patient_Case_Count';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Facility_PatientCount';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Facility_StaffMemberCount';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Facility_Rdt_ExternalDataTransferCount';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Facility_TestCount';
DELETE FROM [ColumnSetColumn] WHERE [ColumnId] = 'Staff_Member_Is_Referenced';
-- Add report creation date to Reports data grid
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), (SELECT [Key] FROM ColumnSet WHERE [Name] = 'Relatórios'), 'Report_CreationDate', 50, 6, 1)
UPDATE [ColumnSetColumn] SET [Order] = 7 
WHERE [ColumnSetKey] = (SELECT [Key] FROM ColumnSet WHERE [Name] = 'Relatórios') 
AND [ColumnId] = 'Test_Facility_Name'
UPDATE [ColumnSetColumn] SET [Order] = 8
WHERE [ColumnSetKey] = (SELECT [Key] FROM ColumnSet WHERE [Name] = 'Relatórios') 
AND [ColumnId] = 'Test_Responsible_Staff_Name'
UPDATE [ColumnSetColumn] SET [Order] = 9
WHERE [ColumnSetKey] = (SELECT [Key] FROM ColumnSet WHERE [Name] = 'Relatórios') 
AND [ColumnId] = 'Test_TypePickList (Icons)'
-- Recreate the Cases data grid
DELETE FROM [RoleDataGrid] WHERE [DataGridId] = 'CasesDataGrid'
DELETE FROM [Filter] WHERE [DataGridId] = 'CasesDataGrid'
DELETE FROM [ColumnSetColumn] WHERE [ColumnSetKey] = (SELECT [Key] FROM ColumnSet WHERE [Name] = 'Processos')
DELETE FROM [ColumnSet] WHERE [DataGridId] = 'CasesDataGrid'
INSERT INTO [ColumnSet] ([Key], [Name], [Description], [DataGridId], [IsPreInstalled]) 
VALUES ('2F7AA987-677B-4071-ABA2-9814BB62E879', 'Processos', 'Conjunto de colunas de processos padrão', 'CasesDataGrid', 1);
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_Number',								50,		1,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Patient_Id',									50,		2,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Patient_Name (Last name first)',				100,	3,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_TypePickList',							50,		4,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_OpenedDate',							50,		5,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Case_ClosedDate',							50,		6,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Patient_BirthDate',							50,		7,	1),
(newid(), '2F7AA987-677B-4071-ABA2-9814BB62E879', 'Patient_Organisation',						50,		8,	1)

08/09/2020 14:02:59: 
INSERT INTO [Filter] ([Key], [Name], [Description], [DataGridId], [Criteria], [IsPreInstalled], [SortColumnId], [SortOrder]) VALUES 
('F2169B13-C604-4CFD-AC0A-35AC02F7261B', 'Filtro de todos os processos', 'Filtro de todos os processos padrão', 'CasesDataGrid', '@ALL', 1, 'Case_OpenedDate', 1),
('1C8A44D5-36A7-4F47-ADBC-CAE82E24BD6D', 'Filtro não especificado dos processos', 'Filtro não especificado dos processos padrão', 'CasesDataGrid', '[Case_TypePickList]=0', 1, 'Case_OpenedDate', 1),
('83EAF0CB-0B5B-4B81-A15B-E3C3607D7711', 'Filtro dos internados dos processos', 'Filtro dos internados dos processos padrão', 'CasesDataGrid', '[Case_TypePickList]=1', 1, 'Case_OpenedDate', 1),
('4E3AD298-2714-4ABE-ACD4-2687FD4A75E5', 'Filtro dos pacientes ambulatoriais dos processos', 'Filtro dos pacientes ambulatoriais dos processos padrão', 'CasesDataGrid', '[Case_TypePickList]=2', 1, 'Case_OpenedDate', 1),
('1BF0113F-D6A0-4FE3-B348-2E321D520DA1', 'Filtro de casos abertos', 'Filtro de casos abertos padrão', 'CasesDataGrid', '[Case_ClosedDate] IS NULL', 1, 'Case_OpenedDate', 1),
('B9FA638E-74F2-4919-B1FB-807C575EED6B', 'Filtro de casos encerrados', 'Filtro de casos encerrados padrão', 'CasesDataGrid', '[Case_ClosedDate] IS NOT NULL', 1, 'Case_OpenedDate', 1);

08/09/2020 14:02:59: 
INSERT INTO [RoleDataGrid] ([Key], [RoleKey], [Caption], [DataGridId], [FilterKey], [ColumnSetKey], [Order]) VALUES 
(newid(), (SELECT [Key] FROM [Role] WHERE [Name] = 'Modelo de função'), 'Tudo', 'CasesDataGrid', 'F2169B13-C604-4CFD-AC0A-35AC02F7261B', '2F7AA987-677B-4071-ABA2-9814BB62E879', 0),
(newid(), (SELECT [Key] FROM [Role] WHERE [Name] = 'Modelo de função'), 'Não especificado', 'CasesDataGrid', '1C8A44D5-36A7-4F47-ADBC-CAE82E24BD6D', '2F7AA987-677B-4071-ABA2-9814BB62E879', 1),
(newid(), (SELECT [Key] FROM [Role] WHERE [Name] = 'Modelo de função'), 'No Paciente', 'CasesDataGrid', '83EAF0CB-0B5B-4B81-A15B-E3C3607D7711', '2F7AA987-677B-4071-ABA2-9814BB62E879', 2),
(newid(), (SELECT [Key] FROM [Role] WHERE [Name] = 'Modelo de função'), 'Fora do Paciente', 'CasesDataGrid', '4E3AD298-2714-4ABE-ACD4-2687FD4A75E5', '2F7AA987-677B-4071-ABA2-9814BB62E879', 3),
(newid(), (SELECT [Key] FROM [Role] WHERE [Name] = 'Modelo de função'), 'Aberto', 'CasesDataGrid', '1BF0113F-D6A0-4FE3-B348-2E321D520DA1', '2F7AA987-677B-4071-ABA2-9814BB62E879', 4),
(newid(), (SELECT [Key] FROM [Role] WHERE [Name] = 'Modelo de função'), 'Encerrado', 'CasesDataGrid', 'B9FA638E-74F2-4919-B1FB-807C575EED6B', '2F7AA987-677B-4071-ABA2-9814BB62E879', 5);

08/09/2020 14:02:59: 
--Add Test_BulkDeletedOrArchivedState Column 
INSERT INTO [ColumnSetColumn] ([Key], [ColumnSetKey], [ColumnId], [Width], [Order], [IsPreInstalled]) VALUES 
(newid(), (SELECT [Key] FROM [ColumnSet] WHERE [Name] = 'Todos os Testes'),		  'Test_BulkDeletedOrArchivedState (Icons)',	1,	10,	1),
(newid(), (SELECT [Key] FROM [ColumnSet] WHERE [Name] = 'Todos os testes de Holter'), 'Test_BulkDeletedOrArchivedState (Icons)',	1,	10,	1),
(newid(), (SELECT [Key] FROM [ColumnSet] WHERE [Name] = 'Todos os testes de esforço'), 'Test_BulkDeletedOrArchivedState (Icons)',	1,	12, 1)
08/09/2020 14:02:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion17to18.SqlToUpdateTestTable.sql

08/09/2020 14:02:59: 
----------------------------------------------------------------------------------
-- script to update Test Table columns
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:59: 
ALTER TABLE [dbo].[Test] ADD [BulkDeletedOrArchivedState] [int] NOT NULL CONSTRAINT [DF_Test_BulkDeletedOrArchivedState]  DEFAULT ((0))

08/09/2020 14:02:59: 
ALTER TABLE [dbo].[Test]  WITH CHECK ADD  CONSTRAINT [CK_Test_BulkDeletedOrArchivedState] CHECK  (([BulkDeletedOrArchivedState]=(2) OR [BulkDeletedOrArchivedState]=(1) OR [BulkDeletedOrArchivedState]=(0)))

08/09/2020 14:02:59: 
ALTER TABLE [dbo].[Test] DROP CONSTRAINT [CK_Test_Status]

08/09/2020 14:02:59: 
ALTER TABLE [dbo].[Test]  WITH CHECK ADD  CONSTRAINT [CK_Test_Status] CHECK  (([status]=(180) OR [status]=(160) OR [status]=(140) OR [status]=(120) OR [status]=(100) OR [status]=(80) OR [status]=(70) OR [status]=(60) OR [status]=(40) OR [status]=(20) OR [status]=(0)))

08/09/2020 14:02:59: 
ALTER TABLE [dbo].[Test] CHECK CONSTRAINT [CK_Test_Status]

08/09/2020 14:02:59: 
-- fix for QMS 95165
UPDATE [dbo].[Test] SET [TestTypeName] = 'Outro' WHERE TestTypeName IS NULL AND [TestKind] = 6 
08/09/2020 14:02:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateVersionAndCreateIndexes.sql

08/09/2020 14:02:59: 
----------------------------------------------------------------------------------
-- script to update database from version 17 to version 18
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:59: 
------------------- UPDATING THE VERSION OF THE DATABASE
-- update database version from 18 to 19
UPDATE [DatabaseHistory] SET [DatabaseVersion] = 19, [Updated] = getutcdate() 

08/09/2020 14:02:59: 
-- create indexes
CREATE NONCLUSTERED INDEX [IX_OrderRequestedDateTime] ON [dbo].[Test]([OrderRequestedDateTime] ASC)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
08/09/2020 14:02:59: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateOrganisationTable.sql

08/09/2020 14:02:59: 
----------------------------------------------------------------------------------
-- script to update the organisation table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:02:59: 
------------------- UPDATING THE ORGANISATION TABLE
ALTER TABLE [dbo].[Organisation] ADD [IsDefault][bit] NOT NULL CONSTRAINT [DF_Organisation_IsDefault] DEFAULT 0

08/09/2020 14:02:59: 
UPDATE [Organisation] SET [IsDefault] = 1 WHERE [Key] = (SELECT [Value] FROM [Setting] WHERE [Name] = 'DefaultOrganisation')
IF NOT EXISTS (SELECT [Key] FROM [Organisation] WHERE [IsDefault] = 1)
	UPDATE [Organisation] SET [IsDefault] = 1 WHERE [Key] = (SELECT TOP 1 [Key] FROM [Organisation] ORDER BY [CreatedDateTime])

08/09/2020 14:03:00: 
------------------- DELETING DEFAULT ORGANISATION FROM SETTING TABLE
DELETE FROM [Setting] WHERE [Name] = 'DefaultOrganisation'
08/09/2020 14:03:00: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateColumnSetTable.sql

08/09/2020 14:03:00: 
----------------------------------------------------------------------------------
-- script to update the columnset table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:00: 
------------------- UPDATING THE COLUMNSET TABLE DataGridIds to contain the names of the appropriate database view
UPDATE [ColumnSet] SET [DataGridId]='WebGridTestView' WHERE [DataGridId] IN ('HolterTestsDataGrid','AbpTestsDataGrid','ErgospirometryTestsDataGrid','RestingRhythmTestsDataGrid','StressTestsDataGrid','AllTestsDataGrid')

08/09/2020 14:03:00: 
UPDATE [ColumnSet] SET [DataGridId]='WebGridPatientView' WHERE [DataGridId]='PatientsDataGrid'

08/09/2020 14:03:00: 
UPDATE [ColumnSet] SET [DataGridId]='WebGridCaseView' WHERE [DataGridId]='CasesDataGrid'

08/09/2020 14:03:00: 
UPDATE [ColumnSet] SET [DataGridId]='WebGridReportView' WHERE [DataGridId]='ReportsDataGrid'

08/09/2020 14:03:00: 
UPDATE [ColumnSet] SET [DataGridId]='WebGridStaffView' WHERE [DataGridId]='StaffDataGrid'

08/09/2020 14:03:00: 
UPDATE [ColumnSet] SET [DataGridId]='WebGridFacilityView' WHERE [DataGridId]='FacilityDataGrid'

08/09/2020 14:03:00: 
ALTER TABLE [ColumnSet] ALTER COLUMN [Description] NVARCHAR(MAX);

08/09/2020 14:03:00: 
ALTER TABLE [ColumnSet] ALTER COLUMN [Name] NVARCHAR(128);

08/09/2020 14:03:00: 
EXEC sp_rename 'ColumnSet.DataGridId', 'DatabaseView','COLUMN'
08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateFilterTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to update the columnset table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:01: 
------------------- UPDATING THE COLUMNSET TABLE DataGridIds to contain the names of the appropriate database view
UPDATE [Filter] SET [DataGridId]='WebGridTestView' WHERE [DataGridId] IN ('HolterTestsDataGrid','AbpTestsDataGrid','ErgospirometryTestsDataGrid','RestingRhythmTestsDataGrid','StressTestsDataGrid','AllTestsDataGrid')

08/09/2020 14:03:01: 
UPDATE [Filter] SET [DataGridId]='WebGridPatientView' WHERE [DataGridId]='PatientsDataGrid'

08/09/2020 14:03:01: 
UPDATE [Filter] SET [DataGridId]='WebGridCaseView' WHERE [DataGridId]='CasesDataGrid'

08/09/2020 14:03:01: 
UPDATE [Filter] SET [DataGridId]='WebGridReportView' WHERE [DataGridId]='ReportsDataGrid'

08/09/2020 14:03:01: 
UPDATE [Filter] SET [DataGridId]='WebGridStaffView' WHERE [DataGridId]='StaffDataGrid'

08/09/2020 14:03:01: 
UPDATE [Filter] SET [DataGridId]='WebGridFacilityView' WHERE [DataGridId]='FacilityDataGrid'

08/09/2020 14:03:01: 
ALTER TABLE [Filter] ALTER COLUMN [Description] NVARCHAR(MAX);

08/09/2020 14:03:01: 
EXEC sp_rename 'Filter.DataGridId', 'DatabaseView','COLUMN'
08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToCreateStaffMemberRolesTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to create the staff member roles table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:01: 
SET ANSI_NULLS ON

08/09/2020 14:03:01: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:01: 
CREATE TABLE [dbo].[StaffMemberRole](
	[StaffMemberKey] [uniqueidentifier] NOT NULL,
	[RoleKey] [uniqueidentifier] NOT NULL,
	[Sequence] [int] NOT NULL DEFAULT(0)
) ON [PRIMARY]

08/09/2020 14:03:01: 
ALTER TABLE [dbo].[StaffMemberRole]  WITH CHECK ADD  CONSTRAINT [FK_StaffMemberRole_StaffMember] FOREIGN KEY([StaffMemberKey])
REFERENCES [dbo].[StaffMember] ([Key])

08/09/2020 14:03:01: 
ALTER TABLE [dbo].[StaffMemberRole] WITH CHECK ADD CONSTRAINT [PK_StaffMemberRole] PRIMARY KEY (StaffMemberKey, RoleKey)

08/09/2020 14:03:01: 
ALTER TABLE [dbo].[StaffMemberRole] CHECK CONSTRAINT [FK_StaffMemberRole_StaffMember]

08/09/2020 14:03:01: 
ALTER TABLE [dbo].[StaffMemberRole]  WITH CHECK ADD  CONSTRAINT [FK_StaffMemberRoles_Role] FOREIGN KEY([RoleKey])
REFERENCES [dbo].[Role] ([Key])

08/09/2020 14:03:01: 
ALTER TABLE [dbo].[StaffMemberRole] CHECK CONSTRAINT [FK_StaffMemberRoles_Role]

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- Populate the table with any current roles.
----------------------------------------------------------------------------------
INSERT INTO [dbo].StaffMemberRole ([StaffMemberKey], [RoleKey])
SELECT [Key], [RoleKey] 
FROM [dbo].StaffMember
WHERE [RoleKey] IS NOT NULL;
----------------------------------------------------------------------------------
-- Remove the Role field from the staffMember table. (It's here as it has to be
-- done after this table has been created.
----------------------------------------------------------------------------------
ALTER TABLE [dbo].StaffMember
DROP  CONSTRAINT FK_Staff_RoleKey;
ALTER TABLE [dbo].StaffMember
DROP COLUMN [RoleKey];

08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateRoleTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to update the role table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:01: 
------------------- UPDATING THE ROLE TABLE
ALTER TABLE [dbo].[Role] DROP CONSTRAINT [DF_Role_PathfinderDigitalPermission];
ALTER TABLE [dbo].[Role] DROP COLUMN [PathfinderDigitalPermission];
ALTER TABLE [dbo].[Role] DROP CONSTRAINT  [DF_Role_LifescreenPermission];
ALTER TABLE [dbo].[Role] DROP COLUMN [LifescreenPermission];

08/09/2020 14:03:01: 
------------------- Add the new mandatory filter columns.
ALTER TABLE [dbo].[Role] ADD [PatientFilter] [varchar](64) NOT NULL DEFAULT('None');
ALTER TABLE [dbo].[Role] ADD [TestFilter] [varchar](64) NOT NULL DEFAULT('None');

08/09/2020 14:03:01: 
------------ convert the old mandatory filter columns to the new.
DECLARE @TableCursor CURSOR;
DECLARE @RoleKey uniqueidentifier;
DECLARE @ByWard bit;
DECLARE @ByOrganisation bit;
DECLARE @ByFacility bit;
BEGIN
	SET @TableCursor = CURSOR FOR 
	SELECT [Key], [FilterByMyWard], [FilterByMyOrganisation], [FilterByMyFacility]
	FROM [dbo].[Role]
	OPEN @TableCursor
	FETCH NEXT FROM @TableCursor
	INTO @RoleKey, @ByWard, @ByOrganisation, @ByFacility
	WHILE @@FETCH_STATUS = 0
	BEGIN
		BEGIN
			IF @ByWard = 1
				UPDATE [dbo].[Role] SET [Role].[PatientFilter] = 'RestrictToMyWard' WHERE [Role].[Key] = @RoleKey;
			ELSE IF @ByOrganisation = 1
				UPDATE [dbo].[Role] SET [Role].[PatientFilter] = 'RestrictToMyOrganisation' WHERE [Role].[Key] = @RoleKey;
			ELSE IF @ByFacility = 1
				UPDATE [dbo].[Role] SET [Role].[PatientFilter] = 'RestrictToMyFacility' WHERE [Role].[Key] = @RoleKey;
			ELSE
				UPDATE [dbo].[Role] SET [Role].[PatientFilter] = 'None' WHERE [Role].[Key] = @RoleKey;
		END
		/** Get the next row. **/
		FETCH NEXT FROM @TableCursor
		INTO @RoleKey, @ByWard, @ByOrganisation, @ByFacility	
	END;
	CLOSE @TableCursor;
    DEALLOCATE @TableCursor;
END;
------------- Remove the old columns
EXEC [dbo].DeleteDefaultConstraintForColumn @TableName = '[dbo].Role', @ColumnName = 'FilterByMyFacility'
EXEC [dbo].DeleteDefaultConstraintForColumn @TableName = '[dbo].Role', @ColumnName = 'FilterByMyWard'
EXEC [dbo].DeleteDefaultConstraintForColumn @TableName = '[dbo].Role', @ColumnName = 'FilterByMyOrganisation'
ALTER TABLE [dbo].[Role] DROP COLUMN [FilterByMyFacility];
ALTER TABLE [dbo].[Role] DROP COLUMN [FilterByMyWard];
ALTER TABLE [dbo].[Role] DROP COLUMN [FilterByMyOrganisation];

08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateSettingTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to update the organisation table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:01: 
------------------- UPDATING THE SETTING TABLE
ALTER TABLE [Setting] ALTER COLUMN [Value] NVARCHAR(300) NULL;

08/09/2020 14:03:01: 
DECLARE @EncryptionKey nvarchar(32)
DECLARE @EncryptionInitialisationVector nvarchar(16)
SELECT @EncryptionKey = REPLACE(newid(),'-','')
SELECT @EncryptionInitialisationVector = LEFT(REPLACE(newid(),'-',''), 16)
INSERT INTO [Setting] ([Name], [Value]) VALUES ('SecuritySetting_EncryptionKey', @EncryptionKey), ('SecuritySetting_EncryptionInitialisationVector', @EncryptionInitialisationVector)
08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdatePatientTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to update the patient table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:01: 
------------------- UPDATING THE PATIENT TABLE
ALTER TABLE [Patient] DROP COLUMN [EnableSendingSms];
ALTER TABLE [Patient] DROP COLUMN [SmsCategory];

08/09/2020 14:03:01: 
ALTER TABLE [Patient] ALTER COLUMN [Notes] NVARCHAR(MAX);
08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateAbpProtocolsTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to update the abp protocols tables
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:01: 
------------------- UPDATING THE ABP PROTOCOLS TABLE
ALTER TABLE [AbpProtocols] DROP COLUMN [RandomInterval];
ALTER TABLE [AbpProtocols] DROP COLUMN [ComfortModeEnabled]

08/09/2020 14:03:01: 
ALTER TABLE [AbpProtocols] ADD [ComfortModePressure] INT NOT NULL CONSTRAINT [DF_AbpProtocol_ComfortModePressure]  DEFAULT (170);
ALTER TABLE [AbpProtocols] ADD [IsChildModeEnabled] BIT NOT NULL DEFAULT (0);

08/09/2020 14:03:01: 
ALTER TABLE [AbpMeasurementIntervals] DROP COLUMN [EndHour];
08/09/2020 14:03:01: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateReportTable.sql

08/09/2020 14:03:01: 
----------------------------------------------------------------------------------
-- script to update the report table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE REPORT TABLE
ALTER TABLE [Report] ALTER COLUMN [Comments] NVARCHAR(MAX);

08/09/2020 14:03:02: 
ALTER TABLE [Report] ALTER COLUMN [AdditionalData] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateTorridonAnalyserUserSetupTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the torridon analyser user setup table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE TORRIDON ANALYSER USER SETUP TABLE
ALTER TABLE [TorridonAnalyserUserSetup] ALTER COLUMN [SetupData] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateAbpAnalysisTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the ABP analysis table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE ABP ANALYSIS TABLE
ALTER TABLE [AbpAnalysis] ALTER COLUMN [Comment] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateAnalysisTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the analysis table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE ANALYSIS TABLE
ALTER TABLE [Analysis] ALTER COLUMN [AdditionalData] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateErgospirometryTestTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the ergospirometry test table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE ERGOSPIROMETRY TEST TABLE
ALTER TABLE [ErgospirometryTest] ALTER COLUMN [ErgometryComments] NVARCHAR(MAX);

08/09/2020 14:03:02: 
ALTER TABLE [ErgospirometryTest] ALTER COLUMN [SpirometrySummary] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateExternalDataTransferTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the external data transfer table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE EXTERNAL DATA TRANSFER TABLE
ALTER TABLE [ExternalDataTransfer] ALTER COLUMN [ClinicalDataKeys] NVARCHAR(MAX);

08/09/2020 14:03:02: 
ALTER TABLE [ExternalDataTransfer] ALTER COLUMN [ReportKeys] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateFacilityTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the facility table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE FACILITY TABLE
ALTER TABLE [Facility] ALTER COLUMN [Notes] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateRecordingTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the recording table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE RECORDING TABLE
ALTER TABLE [Recording] ALTER COLUMN [Comments] NVARCHAR(MAX);

08/09/2020 14:03:02: 
ALTER TABLE [Recording] ALTER COLUMN [AdditionalData] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateStaffMemberTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the staff member table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE STAFF MEMBER TABLE
ALTER TABLE [StaffMember] ALTER COLUMN [Notes] NVARCHAR(MAX);

08/09/2020 14:03:02: 
ALTER TABLE [StaffMember] ADD [PointOfCare] NVARCHAR(100) NULL;
ALTER TABLE [StaffMember] ADD [FailedLoginCount] INT NOT NULL CONSTRAINT [DF_StaffMember_FailedLoginCount] DEFAULT (0);

08/09/2020 14:03:02: 
ALTER TABLE [StaffMember] ADD [MostRecentLoginFailTime] DATETIME NULL;

08/09/2020 14:03:02: 
ALTER TABLE [StaffMember] ADD [DomainController] NVARCHAR(255) NULL;

08/09/2020 14:03:02: 
ALTER TABLE [StaffMember] ADD [ActiveDirectorySid] NVARCHAR(184) NULL;
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateTestTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the test table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE TEST TABLE
ALTER TABLE [Test] ADD [SecurityId] NVARCHAR(32) NULL 

08/09/2020 14:03:02: 
ALTER TABLE [Test] ALTER COLUMN [OrderComments] NVARCHAR(MAX);

08/09/2020 14:03:02: 
ALTER TABLE [Test] ALTER COLUMN [Comments] NVARCHAR(MAX);
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToCreatePasswordHistoryTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to create the password history table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
SET ANSI_NULLS ON

08/09/2020 14:03:02: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:02: 
CREATE TABLE [dbo].[PasswordHistory](
	[Key] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[StaffMemberKey] [uniqueidentifier]  NOT NULL,
	[Password] [nvarchar](255) NULL,
	[CreatedDateTime] [datetime] NOT NULL CONSTRAINT [DF_PasswordHistory_CreatedDateTime]  DEFAULT (getutcdate()),
 CONSTRAINT [PK_PasswordHistory] PRIMARY KEY CLUSTERED 
(
	[Key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 14:03:02: 
ALTER TABLE [dbo].[PasswordHistory]  WITH CHECK ADD  CONSTRAINT [FK_PasswordHistory_StaffMemberKey] FOREIGN KEY([StaffMemberKey]) 
REFERENCES [dbo].[StaffMember] ([Key]) ON DELETE CASCADE

08/09/2020 14:03:02: 
INSERT INTO [PasswordHistory] ([Key], [StaffMemberKey], [Password], [CreatedDateTime])
SELECT newid(), [Key], [Password], getutcdate()
FROM [StaffMember]
WHERE [Password] IS NOT NULL
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateSessionTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the session table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE SESSION TABLE
ALTER TABLE [Session] DROP COLUMN [ReferenceCount];

08/09/2020 14:03:02: 
ALTER TABLE [Session] ADD [UserInactivityExpiryTime] DATETIME NULL;

08/09/2020 14:03:02: 
ALTER TABLE [Session] ADD [MostRecentClickOncePing] DATETIME NULL;

08/09/2020 14:03:02: 
sp_rename 'session.ExpiryTime', 'ClientInactivityExpiryTime', 'COLUMN';
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Session]') AND name = N'IX_ExpiryTime_LoginKind')
BEGIN
EXEC sp_rename N'Session.IX_ExpiryTime_LoginKind', N'IX_ClientInactivityExpiryTime_LoginKind', N'INDEX';   
END
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateFileStoreTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to update the file store table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
------------------- UPDATING THE FILESTORE TABLE
ALTER TABLE [FileStore] ADD [EncryptionKey] [nvarchar](32) NULL
ALTER TABLE [FileStore] ADD [EncryptionInitialisationVector] [nvarchar](16) NULL
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToCreateActiveDirectoryGroupTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to create the Active Directory group table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
/****** Object:  Table [dbo].[ActiveDirectoryGroup]    Script Date: 02/07/2018 16:31:56 ******/
SET ANSI_NULLS ON

08/09/2020 14:03:02: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:02: 
CREATE TABLE [dbo].[ActiveDirectoryGroup](
	[Name] [nvarchar](64) NOT NULL,
 CONSTRAINT [PK_ActiveDirectoryGroup] PRIMARY KEY CLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToCreateRoleActiveDirectoryGroupTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to create the RoleActiveDirectoryGroup table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
SET ANSI_NULLS ON

08/09/2020 14:03:02: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:02: 
CREATE TABLE [dbo].[RoleActiveDirectoryGroup](
	[RoleKey] [uniqueidentifier] NOT NULL,
	[ActiveDirectoryGroupName] [nvarchar](64) NOT NULL,
 CONSTRAINT [PK_RoleActiveDirectoryGroup] PRIMARY KEY CLUSTERED 
(
	[RoleKey] ASC,
	[ActiveDirectoryGroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

08/09/2020 14:03:02: 
ALTER TABLE [dbo].[RoleActiveDirectoryGroup]  WITH CHECK ADD  CONSTRAINT [FK_RoleActiveDirectoryGroup_ActiveDirectoryGroupName] FOREIGN KEY([ActiveDirectoryGroupName])
REFERENCES [dbo].[ActiveDirectoryGroup] ([Name])

08/09/2020 14:03:02: 
ALTER TABLE [dbo].[RoleActiveDirectoryGroup]  WITH CHECK ADD  CONSTRAINT [FK_RoleActiveDirectoryGroup_RoleKey] FOREIGN KEY([RoleKey])
REFERENCES [dbo].[Role] ([Key])
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToCreateEditListSettingTable.sql

08/09/2020 14:03:02: 
----------------------------------------------------------------------------------
-- script to create the EditListSetting table
----------------------------------------------------------------------------------
USE [LomondClinicalData]

08/09/2020 14:03:02: 
/****** Object:  Table [dbo].[EditListSetting]    Script Date: 05/07/2018 12:41:59 ******/
SET ANSI_NULLS ON

08/09/2020 14:03:02: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:02: 
CREATE TABLE [dbo].[EditListSetting](
	[EditListId] [nvarchar](100) NOT NULL,
	[ColumnId] [nvarchar](100) NOT NULL,
	[Value] [nvarchar](300) NULL,
	[RowIndex] [int] NOT NULL,
 CONSTRAINT [PK_EditListSetting] PRIMARY KEY CLUSTERED 
(
	[ColumnId] ASC,
	[RowIndex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
08/09/2020 14:03:02: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeVersion18to19.SqlToUpdateRoleDataGrid.sql

08/09/2020 14:03:02: 
use LomondClinicalData;
ALTER TABLE [dbo].[RoleDataGrid] DROP CONSTRAINT PK_RoleDataGrid;
ALTER TABLE [dbo].[RoleDataGrid] DROP CONSTRAINT FK_RoleDataGrid_RoleKey;
exec sp_rename 'LomondClinicalData.dbo.RoleDataGrid', 'RoleDataGridOld'
CREATE TABLE DataGridTab
(
	[Key] uniqueidentifier ROWGUIDCOL NOT NULL,
	[Caption] nvarchar(64) NOT NULL,
	[FilterKey] uniqueidentifier NOT NULL,
	[ColumnSetKey] uniqueidentifier NOT NULL,
	[Sequence] [int] NOT NULL,
	[DataGridKey] uniqueidentifier NOT NULL,
	CONSTRAINT [PK_DataGridTab] PRIMARY KEY CLUSTERED ([Key]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
)

08/09/2020 14:03:02: 
ALTER TABLE [dbo].[DataGridTab] ADD  CONSTRAINT [DF_DataGridTab_Key]  DEFAULT (newid()) FOR [Key]

08/09/2020 14:03:02: 
ALTER TABLE [dbo].[DataGridTab]  WITH CHECK ADD  CONSTRAINT [FK_DataGridTab_ColumnSetKey] FOREIGN KEY([ColumnSetKey])
REFERENCES [dbo].[ColumnSet] ([Key])

08/09/2020 14:03:03: 
ALTER TABLE [dbo].[DataGridTab] CHECK CONSTRAINT [FK_DataGridTab_ColumnSetKey]

08/09/2020 14:03:03: 
ALTER TABLE [dbo].[DataGridTab]  WITH CHECK ADD  CONSTRAINT [FK_DataGridTab_FilterKey] FOREIGN KEY([FilterKey])
REFERENCES [dbo].[Filter] ([Key])

08/09/2020 14:03:03: 
ALTER TABLE [dbo].[DataGridTab] CHECK CONSTRAINT [FK_DataGridTab_FilterKey]

08/09/2020 14:03:03: 
CREATE TABLE DataGrid
(
	[Key] uniqueidentifier NOT NULL,
	[Name] nvarchar(200) NOT NULL,
	[SearchPage] nvarchar(64) NOT NULL,
	[IsPreInstalled] [bit] NOT NULL DEFAULT ((0)),
	[RoleKey] uniqueidentifier NOT NULL, /** This will be removed **/
	CONSTRAINT IX_DataGrid_Name UNIQUE([Name]),   
	CONSTRAINT [PK_DataGrid] PRIMARY KEY CLUSTERED ([Key]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)

08/09/2020 14:03:03: 
ALTER TABLE [dbo].[DataGrid] ADD  CONSTRAINT [DF_DataGrid_Key]  DEFAULT (newid()) FOR [Key]

08/09/2020 14:03:03: 
ALTER TABLE [dbo].[DataGridTab] WITH CHECK ADD CONSTRAINT [FK_DataGridTab_DataGridKey] FOREIGN KEY([DataGridKey])
REFERENCES [dbo].[DataGrid] ([Key]) ON DELETE CASCADE

08/09/2020 14:03:03: 
CREATE TABLE [dbo].[RoleDataGrid]
(
	[RoleKey] uniqueidentifier NOT NULL,
	[DataGridKey] uniqueidentifier NOT NULL,
	CONSTRAINT [PK_RoleDataGrid] PRIMARY KEY ([RoleKey], [DataGridKey]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
	CONSTRAINT [FK_RoleDataGrid_DataGridKey] FOREIGN KEY ([DataGridKey]) REFERENCES [dbo].[DataGrid] ([Key]),
	CONSTRAINT [FK_RoleDataGrid_RoleKey]	 FOREIGN KEY ([RoleKey]) REFERENCES [dbo].[Role] ([Key])
)
DECLARE @TableCursor CURSOR;
DECLARE @DataGridId nvarchar(100);
DECLARE @RoleKey uniqueidentifier;
DECLARE @NameCount int;
DECLARE @Name nvarchar(200);
DECLARE @AlreadyExists int;
BEGIN
	SET @TableCursor = CURSOR FOR 
	SELECT [DataGridId], [RoleKey]
	FROM [dbo].[RoleDataGridOld]
	OPEN @TableCursor
	FETCH NEXT FROM @TableCursor
	INTO @DataGridId, @RoleKey
	WHILE @@FETCH_STATUS = 0
	BEGIN
	SET @AlreadyExists = (SELECT COUNT(*) FROM [dbo].[DataGrid] WHERE [RoleKey] = @RoleKey AND [SearchPage] = @DataGridId);
	IF @AlreadyExists = 0 /** IF already exists get the next row **/
	BEGIN
		SET @NameCount = (SELECT COUNT(*) FROM [dbo].[DataGrid] WHERE [DataGrid].[SearchPage] = @DataGridId);
		IF @NameCount >0
			SET @Name = @DataGridId + Cast(@NameCount AS varchar(100)) ;
		ELSE
			SET @Name = @DataGridId;
		INSERT INTO [dbo].[DataGrid] ([Name], [SearchPage], [RoleKey])
		VALUES(@Name, @DataGridId, @RoleKey);
	END
	/** Get the next row. **/
	FETCH NEXT FROM @TableCursor
	INTO @DataGridId, @RoleKey
	END;
	CLOSE @TableCursor;
    DEALLOCATE @TableCursor;
END;
INSERT INTO [dbo].DataGridTab ([Key], [Caption], [FilterKey], [ColumnSetKey], [Sequence], [DataGridKey])
SELECT old.[Key], old.[Caption], old.[FilterKey], old.[ColumnSetKey], old.[Order], (SELECT [Key] FROM [dbo].[DataGrid] t WHERE t.[RoleKey] = old.[RoleKey] AND t.[SearchPage] = old.[DataGridId])
FROM [dbo].[RoleDataGridOld] old;
INSERT INTO [dbo].[RoleDataGrid] ([DataGridKey], [RoleKey])
SELECT DISTINCT (SELECT [Key] FROM [DataGrid] WHERE [DataGrid].[RoleKey] = old.[RoleKey] AND [DataGrid].[SearchPage] = [old].[DataGridId]), old.[RoleKey]
FROM [dbo].[RoleDataGridOld] old;
DROP TABLE [dbo].[RoleDataGridOld]
ALTER TABLE DataGrid DROP COLUMN [RoleKey]

08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToDropUnusedViews.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
-- drop each of the database views which are no longer used by Sentinel
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'PatientView')
	DROP VIEW [PatientView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'PatientImageView')
	DROP VIEW [PatientImageView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'FacilityView')
	DROP VIEW [FacilityView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'VerifiedFacilityView')
	DROP VIEW [VerifiedFacilityView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'VerifiedStaffMemberView')
	DROP VIEW [VerifiedStaffMemberView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'CaseSummaryView')
	DROP VIEW [CaseSummaryView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'TestSummaryView')
	DROP VIEW [TestSummaryView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'PatientSummaryView')
	DROP VIEW [PatientSummaryView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'StaffMemberSummaryView')
	DROP VIEW [StaffMemberSummaryView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'StaffMemberView')
	DROP VIEW [StaffMemberView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ExtendedExternalDataTransferView')
	DROP VIEW [ExtendedExternalDataTransferView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ExtendedReportView')
	DROP VIEW [ExtendedReportView]

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AbpTestSummaryView')
	DROP VIEW [AbpTestSummaryView]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.SqlToCreateRoleFunctions.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IsStaffMemberAPhysician]') AND TYPE IN ( N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[IsStaffMemberAPhysician];

08/09/2020 14:03:03: 
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IsStaffMemberATechnician]') AND TYPE IN ( N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[IsStaffMemberATechnician];

08/09/2020 14:03:03: 
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StaffMemberRoleNamesAsVarchar]') AND TYPE IN ( N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[StaffMemberRoleNamesAsVarchar];

08/09/2020 14:03:03: 
CREATE FUNCTION IsStaffMemberATechnician (@StaffKey uniqueidentifier)
RETURNS BIT
BEGIN
	DECLARE @Technician AS BIT;
	SELECT
		@Technician = CASE WHEN (SELECT COUNT(*) FROM [Role] WHERE [Role].[TechnicianList] = 1 AND [Role].[Key] IN (SELECT [RoleKey] FROM [StaffMemberRole] WHERE [StaffMemberRole].[StaffMemberKey] = @StaffKey)) >0 THEN 1 ELSE 0 END
	RETURN @Technician;
END;

08/09/2020 14:03:03: 
CREATE FUNCTION IsStaffMemberAPhysician (@StaffKey uniqueidentifier)
RETURNS BIT
BEGIN
	DECLARE @Physician AS BIT;
	SELECT
		@Physician = CASE WHEN (SELECT COUNT(*) FROM [Role] WHERE [Role].[PhysicianList] = 1 AND [Role].[Key] IN (SELECT [RoleKey] FROM [StaffMemberRole] WHERE [StaffMemberRole].[StaffMemberKey] = @StaffKey)) >0 THEN 1 ELSE 0 END
	RETURN @Physician;
END;

08/09/2020 14:03:03: 
CREATE FUNCTION StaffMemberRoleNamesAsVarchar(@StaffKey uniqueidentifier)
RETURNS VARCHAR(MAX)
BEGIN
	RETURN STUFF((	SELECT ', ' + [Role].[Name]
					FROM [Role]
					LEFT OUTER JOIN [StaffMemberRole] ON [Role].[Key] = [StaffMemberRole].[RoleKey]
					WHERE [StaffMemberRole].[StaffMemberKey] = @StaffKey FOR XML PATH('')), 1, 1, '')
END;
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridPatientView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridPatientView')
	DROP VIEW [WebGridPatientView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridPatientView]
AS
SELECT		[Patient].[Key]																				AS RefreshKey,
    		[Patient].[Key]																				AS Patient_Key,
			[Patient].[Status]																			AS Test_PatientInfoStatus, 
			[Organisation].[Name]																		AS Patient_Organisation, 
			[Patient].PatientId																			AS Patient_Id, 
			[Patient].NationalId																		AS Patient_NationalId, 
			[Patient].SecondIdentifier																	AS Patient_SecondId, 
			[Patient].ThirdIdentifier																	AS Patient_ThirdId, 
			[Patient].Title																				AS Patient_Title, 
			[Patient].GivenName																			AS Patient_FirstName, 
			[Patient].FamilyName																		AS Patient_LastName, 
			[Patient].MiddleInitials																	AS Patient_MiddleInitials, 
			[Patient].MaidenName																		AS Patient_MaidenName,
			[dbo].[GenerateNameByGivenNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_FirstNameFirst, 
			[dbo].[GenerateNameByFamilyNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_LastNameFirst,
			[Patient].Gender																			AS Patient_GenderPickList, 
			[Patient].DateOfBirth																		AS Patient_BirthDate, 
			[Patient].Deceased																			AS Patient_DeceasedDate, 
			[Patient].Admitted																			AS Patient_AdmittedDateTime, 
			[Patient].Discharged																		AS Patient_DischargedDateTime, 
			[Patient].CreatedDateTime																	AS Patient_CreatedDateTime, 
			[Patient].UpdatedDateTime																	AS Patient_UpdatedDateTime, 
			[Patient].HeightInMetres																	AS Patient_Height, 
			[Patient].WeightInGrammes																	AS Patient_Weight, 
			[Patient].Ethnicity																			AS Patient_Ethnicity, 
			[Patient].PacemakerType																		AS Patient_PacemakerKind, 
			[Patient].InPatientWard																		AS Patient_InPatient_Ward, 
			[Patient].InPatientPointOfCare																AS Patient_InPatient_PointOfCare, 
			[Patient].InPatientBed																		AS Patient_InPatient_Bed, 
			[Patient].OutPatientWard																	AS Patient_OutPatient_Ward, 
			[Patient].OutPatientPointOfCare																AS Patient_OutPatient_PointOfCare, 
			[Patient].OutPatientBed																		AS Patient_OutPatient_Bed, 
			[Patient].Notes																				AS Patient_Notes, 
			[Patient].AddressLine1																		AS Patient_AddressLine1, 
			[Patient].AddressLine2																		AS Patient_AddressLine2, 
			[Patient].City																				AS Patient_City, 
			[Patient].PostZipCode																		AS Patient_Postcode, 
			[Patient].CountyRegion																		AS Patient_Region, 
			[Patient].Country																			AS Patient_Country, 
			[Patient].HomePhone																			AS Patient_HomeTelephone, 
			[Patient].WorkPhone																			AS Patient_WorkTelephone, 
			[Patient].MobilePhone																		AS Patient_MobileTelephone, 
			[Patient].EmailAddress																		AS Patient_EmailAddress, 
			[Patient].ContactRelationship																AS Patient_Contact_Relationship, 
			[Patient].ContactGivenName																	AS Patient_Contact_FirstName, 
			[Patient].ContactFamilyName																	AS Patient_Contact_LastName, 
			[Patient].ContactHomePhone																	AS Patient_Contact_HomeTelephone, 
			[Patient].ContactMobilePhone																AS Patient_Contact_MobileTelephone, 
			[Patient].InsuranceNumber																	AS Patient_InsuranceNumber, 
			[Patient].UserDefined1Value																	AS Patient_Custom0, 
			[Patient].UserDefined2Value																	AS Patient_Custom1, 
			[Patient].UserDefined3Value																	AS Patient_Custom2, 
			[Patient].UserDefined4Value																	AS Patient_Custom3,
			[Consultant].FreeTextName																	AS Patient_Consultant_Name,
			[ReferringPhysician].FreeTextName															AS Patient_Referring_Name,
			[InPatientFacility].Name																	AS Patient_InPatientFacility_Name,
			[OutPatientFacility].Name																	AS Patient_OutPatientFacility_Name
FROM		[Patient]
			LEFT JOIN [Organisation] ON [Organisation].[Key] = [Patient].[OrganisationKey]
			LEFT JOIN [StaffMember] AS Consultant ON [Patient].[ConsultantKey]=[Consultant].[Key]
			LEFT JOIN [StaffMember] AS ReferringPhysician ON [Patient].[ReferringPhysicianKey]=[ReferringPhysician].[Key]
			LEFT JOIN [Facility] AS [InPatientFacility] ON [Patient].[InPatientFacilityKey]=[InPatientFacility].[Key]
			LEFT JOIN [Facility] AS [OutPatientFacility] ON [Patient].[OutPatientFacilityKey]=[OutPatientFacility].[Key]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridTestView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridTestView')
	DROP VIEW [WebGridTestView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridTestView]
AS
SELECT		[Test].[Key]																					AS RefreshKey,
            [Test].[Key]																					AS Test_Key, 
			[Test].[CaseKey]																				AS Case_Key, 
			[Test].[PatientKey]																				AS Patient_Key, 
			[Test].[TestTypeName]																			AS Test_TypeName,
			[Test].[TestKind]																				AS Test_TypePickList,
			[Test].[CreatedDateTime]																		AS Test_CreatedDateTime, 
            [Test].[RecorderModel]																			AS Test_RecorderModel, 
			[Test].[RecordingStartDateTime]																	AS Test_RecordingStartDateTime, 
			[Recording].[CreationDate]																		AS Recording_CreationDateTime,
			[Test].[Status]																					AS Test_StatusPickList, 
			[Test].[Duration]																				AS Test_Duration, 
			[Test].[Ward]																					AS Test_Ward, 
			[Test].[PointOfCare]																			AS Test_PointOfCare, 
			[Test].[Bed]																					AS Test_Bed, 
			[Test].[LastArchive]																			AS Test_LastArchiveDateTime,
			[Test].[Priority]																				AS Test_PriorityPickList,
            [DownloadFacility].[Name]																		AS Test_Download_Facility_Name, 
			[DownloadFacility].[Abbreviation]																AS Test_Download_Facility_Abbreviation,
            [AnalysisFacility].[Name]																		AS Test_Analysis_Facility_Name, 
			[AnalysisFacility].[Abbreviation]																AS Test_Analysis_Facility_Abbreviation,
            [TestFacility].[Name]																			AS Test_Facility_name, 
			[TestFacility].[Abbreviation]																	AS Test_Facility_Abbreviation,
			[Test].[UserDefined1Value]																		AS Test_Custom0,
			[Test].[UserDefined2Value]																		AS Test_Custom1,
			[Test].[UserDefined3Value]																		AS Test_Custom2,
			[Test].[UserDefined4Value]																		AS Test_Custom3,
            [Organisation].[Name]																			AS Patient_Organisation,
            [Patient].[PatientId]																			AS Patient_Id, 
			[Patient].[SecondIdentifier]																	AS Patient_SecondId, 
			[Patient].[ThirdIdentifier]																		AS Patient_ThirdId, 
			[Patient].[NationalId]																			AS Patient_NationalId,
            [Patient].[Title]																				AS Patient_Title, 
			[Patient].[GivenName]																			AS Patient_FirstName, 
			[Patient].[FamilyName]																			AS Patient_LastName, 
			[dbo].[GenerateNameByGivenNameFirst]([Patient].[FamilyName],[Patient].[GivenName])				AS Patient_FirstNameFirst, 
			[dbo].[GenerateNameByFamilyNameFirst]([Patient].[FamilyName],[Patient].[GivenName])				AS Patient_LastNameFirst,
			[Patient].[MiddleInitials]																		AS Patient_MiddleInitials,                        
            [Patient].[DateOfBirth]																			AS Patient_BirthDate, 
			[Patient].[Status]																				AS Test_PatientInfoStatus, 
			[Patient].[InPatientWard]																		AS Patient_InPatient_Ward, 
			[Patient].[OutPatientWard]																		AS Patient_OutPatient_Ward, 
			[InPatientFacility].[Name]																	    AS Patient_InPatientFacility_Name,
			[OutPatientFacility].[Name]																	    AS Patient_OutPatientFacility_Name,
			[Patient].[UserDefined1Value]																	AS Patient_Custom0,
			[Patient].[UserDefined2Value]																	AS Patient_Custom1,
			[Patient].[UserDefined3Value]																	AS Patient_Custom2,
			[Patient].[UserDefined4Value]																	AS Patient_Custom3,
			[Test].[OrderStatus]																			AS OrderStatus,
            [Case].[CaseNumber]																				AS Case_Number, 
			[Test].[OrderID]																				AS Test_OrderId, 
			[Test].[OrderSource]																			AS Test_OrderSource,
			[Test].[OrderProcedureID]																		AS Test_OrderProcedure,
			[Test].[OrderRequestedDateTime]																	AS Test_OrderRequestedDateTime,
			[Test].[UpdatedDateTime]																		AS Test_Updated_DateTime,
			[Test].[BulkDeletedOrArchivedState]																AS Test_BulkDeletedOrArchivedState,
			[Test].[SecurityId]                                                                             AS Test_SecurityId,
			[Consultant].[FreeTextName]																		AS Test_Responsible_Staff_Name,
			[ReferringPhysician].[FreeTextName]																AS Test_Referring_Staff_Name, 
			(SELECT COUNT(*) AS Expr1
             FROM   dbo.Report
             WHERE  (Status = 3 OR
                     Status = 4) AND (TestKey = dbo.Test.[Key]))											AS Test_ConfirmedReportCount,
            (SELECT COUNT(*) AS Expr1
             FROM   dbo.Report AS Report_2
             WHERE  (Status = 2) AND (TestKey = dbo.Test.[Key]))											AS Test_UnconfirmedReportCount,
            (SELECT COUNT(*) AS Expr1
             FROM dbo.Report AS Report_1
             WHERE (Status = 5) AND (TestKey = dbo.Test.[Key]))												AS Test_DeclinedReportCount
FROM         Test LEFT OUTER JOIN
                      [Case]                                ON [Case].[Key] = Test.CaseKey 
                  INNER JOIN
                      Patient                               ON [Test].PatientKey = Patient.[Key] 
                  LEFT OUTER JOIN 
                      Facility      AS DownloadFacility     ON Test.DownloadFacilityKey = DownloadFacility.[key]
                  LEFT OUTER JOIN 
                      Facility      AS AnalysisFacility     ON Test.AnalysisFacilityKey = AnalysisFacility.[key]
                  LEFT OUTER JOIN 
                      Facility      AS TestFacility         ON Test.FacilityKey = TestFacility.[key] 
				  LEFT OUTER JOIN 
					  [Organisation]                        ON [Organisation].[Key] = [Patient].[OrganisationKey]
				  LEFT OUTER JOIN
				      [Facility]    AS [InPatientFacility]  ON [Patient].[InPatientFacilityKey]=[InPatientFacility].[Key]
			      LEFT OUTER JOIN
				      [Facility]    AS [OutPatientFacility] ON [Patient].[OutPatientFacilityKey]=[OutPatientFacility].[Key]	
				  LEFT OUTER JOIN
					  [StaffMember] AS [Consultant]         ON [Test].[ConsultantKey]=[Consultant].[Key]
				  LEFT OUTER JOIN
				      [StaffMember] AS [ReferringPhysician] ON [Test].[ReferringPhysicianKey]=[ReferringPhysician].[Key]
				  LEFT OUTER JOIN
				      [Recording]                           ON [Recording].[Key] = [Test].[RecordingKey]
					  
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridRecordingView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridRecordingView')
	DROP VIEW [WebGridRecordingView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridRecordingView]
AS
SELECT  [Recording].[Key] AS RefreshKey,
        [Recording].[Key] AS Recording_Key,
		[Test].[Key] AS Test_Key,
		[Test].[RecorderModel] AS Test_RecorderModel, 
		[Recording].[RecordingKind] AS Recording_Kind, 
		[Recording].[Comments] AS Recording_Comments, 
		[Recording].[CreatedDateTime] AS Recording_CreatedDateTime, 
		[Recording].[UpdatedDateTime] AS Recording_UpdatedDateTime
FROM	[Test] INNER JOIN [Recording] ON [Recording].[Key] = [Test].[RecordingKey]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridAnalysisView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridAnalysisView')
	DROP VIEW [WebGridAnalysisView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridAnalysisView]
AS
SELECT  [Analysis].[Key] AS RefreshKey,
        [Analysis].[Key] AS Analysis_Key, 
		[Analysis].[TestKey] AS Test_Key,
		[Analysis].[AnalysisKind] AS Analysis_Kind, 
		[Analysis].[CreationDate] AS Analysis_CreationDate, 
		[Analysis].[CreatedDateTime] AS Analysis_CreatedDateTime, 
		[Analysis].[UpdatedDateTime] AS Analysis_UpdatedDateTime
FROM	[Analysis] 
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridCaseView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridCaseView')
	DROP VIEW [WebGridCaseView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridCaseView]
AS
SELECT		[Case].[Key]																				AS RefreshKey,
			[Case].[Key]																				AS Case_Key, 
			[Patient].[Status]																			AS Test_PatientInfoStatus, 
			[Case].[CaseNumber]																			AS Case_Number, 
			[Case].[CaseKind]																			AS Case_TypePickList, 
			[Case].[DateOpened]																			AS Case_OpenedDate, 
			[Case].[DateClosed]																			AS Case_ClosedDate,
			[Patient].[Key]																				AS Patient_Key, 
			[Organisation].[Name]																		AS Patient_Organisation, 
			[Patient].[PatientId]																		AS Patient_Id, 
			[Patient].[NationalId]																		AS Patient_NationalId,
			[Patient].[SecondIdentifier]																AS Patient_SecondId,
			[Patient].[ThirdIdentifier]																	AS Patient_ThirdId, 
			[Patient].[DateOfBirth]																		AS Patient_BirthDate, 
			[Patient].[Title]																			AS Patient_Title,
			[Patient].[GivenName]																		AS Patient_FirstName, 
			[Patient].[FamilyName]																		AS Patient_LastName, 
			[dbo].[GenerateNameByGivenNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_FirstNameFirst, 
			[dbo].[GenerateNameByFamilyNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_LastNameFirst,
			[Patient].[MiddleInitials]																	AS Patient_MiddleInitials,
			[Patient].[Gender]																			AS Patient_GenderPickList,
			[Patient].[InPatientWard]																	AS Patient_InPatient_Ward, 
			[Patient].[OutPatientWard]																	AS Patient_OutPatient_Ward, 
			[Patient].[InPatientPointOfCare]														    AS Patient_InPatient_PointOfCare,
			[Patient].[OutPatientPointOfCare]															AS Patient_OutPatient_PointOfCare,
			[InPatientFacility].[Name]																	AS Patient_InPatientFacility_Name,
			[OutPatientFacility].[Name]																	AS Patient_OutPatientFacility_Name,
			[Patient].[UserDefined1Value]																AS Patient_Custom0,
			[Patient].[UserDefined2Value]																AS Patient_Custom1,
			[Patient].[UserDefined3Value]																AS Patient_Custom2,
			[Patient].[UserDefined4Value]																AS Patient_Custom3,
			(SELECT COUNT(1) FROM [Test] WHERE [Test].[CaseKey] = [Case].[Key])							AS Case_Test_Count,		
			[Case].[UpdatedDateTime]																	AS Case_UpdatedDateTime			
FROM		[Patient] 
			INNER JOIN [Case] ON [Case].[PatientKey] = [Patient].[Key]
			LEFT OUTER JOIN [Organisation] ON [Organisation].[Key] = [Patient].[OrganisationKey]
			LEFT OUTER JOIN [Facility] AS [InPatientFacility] ON [Patient].[InPatientFacilityKey]=[InPatientFacility].[Key]
			LEFT OUTER JOIN [Facility] AS [OutPatientFacility] ON [Patient].[OutPatientFacilityKey]=[OutPatientFacility].[Key]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridReportView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridReportView')
	DROP VIEW [WebGridReportView]

08/09/2020 14:03:03: 
CREATE VIEW [dbo].[WebGridReportView]
AS
SELECT     
			[Report].[Key]																				AS RefreshKey,
			[Report].[Key]																				AS Report_Key,
			[Report].[Title]																			AS Report_Title, 
			[Report].[ReportKind]																		AS Report_TypePickList, 
			[Report].[Status]																			AS Report_StatusPickList, 
			[Report].[Comments]																			AS Report_Comments, 
			[Report].[CreationDate]																		AS Report_CreationDate, 
			[Test].[Key]																				AS Test_Key, 
			[Test].[TestTypeName]																		AS Test_TypeName, 
			[Test].[TestKind]																			AS Test_TypePickList, 
			[Test].[RecordingStartDateTime]																AS Test_RecordingStartDateTime, 
			[Test].[PatientKey]																			AS Patient_Key, 
			[Test].[Status]																				AS Test_StatusPickList,
			[Test].[UserDefined1Value]																	AS Test_Custom0,
			[Test].[UserDefined2Value]																	AS Test_Custom1,
			[Test].[UserDefined3Value]																	AS Test_Custom2,
			[Test].[UserDefined4Value]																	AS Test_Custom3,
			[Test].[Ward]																				AS Test_Ward,
			[Test].[PointOfCare]																		AS Test_PointOfCare,
			[Case].[CaseNumber]																			AS Case_Number, 
			[Patient].[Status]																			AS Test_PatientInfoStatus, 
			[Patient].[Title]																			AS Patient_Title, 
			[Patient].[GivenName]																		AS Patient_FirstName, 
			[Patient].[FamilyName]																		AS Patient_LastName, 
			[dbo].[GenerateNameByGivenNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_FirstNameFirst, 
			[dbo].[GenerateNameByFamilyNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_LastNameFirst,
			[Patient].[MiddleInitials]																	AS Patient_MiddleInitials, 
			[Patient].[PatientId]																		AS Patient_Id, 
			[Organisation].[Name]																		AS Patient_Organisation,
			[Patient].[NationalId]																		AS Patient_NationalId, 
			[Patient].[Status]																			AS PatientStatus, 
			[Patient].[InPatientWard]																	AS Patient_InPatient_Ward, 
			[Patient].[OutPatientWard]																	AS Patient_OutPatient_Ward, 
			[InPatientFacility].[Name]																	AS Patient_InPatientFacility_Name,
			[OutPatientFacility].[Name]																	AS Patient_OutPatientFacility_Name,
			[Patient].[UserDefined1Value]																AS Patient_Custom0,
			[Patient].[UserDefined2Value]																AS Patient_Custom1,
			[Patient].[UserDefined3Value]																AS Patient_Custom2,
			[Patient].[UserDefined4Value]																AS Patient_Custom3,
			[Test].[OrderID]																			AS Test_OrderId,
			[Facility].[Name]																			AS Test_Facility_Name, 
			[Facility].[Abbreviation]																	AS Test_Facility_Abbreviation,
			[DownloadFacility].[Name]																	AS Test_Download_Facility_Name,
			[DownloadFacility].[Abbreviation]															AS Test_Download_Facility_Abbreviation,
			[AnalysisFacility].[Name]																	AS Test_Analysis_Facility_Name,
			[AnalysisFacility].[Abbreviation]															AS Test_Analysis_Facility_Abbreviation,
			[Consultant].[FreeTextName]																	AS Test_Responsible_Staff_Name,
			[ReferringPhysician].[FreeTextName]															AS Test_Referring_Staff_Name, 
			[Report].[UpdatedDateTime]																	AS Report_UpdatedDateTime
FROM        [Report] 
			LEFT OUTER JOIN [Test]         ON [Report].[TestKey]   = [Test].[Key] 
			LEFT OUTER JOIN [Case]         ON [Test].[CaseKey]     = [Case].[Key] 
			LEFT OUTER JOIN [Patient]      ON [Test].[PatientKey]  = [Patient].[Key] 
			LEFT OUTER JOIN [Organisation] ON [Organisation].[Key] = [Patient].[OrganisationKey]
			LEFT OUTER JOIN [Facility]     ON [Test].[FacilityKey] = [Facility].[Key]
			LEFT OUTER JOIN [StaffMember]  AS [Consultant]         ON [Test].[ConsultantKey]           = [Consultant].[Key]
			LEFT OUTER JOIN [StaffMember]  AS [ReferringPhysician] ON [Test].[ReferringPhysicianKey]   = [ReferringPhysician].[Key]
			LEFT OUTER JOIN [Facility]     AS [InPatientFacility]  ON [Patient].[InPatientFacilityKey] = [InPatientFacility].[Key]
			LEFT OUTER JOIN [Facility]     AS [OutPatientFacility] ON [Patient].[OutPatientFacilityKey]= [OutPatientFacility].[Key]
			LEFT OUTER JOIN [Facility]     AS [DownloadFacility]   ON [Test].[DownloadFacilityKey]     = [DownloadFacility].[Key]
			LEFT OUTER JOIN [Facility]     AS [AnalysisFacility]   ON [Test].[AnalysisFacilityKey]     = [AnalysisFacility].[Key]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridOrderView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridOrderView')
	DROP VIEW [WebGridOrderView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridOrderView]
AS
SELECT      * FROM [WebGridTestView]                      
WHERE       NOT([Test_OrderId] IS NULL OR [Test_OrderId]='')
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridFacilityView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridFacilityView')
	DROP VIEW [WebGridFacilityView]

08/09/2020 14:03:03: 
CREATE VIEW [dbo].[WebGridFacilityView]
AS
	SELECT 
		 F.[Key] AS RefreshKey
		,F.[Key] As Facility_Key
		,F.[Name] As Facility_Name
		,F.[Abbreviation] AS Facility_Abbreviation
		,F.[RemoteDataTransferEnabled] AS Facility_Rdt_RemoteDataTransferEnabled
	FROM [Facility] F
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridStaffView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridStaffView')
	DROP VIEW [WebGridStaffView]

08/09/2020 14:03:03: 
CREATE VIEW [dbo].[WebGridStaffView]
AS
SELECT t.* 
FROM
(
SELECT	    [StaffMember].[Key]             AS RefreshKey,
            [StaffMember].[Key]             AS Staff_Key, 
			[StaffMember].[StaffNumber]     AS Staff_Number, 
			[StaffMember].[StaffRoleKinds]  AS Staff_Type, 
            [StaffMember].[CreatedDateTime] AS Staff_CreatedDateTime, 
			[StaffMember].[UpdatedDateTime] AS Staff_UpdatedDateTime, 
			[StaffMember].[FreeTextName]    AS Staff_Name,
			CASE
				WHEN [Facility].[Abbreviation] IS NOT NULL THEN [StaffMember].[FreeTextName] + ' (' + [Facility].[Abbreviation] + ')'
				ELSE [StaffMember].[FreeTextName]
			END AS Staff_Name_With_Facility,
			[StaffMember].[Department]                               AS Staff_Department,
			[StaffMember].[Ward]                                     AS Staff_Ward,
			[StaffMember].[PointOfCare] As Staff_PointOfCare,
			[StaffMember].[FacilityKey]                              AS Staff_Facility_Key,
			[StaffMember].[Title]                                    AS Staff_Title, 
			[StaffMember].[GivenName]                                AS Staff_FirstName, 
			[StaffMember].[MiddleInitials]                           AS Staff_MiddleInitials, 
			[StaffMember].[FamilyName]                               AS Staff_LastName, 
			[StaffMember].[Username]                                 AS Staff_Username, 
			[StaffMember].[IsLockedOut]                              AS Staff_IsLockedOut, 
			[StaffMember].[IsWindowsUser]                            AS Staff_Authentication,
			[StaffMember].[WorkPhone]                                AS Staff_WorkTelephone,
			[StaffMember].[IsInternal]                               AS Staff_IsPreInstalled,
			[dbo].StaffMemberRoleNamesAsVarchar([StaffMember].[Key]) AS Staff_Role,
			[dbo].IsStaffMemberAPhysician([StaffMember].[Key])       AS Staff_PhysicianList,
			[dbo].IsStaffMemberATechnician([StaffMember].[Key])      AS Staff_TechnicianList,
            [Facility].[Name]                                        AS Staff_Facility_Name, 
			[Facility].[Abbreviation]                                AS Staff_Facility_Abbreviation,
			[Organisation].[Name]                                    AS Staff_Facility_Organisation,
			ROW_NUMBER() OVER(PARTITION BY [StaffMember].[Key] ORDER BY [StaffMember].[Username]) AS RowNumber
FROM        [StaffMember]
			LEFT OUTER JOIN [Facility] ON [StaffMember].[FacilityKey] = [Facility].[Key]
			LEFT OUTER JOIN [Organisation] ON [Organisation].[Key] = [Facility].[OrganisationKey]
WHERE		[Verified] = 1
) t
WHERE t.RowNumber = 1;
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridRoleView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridRoleView')
	DROP VIEW [WebGridRoleView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridRoleView]
AS
SELECT [Role].[Name]                                     AS [RefreshKey],
	   [Role].[Key]                                      AS [Role_Key],
	   [Role].[Name]                                     AS [Role_Name],
	   (SELECT COUNT(*)
	   FROM [dbo].[StaffMemberRole]
	   WHERE [StaffMemberRole].[RoleKey] = [Role].[Key]) AS [Role_Staff_Member_Count],
	   [Role].[IsPreInstalled]                           AS [Role_IsPreInstalled]
FROM [dbo].[Role]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridLoginView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridLoginView')
	DROP VIEW [WebGridLoginView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridLoginView]
AS
SELECT     [Session].[Key] AS RefreshKey,
           [Session].[Key] AS Login_Key,
		   [Session].[IPAddress] AS Login_IpAddress,
		   [Session].[Username] AS Login_Username,
		   [Session].[StartTime] AS Login_StartTime,
		   [Session].[ClientInactivityExpiryTime] AS Login_ClientInactivityExpiryTime,
		   [Session].[UserInactivityExpiryTime] AS Login_UserInactivityExpiryTime,
		   [StaffMember].[FreeTextName] AS Staff_Name,
		   [StaffMember].[StaffNumber] AS Staff_Number,
		   [StaffMember].[WorkPhone] AS Staff_WorkTelephone,
		   [Role].[Name] AS Staff_Role
FROM [Session] 
INNER JOIN [StaffMember] ON [StaffMember].Username = [Session].[Username]
LEFT OUTER JOIN [StaffMemberRole] ON [StaffMember].[Key] = [StaffMemberRole].StaffMemberKey
LEFT OUTER JOIN [Role] ON [StaffMemberRole].[RoleKey] = [Role].[Key]
WHERE [LoginKind]<>0 AND [ClientInactivityExpiryTime]>=getutcdate() AND [UserInactivityExpiryTime]>=getutcdate()
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridAuditView.sql

08/09/2020 14:03:03: 
USE [LomondAuditData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridAuditView')
	DROP VIEW [WebGridAuditView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridAuditView]
AS
SELECT		[Key]														AS RefreshKey,
			InsertDate													AS Audit_Date,
			Username													AS Staff_Username,
			[Event]														AS Audit_Event,
			CASE 
				WHEN LEN([Description]) <= 255 THEN [Description] 
				ELSE LEFT([Description], 252) + '...'
			END															AS [Audit_Description]
FROM		AuditTrail 
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridAuditByRelatedRecordView.sql

08/09/2020 14:03:03: 
USE [LomondAuditData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridAuditByRelatedRecordView')
	DROP VIEW [WebGridAuditByRelatedRecordView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridAuditByRelatedRecordView]
AS
SELECT		[RelatedObject].[Key]										AS RefreshKey,
			[AuditTrail].InsertDate										AS Audit_Date,
			[AuditTrail].Username										AS Staff_Username,
			[AuditTrail].[Event]										AS Audit_Event,
			CASE 
				WHEN LEN([Description]) <= 255 THEN [Description] 
				ELSE LEFT([Description], 252) + '...'
			END															AS [Audit_Description],
			[RelatedObject].[ObjectId]  AS Audit_RelatedRecordKey
FROM		[RelatedObject] INNER JOIN [AuditTrail] ON [RelatedObject].[AuditTrailKey]=[AuditTrail].[Key]
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridRecordLockView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridRecordLockView')
	DROP VIEW [WebGridRecordLockView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridRecordLockView]
AS
SELECT		[RecordInUse].[Key]																			AS RefreshKey,
			[RecordInUse].[Key]																			AS RecordLock_Key,
			[RecordInUse].[ExpiryTime]																	AS RecordLock_ExpiryTime,
			[RecordInUse].[SmartClientCount]															AS RecordLock_SmartClientCount,
			[RecordInUse].[WebSiteCount]																AS RecordLock_WebSiteCount,
			[RecordInUse].[Description]																	AS RecordLock_Description,
			[StaffMember].[Username]																	AS Staff_Username,
			[StaffMember].[FreeTextName]																AS Staff_Name,
			[StaffMember].[Department]																	AS Staff_Department,
			[StaffMember].[Ward]																		AS Staff_Ward,
			[Facility].[Name]																			AS Staff_Facility_Name,
			[Facility].[Abbreviation]																	AS Staff_Facility_Abbreviation,
			[FacilityOrganisationName].[Name]															AS Staff_Facility_Organisation,
			[Patient].[PatientId]																		AS Patient_Id,
			[PatientOrganisationName].[Name]															AS Patient_Organisation,
			[Patient].[FamilyName]																		AS Patient_LastName,
			[Patient].[GivenName]																		AS Patient_FirstName,
			[dbo].[GenerateNameByGivenNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_FirstNameFirst, 
			[dbo].[GenerateNameByFamilyNameFirst]([Patient].[FamilyName],[Patient].[GivenName])			AS Patient_LastNameFirst
FROM		[RecordInUse] 
			INNER JOIN [StaffMember] ON [RecordInUse].[UserKey]=[StaffMember].[Key]
			LEFT OUTER JOIN [Facility] ON [StaffMember].[FacilityKey]=[Facility].[Key]
			LEFT OUTER JOIN (
				SELECT [Facility].[Key], [Organisation].[Name]
				FROM [Facility]
				LEFT OUTER JOIN [Organisation] ON [Organisation].[Key] = [Facility].[OrganisationKey]) AS FacilityOrganisationName
					ON [FacilityOrganisationName].[Key] = [Facility].[Key]
			INNER JOIN [Patient] ON [RecordInUse].[PatientKey]=[Patient].[Key]
			LEFT OUTER JOIN (
				SELECT [Patient].[Key], [Organisation].[Name]
				FROM [Patient]
				LEFT OUTER JOIN [Organisation] ON [Organisation].[Key] = [Patient].[OrganisationKey]) AS PatientOrganisationName
					ON [PatientOrganisationName].[Key] = [Patient].[Key]
			LEFT OUTER JOIN [Organisation] ON [Organisation].[Key] = [Patient].[OrganisationKey]
WHERE		([RecordInUse].[SmartClientCount]>0 OR [RecordInUse].[WebSiteCount]>0) AND [RecordInUse].[ExpiryTime]>=GETUTCDATE()
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridAbpProtocolView.sql

08/09/2020 14:03:03: 
USE [LomondClinicalData]

08/09/2020 14:03:03: 
SET ANSI_NULLS ON

08/09/2020 14:03:03: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:03: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridAbpProtocolView')
	DROP VIEW [WebGridAbpProtocolView]

08/09/2020 14:03:03: 
CREATE VIEW [WebGridAbpProtocolView]
AS
SELECT     Name AS RefreshKey,
		   Name AS AbpProtocol_Name
FROM       [AbpProtocols] 
08/09/2020 14:03:03: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridAbpStatisticsView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridAbpStatisticsView')
	DROP VIEW [WebGridAbpStatisticsView]

08/09/2020 14:03:04: 
CREATE VIEW [WebGridAbpStatisticsView]
AS
SELECT     Name AS RefreshKey,
		   Name AS AbpStatistics_Name
FROM       AbpMeasurementLimits 
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridExternalDataTransferView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridExternalDataTransferView')
	DROP VIEW [WebGridExternalDataTransferView]

08/09/2020 14:03:04: 
CREATE VIEW [WebGridExternalDataTransferView]
AS
SELECT		ExternalDataTransfer.[Key] AS RefreshKey, 
			ExternalDataTransfer.Started, 
			ExternalDataTransfer.Finished,
			ExternalDataTransfer.Status, 
            ExternalDataTransfer.LastErrorDateTime, 
			ExternalDataTransfer.LastErrorMessage, 
			ExternalDataTransfer.ClinicalDataKeys, 
            ExternalDataTransfer.ReportKeys, 
			Facility.Name AS FacilityName, 
			ExternalDataTransfer.OriginatingPackageVersion AS OriginatingPackageVersion,
			ISNULL(WebGridTestView.Patient_Id, WebGridReportView.Patient_Id) AS PatientID, 
			ISNULL(WebGridTestView.Patient_Title, WebGridReportView.Patient_Title) AS PatientTitle, 
			ISNULL(WebGridTestView.Patient_FirstName, WebGridReportView.Patient_FirstName) AS PatientGivenName, 
			ISNULL(WebGridTestView.Patient_LastName, dbo.WebGridReportView.Patient_LastName) AS PatientFamilyName, 
			ISNULL(WebGridTestView.Patient_MiddleInitials, WebGridReportView.Patient_MiddleInitials) AS PatientMiddleInitials, 
            ISNULL(WebGridTestView.Test_TypePickList, dbo.WebGridReportView.Test_TypePickList) AS TestKind, 
			WebGridReportView.Report_TypePickList, 
            WebGridReportView.Report_Title AS ReportTitle, 
			ExternalDataTransfer.[Key]
FROM        ExternalDataTransfer INNER JOIN
				Facility ON dbo.ExternalDataTransfer.FacilityKey = Facility.[Key] 
			LEFT OUTER JOIN
				WebGridTestView ON ExternalDataTransfer.DataKey = WebGridTestView.[Test_Key] 
			LEFT OUTER JOIN
				WebGridReportView ON ExternalDataTransfer.DataKey = WebGridReportView.[Report_Key]
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridPatientCentricView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridPatientCentricView')
	DROP VIEW [WebGridPatientCentricView]

08/09/2020 14:03:04: 
CREATE VIEW [dbo].[WebGridPatientCentricView]
AS
	SELECT	 T.[Key]									AS RefreshKey
			,P.[Key]									AS Patient_Key
			,C.[Key]									AS Case_Key
			,T.[Key]									AS Test_Key			
			,T.[CreatedDateTime]						AS CreatedDateTime
			,T.[UpdatedDateTime]						AS UpdatedDateTime
			,C.[CaseNumber]								AS Case_Number
			,T.[OrderID]								AS Test_OrderId
			,T.[Status]									AS Test_StatusPickList
			,T.[TestKind]								AS Test_TypePickList
			,T.[TestTypeName]							AS Test_TypeName
			,(SELECT COUNT(1) FROM dbo.Report
				WHERE ([Status] = 3 OR [Status] = 4)
				AND Report.TestKey = T.[Key])			AS Test_ConfirmedReportCount
			,(SELECT COUNT(1) FROM dbo.Report
				WHERE ([Status] = 2)
				AND Report.TestKey = T.[Key])			AS Test_UnconfirmedReportCount
			,(SELECT COUNT(1) FROM dbo.Report
				WHERE ([Status] = 5)
				AND Report.TestKey = T.[Key])			AS Test_DeclinedReportCount
	FROM dbo.[Patient] P
	INNER JOIN dbo.[Test] T ON P.[Key] = T.[PatientKey]
	LEFT OUTER JOIN dbo.[Case] C ON T.[CaseKey] = C.[Key]
	UNION ALL
	SELECT	 
			 C.[Key]									AS RefreshKey
			,P.[Key]									AS Patient_Key
			,C.[Key]									AS Case_Key
			,NULL										AS Test_Key
			,C.[CreatedDateTime]						AS CreatedDateTime
			,C.[UpdatedDateTime]						AS UpdatedDateTime
			,C.[CaseNumber]								AS Case_Number
			,NULL										AS Test_OrderId
			,NULL										AS Test_StatusPickList
			,NULL										AS Test_TypePickList
			,NULL										AS Test_TypeName
			,0											AS Test_ConfirmedReportCount
			,0											AS Test_UnconfirmedReportCount
			,0											AS Test_DeclinedReportCount
	FROM dbo.[Patient] P
	INNER JOIN dbo.[Case] C ON C.[PatientKey] = P.[Key]
	WHERE C.[Key] NOT IN (
		SELECT CaseKey FROM dbo.[Test] WHERE [CaseKey] IS NOT NULL)
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebOrganisationView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridOrganisationView')
	DROP VIEW [WebGridOrganisationView]

08/09/2020 14:03:04: 
CREATE VIEW [dbo].[WebGridOrganisationView]
AS
SELECT		O.[Key]							AS RefreshKey,
			O.[Key]							AS Organisation_Key,
			O.[Name]						AS Organisation_Name,
			O.[IsDefault]                   AS Is_Default 
FROM		[Organisation] O
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridColumnSetView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridColumnSetView')
	DROP VIEW [WebGridColumnSetView]

08/09/2020 14:03:04: 
CREATE VIEW [WebGridColumnSetView]
AS
SELECT     [ColumnSet].[Key]            AS RefreshKey,
		   [ColumnSet].[Key]            AS ColumnSet_Key,
		   [ColumnSet].[Name]           AS ColumnSet_Name,
		   [ColumnSet].[Description]    AS ColumnSet_Description,
		   [ColumnSet].[IsPreInstalled] AS ColumnSet_IsPreInstalled
FROM       [ColumnSet] 
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreatev10WebGridFilterView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridFilterView')
	DROP VIEW [WebGridFilterView]

08/09/2020 14:03:04: 
CREATE VIEW [dbo].[WebGridFilterView]
AS
SELECT	   [Filter].[Key]            AS RefreshKey,
		   [Filter].[Key]            AS Filter_Key,
		   [Filter].[Name]           AS Filter_Name,
		   [Filter].[Description]    AS Filter_Description,
		   [Filter].[DatabaseView]   AS Filter_DatabaseView,
		   [Filter].[Criteria]       AS Filter_Criteria,
		   [Filter].[IsPreInstalled] AS Filter_IsPreInstalled
FROM       [Filter] 
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridActiveDirectoryGroupView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
/****** Object:  View [dbo].[WebGridActiveDirectoryGroupView]    Script Date: 02/07/2018 14:47:27 ******/
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridActiveDirectoryGroupView')
	DROP VIEW [WebGridActiveDirectoryGroupView]

08/09/2020 14:03:04: 
CREATE VIEW [dbo].[WebGridActiveDirectoryGroupView]
AS
SELECT        [Name] AS RefreshKey, Name AS EditList_ActiveDirectoryGroupName
FROM            dbo.ActiveDirectoryGroup
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.View-SqlToCreateWebGridDataGridView.sql

08/09/2020 14:03:04: 
USE [LomondClinicalData]

08/09/2020 14:03:04: 
SET ANSI_NULLS ON

08/09/2020 14:03:04: 
SET QUOTED_IDENTIFIER ON

08/09/2020 14:03:04: 
IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'WebGridDataGridView')
	DROP VIEW [WebGridDataGridView]

08/09/2020 14:03:04: 
CREATE VIEW [WebGridDataGridView] AS 
SELECT 
[DataGrid].[Key]                  AS RefreshKey,
[DataGrid].[Key]                  AS DataGrid_Key,
[DataGrid].[Name]                 AS DataGrid_Name,
[DataGrid].[SearchPage]           AS DataGrid_SearchPage,
[DataGrid].[IsPreInstalled]       AS DataGrid_IsPreInstalled
FROM [dbo].[DataGrid]
08/09/2020 14:03:04: Running SQL script: Spacelabs.Lomond.Deployment.Database.Install.CreateSqlServerLogin.sql

08/09/2020 14:03:04: 
-- some of the GO statements really only improve the SQL reporting into the log file because EXEC, GRANT statements execute immediately and don't wait for commit
-- create the LomondApp login account which Sentinel uses to access SQL Server
USE [LomondClinicalData];

08/09/2020 14:03:04: 
IF NOT EXISTS ( SELECT * FROM master.dbo.syslogins WHERE name = 'LomondApp')
    EXEC sp_addlogin 'LomondApp', '******', 'LomondClinicalData'
IF EXISTS ( SELECT * FROM sysusers WHERE name='LomondApp' )
    EXEC sp_dropuser 'LomondApp'
EXEC sp_adduser 'LomondApp', 'LomondApp', null
EXEC sp_addrolemember 'db_datareader', 'LomondApp'
EXEC sp_addrolemember 'db_datawriter', 'LomondApp'
IF DATABASE_PRINCIPAL_ID('db_executor') IS NULL
	CREATE ROLE db_executor;
GRANT EXECUTE TO db_executor;
EXEC sp_addrolemember 'db_executor','LomondApp';

08/09/2020 14:03:05: 
-- add the LomondApp user to the LomondAuditData database
USE [LomondAuditData];

08/09/2020 14:03:05: 
IF EXISTS ( SELECT * FROM sysusers WHERE name='LomondApp')
    EXEC sp_dropuser 'LomondApp'
EXEC sp_adduser 'LomondApp', 'LomondApp', null
EXEC sp_addrolemember 'db_datareader', 'LomondApp'
EXEC sp_addrolemember 'db_datawriter', 'LomondApp'

08/09/2020 14:03:05: 
-- end of SQL script
Remvoing upgrade support methods.
08/09/2020 14:03:05: Running SQL script: Spacelabs.Lomond.Deployment.Database.UpgradeAnyVersion.SqlToRemoveSupportMethods.sql

08/09/2020 14:03:05: 
USE [LomondClinicalData];

08/09/2020 14:03:05: 
DROP PROCEDURE DeleteDefaultConstraintForColumn;
08/09/2020 14:03:05: Install Database complete.
